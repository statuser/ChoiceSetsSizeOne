# ---------------------------------------------------------------------------
#     MAXDIFFLIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package maxdifflib9_14_2; our @ISA = qw(onelistquestionlib9_14_2); sub new { my ($__ifw) = @_; $__ifw->{'_vo'} = "maxdiff"; bless($__ifw); return $__ifw; } sub _ve { my ($__ifz) = @_; $__ifz->SUPER::_ve(); delete $__ifz->{'_uk'}; my $__ifx = $__ifz->{'_uf'}; my ($__iga, $__igb) = _bgs($__ifx, $__ifz->{'_if'}, 0); $__ifx->{'_bha'} = $__iga; $__ifx->{'_bhb'} = $__igb + 1; my $__ify = $__ifz->_bgn(); if ($__ify) { $__ifz->{'_uf'}->{'_azv'} = $__ify; } } sub _bgn { my ($__igs) = @_; my $__igc = $__igs->{'_uf'}; my $__igd = 0; my $__ige = ""; my $__igf = ""; if (exists $__igc->{'_au'}) { $__igd = 1; } if (exists($__igc->{'_fn'})) { $__ige = $__igc->{'_fn'}->{'_op'}; if ($__ige =~ m/<!--(.*?)SSI_Comment:\s*CUSTOM_MAXDIFF_DESIGN(.*?)-->/is) { my $__igg = $2; my $__igh = ""; my $__igi = 0; if ($__igg =~ m/Free_Format_Base_Name:\s*(.*?)\s/is) { $__igh = $1; if (!exists($authlib9_14_2::_ahp{$__igh . "1"})) { $__igi = 1; if (!$authlib9_14_2::_amg) { authlib9_14_2::_zq(156, "Custom MaxDiff error.", "The question specified in the CUSTOM_MAXDIFF_DESIGN comment, " . $__igh ."1, does not exist in the question list.", ""); } } } else { $__igi = 1; if (!$authlib9_14_2::_amg) { authlib9_14_2::_zq(157, "Custom MaxDiff error.", "Cannot find the Free_Format_Base_Name instruction in the CUSTOM_MAXDIFF_DESIGN comment. Check syntax.", ""); } } if (!$__igi) { my $__igj = 1; my $__igk = ""; if ($__igg =~ m/Verification:\s*(.*?)\s/is) { $__igk = $1; if ($__igk =~ m/^OFF$/i) { $__igj = 0; } } my $__igl = ""; if ($__igs->{'_if'} =~ m/_(\d+)$/) { $__igl = $1; } $__igh .= $__igl; $__igf .= "<input type=\"hidden\" name=\"hid_Custom_MaxDiff_" . $__igs->{'_if'} . "\" value=\"" . $__igh . "\">"; $__igf .= "<input type=\"hidden\" name=\"" . $__igs->{'_if'} . "_b\" value=\"\">"; if (!exists $__igc->{'_au'}) { $__igf .= "<input type=\"hidden\" name=\"" . $__igs->{'_if'} . "_w\" value=\"\">"; } if ($authlib9_14_2::_ajg) { $__igf .= "<!--LoadTestMode: <question><name>" . $__igs->{'_if'} . "</name><type>custommaxdiff</type>"; $__igf .= "<freeformquest>" . $__igh . "</freeformquest>"; $__igf .= "<bestonly>" . (exists $__igc->{'_au'} ? "true" : "false") . "</bestonly>"; my $__igm = $__igc->{'_vu'}; my $__ign = $__igc->{'_bha'}; my $__igo = ""; foreach my $__igp (@{$__ign}) { my $__igq = $__igm->[$__igp]; $__igo .= $__igq->{'_pt'} . ","; } chop($__igo); $__igf .= "<indices>" . $__igo . "</indices>"; $__igf .= "<dualresponseanchor>" . (exists($__igc->{'_eg'}) ? "true" : "false") . "</dualresponseanchor>"; $__igf .= "</question>-->"; } if ($__igj == 0) { $__igh = ""; $__igf .= "<input type=\"hidden\" name=\"hid_Custom_MaxDiff_" . $__igs->{'_if'} . "_No_Verification\" value=\"1\">"; } my %__igr = (); $__igr{'_bhc'} = 1; $__igr{'_bhd'} = $__igh; $__igs->{'_vy'} = \%__igr; } } } return $__igf; } sub _vn { my ($__igu, $__igv, $__igw) = @_; my $__igt = $__igu->SUPER::_vn($__igv, $__igw); $__igt = _bgp($__igu, $__igt); return $__igt; } sub _vr { my ($__iik, $__iil, $__iim, $__iin, $__iio) = @_; my $__igx = ""; my $__igy = $__iik->{'_if'}; my $__igz = $__iik->{'_uf'}; my $__iha = $__igz->{'_gx'}; my $__ihb = $__iha == 4 || $__iha == 8; my $__ihc = ""; my $__ihd = 80; if (exists $__igz->{'_gv'}) { $__ihd = $__igz->{'_gv'}; } my $__ihe = 0; if (exists $__igz->{'_au'}) { $__ihe = 1; } my $__ihf = "alt_color1"; my $__ihg = "alt_color2"; my $__ihh = 0; $__ihh = 100 - $__ihd; if (!$__ihe && !$__ihb) { $__ihh = int($__ihh / 2); } my $__ihi = $__igz->{'_vu'}; my $__ihj = $__igz->{'_bha'}; my $__ihk = ""; my $__ihl = ""; my $__ihm = ""; $__igx .= "<table role=\"table\" class=\"inner_table\" width=\"100%\""; if ($__igz->{'_om'}) { $__igx .= " style=\"width: " . $__igz->{'_om'} . "px\""; } $__igx .= ">"; my @__ihn = (); foreach my $__iho (@{$__ihj}) { my $__ihp = $__igy . "_b_" . $__ihi->[$__iho]->{'_pt'}; push (@__ihn, $__ihp); push (@__ihn, $__ihp . "_graphical"); } $__ihk .= "<td role=\"" . ($__ihb ? "rowheader" : "columnheader") . "\" class=\"best_header\""; if ($__ihh > 0) { $__ihk .= " width=\"" . $__ihh . "%\""; } $__ihk .= "><div role=\"radiogroup\" aria-owns=\"" . join(" ", @__ihn) . "\">"; if (exists($__igz->{'_as'})) { $__ihk .= $__igz->{'_as'}->{'_op'}; $__ihk = _bgp($__iik, $__ihk); } else { $__ihk .= "&nbsp;"; } $__ihk .= "</div></td>"; my @__ihq = (); foreach my $__iho (@{$__ihj}) { my $__ihr = $__igy . "_w_" . $__ihi->[$__iho]->{'_pt'}; push (@__ihq, $__ihr); push (@__ihq, $__ihr . "_graphical"); } $__ihl .= "<td role=\"" . ($__ihb ? "rowheader" : "columnheader") . "\" class=\"worst_header\""; if ($__ihh > 0) { $__ihl .= " width=\"" . $__ihh . "%\""; } $__ihl .= "><div role=\"radiogroup\" aria-owns=\"" . join(" ", @__ihq) . "\">"; if (exists($__igz->{'_qa'})) { $__ihl .= $__igz->{'_qa'}->{'_op'}; $__ihl = _bgp($__iik, $__ihl); } else { $__ihl .= "&nbsp;"; } $__ihl .= "</div></td>"; $__ihm .= "<td role=\"" . ($__ihb ? "rowheader" : "columnheader") . "\" class=\"items_header\""; if ($__ihd > 0) { $__ihm .= " width=\""; if ($__ihb) { $__ihm .= $__ihh; } else { $__ihm .= $__ihd; } $__ihm .= "%\""; } $__ihm .= ">"; if (exists($__igz->{'_gm'})) { $__ihm .= $__igz->{'_gm'}->{'_op'}; $__ihm = _bgp($__iik, $__ihm); } else { $__ihm .= "&nbsp;"; } $__ihm .= "</td>"; my $__ihs = 0; my $__iht = ""; my $__ihu = @{$__ihj}; my $__ihv = 0; my $__ihw = 1; if ($__ihe) { if (!exists($__igz->{'_gm'}) && !exists($__igz->{'_as'})) { $__ihw = 0; } } if ($__ihb) { my $__ihx = 3; if ($__ihe) { $__ihx = 2; if (!$__ihw) { $__ihd = 0; } } my $__ihy = int($__ihd / $__ihu); my $__ihz = 0; my $__iia = 1; if ($__iha == 8) { $__iia = 0; } for ($__ihz = 1; $__ihz <= $__ihx; $__ihz++) { if ($__ihz == 1 && $__ihw) { $__igx .= "<tr>"; $__igx .= $__ihm; } elsif ($__ihz == 2 && $__ihw) { $__igx .= "<tr role=\"radiogroup\" id=\"" . $__igy; if ($__iha == 4) { $__igx .= "_b_row\">"; $__igx .= $__ihk; } else { $__igx .= "_w_row\">"; $__igx .= $__ihl; } } elsif ($__ihz == 3) { $__igx .= "<tr id=\"" . $__igy; if ($__iha == 4) { $__igx .= "_w_row\">"; $__igx .= $__ihl; } else { $__igx .= "_b_row\">"; $__igx .= $__ihk; } } foreach $__ihv (@{$__ihj}) { $__ihs = $__ihi->[$__ihv]; $__iio = !$__iio; if ($__iio == 1) { $__ihc = $__ihf; } else { $__ihc = $__ihg; } if ($__ihz == 1) { $__igx .= _bgq($__ihs->{'_op'}, $__ihc, $__ihy, $__ihb); } elsif ($__ihz == 2) { $__igx .= _bgr($__igy, $__iia, $__ihs->{'_pt'}, $__igz, $__ihc); } elsif ($__ihz == 3) { $__igx .= _bgr($__igy, !$__iia, $__ihs->{'_pt'}, $__igz, $__ihc); } } $__igx .= "</tr>"; if ($__ihz < 3) { if ($__ihu & 1) { $__iio = !$__iio; } } } } else { if ($__ihw) { $__igx .= "<tr>"; if ($__iha == 1) { $__igx .= $__ihk; $__igx .= $__ihm; if (!$__ihe) { $__igx .= $__ihl; } } elsif ($__iha == 2) { $__igx .= $__ihk; if (!$__ihe) { $__igx .= $__ihl; } $__igx .= $__ihm; } elsif ($__iha == 3) { $__igx .= $__ihm; $__igx .= $__ihk; if (!$__ihe) { $__igx .= $__ihl; } } elsif ($__iha == 5) { $__igx .= $__ihl; $__igx .= $__ihm; $__igx .= $__ihk; } elsif ($__iha == 6) { $__igx .= $__ihl; $__igx .= $__ihk; $__igx .= $__ihm; } elsif ($__iha == 7) { $__igx .= $__ihm; $__igx .= $__ihl; $__igx .= $__ihk; } $__igx .= "</tr>"; } my $__iib = ""; my $__iic = ""; my $__iid = ""; foreach $__ihv (@{$__ihj}) { $__ihs = $__ihi->[$__ihv]; $__iio = !$__iio; if ($__iio == 1) { $__ihc = $__ihf; } else { $__ihc = $__ihg; } $__igx .= "<tr class=\"body_row\">"; $__iib = _bgr($__igy, 1, $__ihs->{'_pt'}, $__igz, $__ihc); $__iic = _bgr($__igy, 0, $__ihs->{'_pt'}, $__igz, $__ihc); $__iid = _bgq($__ihs->{'_op'}, $__ihc, $__ihd, $__ihb); if ($__iha == 1) { $__igx .= $__iib; $__igx .= $__iid; if (!$__ihe) { $__igx .= $__iic; } } elsif ($__iha == 2) { $__igx .= $__iib; if (!$__ihe) { $__igx .= $__iic; } $__igx .= $__iid; } elsif ($__iha == 3) { $__igx .= $__iid; $__igx .= $__iib; if (!$__ihe) { $__igx .= $__iic; } } elsif ($__iha == 5) { $__igx .= $__iic; $__igx .= $__iid; $__igx .= $__iib; } elsif ($__iha == 6) { $__igx .= $__iic; $__igx .= $__iib; $__igx .= $__iid; } elsif ($__iha == 7) { $__igx .= $__iid; $__igx .= $__iic; $__igx .= $__iib; } $__igx .= "</tr>"; } } $__igx .= "</table>\n"; if (exists($__igz->{'_eg'})) { my $__iie = $__igy . "_anchor"; $__igx .= "<div id=\"" . $__iie . "\" class=\"dual_response_anchor\">\n"; if (exists $__igz->{'_eg'}->{'_fp'}) { $__igx .= "<div class=\"question_text\" >" . $__igz->{'_eg'}->{'_fp'}->{'_op'} . "</div>"; } $__igx .= "<table>\n"; my $__iif = $__igz->{'_eg'}->{'_mo'}; my $__iig = $__iif->[0]->{'_pt'}; my $__iih = $__iif->[0]->{'_op'}; my $__iii = $__iie . "_" . $__iig; $__igx .= "<tr class=\"clickable\">"; $__igx .= "<td class=\"input_cell\">"; $__igx .= ciwlib9_14_2::_tm($__iie, $__iig, 1, $__igz); $__igx .= "</td>\n"; $__igx .= "<td class=\"option_cell\">"; $__igx .= "<div class=\"options\"><label for=\"" . $__iii . "\" id=\"" . $__iii . "\">"; $__igx .= $__iih; $__igx .= "</label></div></td></tr>\n"; $__iig = $__iif->[1]->{'_pt'}; $__iih = $__iif->[1]->{'_op'}; $__iii = $__iie . "_" . $__iig; $__igx .= "<tr class=\"clickable\">"; $__igx .= "<td class=\"input_cell\">"; $__igx .= ciwlib9_14_2::_tm($__iie, $__iig, 1, $__igz); $__igx .= "</td>\n"; $__igx .= "<td class=\"option_cell\">"; $__igx .= "<div class=\"options\"><label for=\"" . $__iii . "\" id=\"" . $__iii . "\">"; $__igx .= $__iih; $__igx .= "</label></div></td></tr>\n"; $__iig = $__iif->[2]->{'_pt'}; $__iih = $__iif->[2]->{'_op'}; $__iii = $__iie . "_" . $__iig; $__igx .= "<tr class=\"clickable\">"; $__igx .= "<td class=\"input_cell\">"; $__igx .= ciwlib9_14_2::_tm($__iie, $__iig, 1, $__igz); $__igx .= "</td>\n"; $__igx .= "<td class=\"option_cell\">"; $__igx .= "<div class=\"options\"><label for=\"" . $__iii . "\" id=\"" . $__iii . "\">"; $__igx .= $__iih; $__igx .= "</label></div></td></tr>\n"; $__igx .= "</table>"; $__igx .= "</div>\n"; } if ($authlib9_14_2::_ajg) { my $__iij = ""; foreach $__ihv (@{$__ihj}) { $__ihs = $__ihi->[$__ihv]; $__iij .= $__ihs->{'_pt'} . ","; } chop($__iij); $__igx .= "<!--LoadTestMode: <question><name>" . $__igy . "</name><type>maxdiff</type><indices>$__iij</indices>"; $__igx .= "<bestonly>" . ($__ihe ? "true" : "false") . "</bestonly>"; $__igx .= "<dualresponseanchor>" . (exists($__igz->{'_eg'}) ? "true" : "false") . "</dualresponseanchor>"; $__igx .= "</question>-->"; } if (($__ihu & 1)) { $__iio = !$__iio; } $__iik->{'_vy'} = {}; return $__igx; } sub _vf { my ($__iiu) = @_; my $__iip = ""; my $__iiq = ""; my $__iir = $__iiu->{'_uf'}; if (exists $__iir->{'_as'}) { $__iiq = ciwlib9_14_2::_tk($__iir->{'_as'}, 0, 0); if ($__iiq) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .best_header {" . $__iiq . "}\n"; } } if (exists $__iir->{'_gm'}) { $__iiq = ciwlib9_14_2::_tk($__iir->{'_gm'}, 0, 0); if ($__iiq) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .items_header {" . $__iiq . "}\n"; } } if (exists $__iir->{'_qa'}) { $__iiq = ciwlib9_14_2::_tk($__iir->{'_qa'}, 0, 0); if ($__iiq) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .worst_header {" . $__iiq . "}\n"; } } if (exists $__iir->{'_gl'}) { $__iiq = ciwlib9_14_2::_tk($__iir->{'_gl'}, 0, 0); if ($__iiq) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .item_text_cell {" . $__iiq . "}\n"; } } if (exists $__iir->{'_q'}) { if (exists $__iir->{'_q'}->{'_ay'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .alt_color1 {background-color: #" . $__iir->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__iir->{'_q'}->{'_az'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .alt_color2 {background-color: #" . $__iir->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__iir->{'_bg'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .inner_table td, #" . $__iiu->{'_if'} . "_div .inner_table{border-width: " . $__iir->{'_bg'} . "px; border-style: solid;}\n"; } if (exists $__iir->{'_cc'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .inner_table td {padding: " . $__iir->{'_cc'} . "px;}\n"; } if (exists $__iir->{'_og'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__iir->{'_og'}) . "}\n"; } if (exists $__iir->{'_ar'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .best_input_cell {background-color: #" . $__iir->{'_ar'} . "}\n"; $__iip .= "\n#" . $__iiu->{'_if'} . "_div .best_header {background-color: #" . $__iir->{'_ar'} . "}\n"; } if (exists $__iir->{'_pz'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .worst_input_cell {background-color: #" . $__iir->{'_pz'} . "}\n"; $__iip .= "\n#" . $__iiu->{'_if'} . "_div .worst_header {background-color: #" . $__iir->{'_pz'} . "}\n"; } if (exists $__iir->{'_eg'}) { if (exists $__iir->{'_eg'}->{'_fp'}) { my $__iis = $__iir->{'_eg'}->{'_fp'}; if (exists $__iis->{'_et'}) { $__iiq = ciwlib9_14_2::_tk($__iis, 0, 0); if ($__iiq) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .dual_response_anchor .question_text {" . $__iiq . "}\n"; } } } if (exists $__iir->{'_eg'}->{'_mn'}) { my $__iit = $__iir->{'_eg'}->{'_mn'}; $__iiq = ciwlib9_14_2::_tk($__iit, 0, 1); if ($__iiq) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .dual_response_anchor .options {" . $__iiq . "}\n"; } if (exists $__iit->{'_et'}) { if (exists $__iit->{'_et'}->{'_m'}) { $__iip .= "\n#" . $__iiu->{'_if'} . "_div .dual_response_anchor table {" . ciwlib9_14_2::_tl($__iit->{'_et'}->{'_m'}) . "}\n"; } } } } return $__iip; } sub _vs { my ($__iiy, $__iiz, $__ija, $__ijb) = @_; if (exists $__iiy->{'_vy'}) { my $__iiv = $__iiy->{'_vy'}; my $__iiw = $__iiy->{'_if'}; if ($__iiv->{'_bhc'}) { $__iiw = $__iiv->{'_bhd'}; $__ijb--; } if ($__iiw) { my $__iix = "SSI_RadCheck(\"" . $__iiw . "_b\",\"" . $__iiw . "\", \"" . ciwlib9_14_2::_sx($__iiy->{'_uf'}->{'_ek'}) . "\", " . $__ijb . ", true)"; push @{$__iiz}, ($__iix); $__ija->{'_uu'} = 1; if (!exists $__iiy->{'_uf'}->{'_au'}) { $__iix = "SSI_RadCheck(\"" . $__iiw . "_w\",\"" . $__iiw . "\", \"" . ciwlib9_14_2::_sx($__iiy->{'_uf'}->{'_ek'}) . "\", " . $__ijb . ", true)"; push @{$__iiz}, $__iix; $__iix = "SSI_CheckMaxDiff(\"" . $__iiw . "\", \"" . ciwlib9_14_2::_sx($__iiy->{'_uf'}->{'_ek'}) . "\", " . $__ijb . ")"; push @{$__iiz}, $__iix; $__ija->{'_vc'} = 1; } if ($__iiy->{'_uf'}->{'_eg'}) { $__iix = "SSI_RadCheck(\"" . $__iiw . "_anchor\",\"" . $__iiw . "\", \"" . ciwlib9_14_2::_sx($__iiy->{'_uf'}->{'_ek'}) . "\", " . $__ijb . ", true)"; push @{$__iiz}, $__iix; } } } } sub _bgo { my ($__ije) = @_; my $__ijc = 0; if ($__ije->{'_if'} =~ m/_(\d+)$/) { $__ijc = $1 - 1; } my $__ijd = $__ije->{'_uf'}->{'_pd'}; if ($__ijc >= $__ijd) { $__ije->{'_uk'} = 1; } } sub _bgp { my ($__ijm, $__ijn) = @_; my $__ijf = $__ijm->{'_if'}; my $__ijg = ""; my $__ijh = 0; if ($__ijf =~ m/^(.*?)_(.*?)$/) { $__ijg = $1; $__ijh = $2; } $__ijn = authlib9_14_2::_acq($__ijn); if ($__ijn =~ m/\[%MAXDIFFCURRENTSET\(\)%\]/i) { $__ijn =~ s/\[%MAXDIFFCURRENTSET\(\)%\]/$__ijh/sgi; } if ($__ijn =~ m/\[%MAXDIFFTOTALSETS\(\)%\]/i) { my $__iji = 0; my $__ijj = ""; if (exists $__ijm->{'_uf'}->{'_pd'}) { $__iji = $__ijm->{'_uf'}->{'_pd'}; } $__ijn =~ s/\[%MAXDIFFTOTALSETS\(\)%\]/$__iji/sgi; } if ($__ijn =~ m/\[%MAXDIFFVERSION\(\)%\]/i) { my $__ijk = $__ijm->{'_uf'}->{'_bhb'}; my $__ijl = "D - " . $__ijk . ", T - " . $__ijf; $__ijn =~ s/\[%MAXDIFFVERSION\(\)%\]/$__ijl/sgi; } return $__ijn; } sub _bgq { my ($__ijp, $__ijq, $__ijr, $__ijs) = @_; my $__ijo = ""; $__ijo .= "<td role=\"" . ($__ijs ? "columnheader" : "rowheader") . "\" class=\"item_text_cell " . $__ijq . "\""; if ($__ijr > 0) { $__ijo .= " width=\"" . $__ijr . "%\" "; } $__ijo .= ">"; $__ijo .= "<div class=\"item_text\">" . $__ijp . "</div>"; $__ijo .= "</td>"; return $__ijo; } sub _bgr { my ($__ijw, $__ijx, $__ijy, $__ijz, $__ika) = @_; my $__ijt = ""; my $__iju = $__ijw; my $__ijv = ""; if ($__ijx) { $__iju .= "_b"; $__ijv = "best_input_cell"; } else { $__iju .= "_w"; $__ijv = "worst_input_cell"; } $__ijt .= "<td class=\"" . $__ijv . " " . $__ika . " " . $__iju . " input_cell clickable\">"; $__ijt .= ciwlib9_14_2::_tm($__iju, $__ijy, 1, $__ijz); $__ijt .= "</td>"; return $__ijt; } sub _bgs { my ($__ild, $__ile, $__ilf) = @_; if (exists $__ild->{'_dj'}) { return _bgt($__ild, $__ile, $__ilf); } my $__ikb = $__ild->{'_el'}; my $__ikc = $__ild->{'_dv'}; my $__ikd = $__ild->{'_du'}; my $__ike = ""; my $__ikf = 0; my $__ikg = 0; my $__ikh = 0; my $__iki = 0; my $__ikj = 1; my $__ikk = 0; my $__ikl = 0; my $__ikm = 0; my $__ikn = 0; my $__iko = 0; my $__ikp = "_MXD" . $__ikb . "_" . $__ikc . ".cgi"; my $__ikq = $authlib9_14_2::_ahv{'_aml'} . $authlib9_14_2::_akh . $__ikp; my ($__ilg, $__ilh) = authlib9_14_2::_yg($__ikq, "read", 1, 1); binmode $__ilg; if (((-s $__ikq) != $__ikd) && !$authlib9_14_2::_amg) { close $__ilg; authlib9_14_2::_zq(158, "MaxDiff design file error.", "The size of the MaxDiff design file (" . $__ikq . ") does not match the size expected by the QST file. Try uploading the file again in binary mode.", ""); } my $__ikr = 0; read ($__ilg, $__ike, 4); ($__ikf) = unpack("V", $__ike); if ($__ikf == 1) { $__ikr = 22; } else { $__ikr = 23; } read ($__ilg, $__ike, $__ikr - 4); if ($__ikf == 1) { ($__ikg, $__ikh, $__iki, $__ikk, $__ikl, $__ikm, $__ikn, $__iko) = unpack("VVCvvvvC", $__ike); } else { ($__ikg, $__ikh, $__iki, $__ikj, $__ikk, $__ikl, $__ikm, $__ikn, $__iko) = unpack("VVCCvvvvC", $__ike); } if ($__ikg != $__ikb) { close $__ilg; authlib9_14_2::_zq(159, "MaxDiff design file error.", "Exercise ID in MaxDiff design file (" . $__ikq . ") does not match exercise ID in the QST file.", ""); } elsif ($__ikh != $__ikc) { close $__ilg; authlib9_14_2::_zq(160, "MaxDiff design file error.", "Unique ID in MaxDiff design file (" . $__ikq . ") does not match unique ID in the QST file.", ""); } my $__iks = $authlib9_14_2::_akn{"hid_respnum"}; my $__ikt = ($__iks - 1) % $__ikk; _bgu($__iks, $__ile, $__ikg, $__ikh, $__ikt, $__ikj); my $__iku = $__ikr; my $__ikv = $__ikn * $__iko; my $__ikw = $__ikm * $__ikv; $__iku += ($__ikt * $__ikw); my $__ikx = 0; if ($__ile =~ m/(.*?)_(\d+)/i) { $__ikx = int($2); } $__iku += (($__ikx - 1) * $__ikv); seek ($__ilg, $__iku, 0); my $__iky = ""; read $__ilg, $__iky, $__ikv; my @__ikz = (); if ($__iko == 1) { @__ikz = unpack("C*", $__iky); } elsif ($__iko == 2) { @__ikz = unpack("v*", $__iky); } close $__ilg; my $__ila = authlib9_14_2::_acx($__ild->{'_hj'}); if ($__ila && exists($__ila->{'_jq'}) && $__ilf == 1) { my $__ilb = authlib9_14_2::_aaz($__ild); for (my $__ilc = 0; $__ilc < scalar(@__ikz); $__ilc++) { $__ikz[$__ilc] = $__ilb->[$__ikz[$__ilc]]->{'_pt'} - 1; } } return (\@__ikz, $__ikt); } sub _bgt { my ($__inb, $__inc, $__ind) = @_; my $__ili = $__inb->{'_dj'}; my $__ilj = 0; my @__ilk = (); my $__ill = \@__ilk; my $__ilm = $authlib9_14_2::_akn{"hid_respnum"}; my $__iln = $__inc; $__iln =~ s/_\d+//; my $__ilo = 'sys_MaxDiff_'. $__iln .'_design'; my $__ilp = authlib9_14_2::_ws($__ilo); if ($__inc =~ m/_(\d+)$/) { $__ilj = $1 - 1; } if ($__ilp) { $__ill = eval($__ilp); if (exists $__ill->[$__ilj]) { for (my $__ilq = 0; $__ilq < @{$__ill->[$__ilj]}; $__ilq++) { $__ill->[$__ilj]->[$__ilq]--; } } } else { if (!exists $__ili->{'_bq'}) { authlib9_14_2::_zq(158, "Legacy MaxDiff designer unsupported", "The legacy MaxDiff on the fly designer has been removed and is not supported.", ""); } eval { require LWP::UserAgent; }; if ($@) { authlib9_14_2::_zq(367, "The MaxDiff API could not be reached.", "The MaxDiff designer API could not be reached for respondent " . $__ilm . ". The API is not supported if using Offline Surveys or self hosting. Unable to load LWP.", $@); } eval { require JSON; }; if ($@) { authlib9_14_2::_zq(368, "The MaxDiff API could not be reached.", "The MaxDiff designer API could not be reached for respondent " . $__ilm . ". The API is not supported if using Offline Surveys or self hosting. Unable to load JSON.", $@); } my $__ilr = $ENV{'MaxDiffDesignerBaseUrl'}; if (!$__ilr) { authlib9_14_2::_zq(369, "The MaxDiff API could not be reached.", "The MaxDiff designer API could not be reached for respondent " . $__ilm . ". The API is not supported if using Offline Surveys or self hosting. Missing base URL.", $@); } my @__ils = (); my %__ilt = (); if (exists $__inb->{'_vu'}) { my @__ilu = @{$__inb->{'_vu'}}; for (my $__ilq = 0; $__ilq < scalar @__ilu; $__ilq++) { my $__ilv = $__ilu[$__ilq]->{'_pt'}; push(@__ils, $__ilv - 1); $__ilt{$__ilv} = 1; } } my @__ilw = (); if (exists $__ili->{'_ks'}) { my %__ilx = %{$__ili->{'_ks'}}; foreach my $__ily (keys %__ilx) { if (exists $__ilt{$__ily}) { foreach my $__ilz (@{$__ilx{$__ily}}) { if (exists $__ilt{$__ilz}) { if ($__ily < $__ilz) { my %__ima = ( "Item1" => $__ily - 1, "Item2" => $__ilz - 1 ); push(@__ilw, \%__ima); } } } } } } my $__imb = $__ili->{'_gn'}; my $__imc = $__inb->{'_pd'}; my $__imd = $__ili->{'_ht'}; if ($__imd) { my $__ime = scalar(@__ils); if ($__ime < $__imb) { $__imc = 0; } elsif ($__ime == $__imb) { $__imc = 1; } elsif ($__ime < $__imb * 1.5) { $__imc = 2; } else { my $__imf = authlib9_14_2::_abi($__imd * $__ime / $__imb); if ($__imf < $__imc) { $__imc = $__imf; } } } if ($__imc > 0) { my $__img; my %__imh; if ($authlib9_14_2::_amg) { $__img = "Design/Preview"; %__imh = ( "Items" => \@__ils, "SetCount" => $__imc, "ItemsPerSet" => $__imb ); } else { $__img = "Design"; my %__imi = ( "IncludedItems" => \@__ils, "Prohibitions" => \@__ilw, "SetCount" => $__imc, "ItemsPerSet" => $__imb, "UseNaturalOrder" => ($__ili->{'_gj'} == 2 ? \1 : \0) ); my %__imj = ( "VersionCount" => 1, "IterationCount" => $__ili->{'_go'}, "RandomSeed" => $__ilm, "PermitIndeterminate" => \$__ili->{'_jw'}, "MaxDesignTimeInSeconds" => $__ili->{'_hs'}, "AllowEarlyBreakout" => \$__ili->{'_o'} ); %__imh = ( "ExerciseProperties" => \%__imi, "GenerationProperties" => \%__imj ); } my $__imk = $__ilr . "/" . $__img; my $__iml = JSON->new->utf8->encode(\%__imh); my $__imm = LWP::UserAgent->new; my $__imn = $__imm->post($__imk, "Api-Version" => "1.0", "Content-type" => "application/json", Content => $__iml); if ($__imn->is_error) { eval { my $__imo = JSON->new->utf8->decode($__imn->content); my $__imp = $__imo->{"message"}; authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "Respondent " . $__ilm . " was not shown MaxDiff exercise \"" . $__iln . "\" because the designer returned the following error: " . $__imp); }; if ($@) { authlib9_14_2::_zq(370, "The MaxDiff API could not be reached.", "The MaxDiff designer API could not be reached for respondent " . $__ilm . ". The API is not supported if using Offline Surveys or self hosting.", $@); } } else { my $__imq = JSON->new->utf8->decode($__imn->content); my @__imr = @{$__imq->{"model"}->{"versions"}->[0]->{"tasks"}}; my @__ims = (); for (my $__ilq = 0; $__ilq < scalar @__imr; $__ilq++) { push(@__ims, $__imq->{"model"}->{"versions"}->[0]->{"tasks"}->[$__ilq]->{"items"}); } $__ill = \@__ims; } } else { authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "Respondent " . $__ilm . " was not shown MaxDiff exercise \"" . $__iln . "\" because the number of items in their constructed list was fewer than the required number of items per set."); } if ($__imc > 0 && $__ill) { if (!$authlib9_14_2::_amg) { my @__imt = (); my $__imu = authlib9_14_2::_acv($__ill); for (my $__ilq = 0; $__ilq < @{$__imu}; $__ilq++) { my $__imv = $__imu->[$__ilq]; for (my $__imw = 0; $__imw < @{$__imv}; $__imw++) { $__imv->[$__imw]++; } } push @__imt, [$__ilo, authlib9_14_2::_wz($__imu)]; my $__imx = '{"total_sets":'. $__inb->{'_pd'}; $__imx .= ',"items_per_set":'. $__ili->{'_gn'}; $__imx .= ',"item_order":'. $__ili->{'_gj'}; $__imx .= ',"items":['. join(',', map {$_->{'_pt'}} @{$__inb->{'_vu'}}) . ']}'; push @__imt, [$__ilo . "_info", $__imx]; authlib9_14_2::_xv(\@__imt, $__ilm, 1, 1); authlib9_14_2::_xj(\@__imt, $__ilm, 0); } } } my $__imc = scalar(@{$__ill}); $__inb->{'_pd'} = $__imc; if (exists $__ill->[$__ilj] && $__imc > 0 && $__ind == 0) { my $__imy = authlib9_14_2::_aaz($__inb); my %__imz; for (my $__ilq = 0; $__ilq < scalar(@{$__imy}); $__ilq++) { $__imz{$__imy->[$__ilq]->{'_pt'}} = $__ilq; } my @__ina = (); for (my $__ilq = 0; $__ilq < scalar(@{$__ill->[$__ilj]}); $__ilq++) { push(@__ina, $__imz{$__ill->[$__ilj]->[$__ilq] + 1}); } return (\@__ina, $__ilj); } return ($__ill->[$__ilj], $__ilj); } sub _bgu { my ($__inn, $__ino, $__inp, $__inq, $__inr, $__ins) = @_; my @__ine = (); my $__inf = $__ino; $__inf =~ s/_\d+//; my $__ing = "sys_MXDDesignID_" . $__inf; my $__inh = "MXD" . $__inp . "_" . $__inq . "_" . $__ins; my $__ini = authlib9_14_2::_ws($__ing); if ($__ini) { $__ini = $__ini; if ($__ins == 1) { if ($__ini !~ m/^(.*?)_(\d+)_(\d+)$/ig) { $__inh =~ s/^(.*?)_(\d+)$/$1/; } } if ($__ini ne $__inh) { my $__inj = "sys_MXDDesignError_" . $__inf; if (!authlib9_14_2::_ws($__inj)) { my $__ink = "MaxDiff Design Error: This data record contains data from two different MaxDiff designs. " . $__inh; authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, $__ink); push @__ine, [$__inj, $__ink]; } } } else { push @__ine, [$__ing, $__inh]; } my $__inl = "sys_MXDVersion_" . $__inf; my $__inm = $__inr + 1; if (!authlib9_14_2::_ws($__inl)) { push @__ine, [$__inl, $__inm]; } if (@__ine && !$authlib9_14_2::_amg) { authlib9_14_2::_xj(\@__ine, $__inn, 0); } } sub _bgv { my ($__ioi, $__ioj, $__iok) = @_; my $__int = 0; my $__inu = 0; my $__inv = 0; my $__inw = 0; my $__inx = ""; my @__iny = (); my $__inz = 0; for (my $__ioa = 1; $__ioa <= $__ioi->{'_pd'}; $__ioa++) { my $__iob = $__ioj . "_" . $__ioa; my $__ioc = authlib9_14_2::_ws($__iob . "_b"); my $__iod = authlib9_14_2::_ws($__iob . "_w"); if ($__ioc || $__iod) { ($__inv, $__inw) = _bgs($__ioi, $__iob, $__iok); my $__ioe = authlib9_14_2::_acx($__ioi->{'_hj'}); if ($__ioe && exists($__ioe->{'_jq'}) && $__iok == 0) { my $__iof = authlib9_14_2::_aaz($__ioi); my %__iog; for (my $__ioh = 0; $__ioh < scalar(@{$__iof}); $__ioh++) { $__iog{$__iof->[$__ioh]->{'_pt'}} = $__ioh; } if ($__ioc) { $__ioc = $__iog{$__ioc} + 1; } if ($__iod) { $__iod = $__iog{$__iod} + 1; } } $__inz = {}; $__inz->{"design"} = $__inv; if ($__ioc) { $__inz->{"best"} = $__ioc - 1; } if ($__iod) { $__inz->{"worst"} = $__iod - 1; } push(@__iny, $__inz); } } return \@__iny; } sub _bgw { my ($__iov) = @_; my $__iol = $authlib9_14_2::_akj . "_maxdiff_banditdata"; my $__iom = ""; my $__ion = 0; my $__ioo = 0; eval { $__iom = "SELECT DISTINCT `exercise_name` FROM `" . $__iol . "`"; $__ion = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__iom, 0)); $__ion->execute(); $__ioo = $__ion->fetchall_arrayref(); }; if ($@) { authlib9_14_2::_zq(362, "", "Bandit MaxDiff update error.", $@); } eval { foreach my $__iop (@{$__ioo}) { my $__ioq = $__iop->[0]; my $__ior = _bgx($__iov, $__ioq); if (keys %{$__ior}) { authlib9_14_2::_wf($__iol); $__iom = "UPDATE `" . $__iol . "` SET `times_included` = `times_included` + ?, `occurrences` = `occurrences` + ?, `inferred_pair_best` = `inferred_pair_best` + ?, `inferred_pair_total` = `inferred_pair_total` + ? WHERE `exercise_name`=? AND `parent_list_value`=?"; $__ion = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__iom, 0)); foreach my $__ios (keys %{$__ior}) { my $__iot = $__ior->{$__ios}; $__ion->execute($__iot->{'_bhe'}, $__iot->{'_bhf'}, $__iot->{'_bhg'}, $__iot->{'_bhh'}, $__ioq, $__ios); } $authlib9_14_2::_ake->commit(); authlib9_14_2::_wg(); } } }; if ($@) { my $__iou = $@; authlib9_14_2::_wg(); authlib9_14_2::_zq(350, "", "Bandit MaxDiff update error.", $__iou); } } sub _bgx { my ($__ipi, $__ipj) = @_; my $__iow = {}; my $__iox = authlib9_14_2::_aay($__ipj . "_1"); my $__ioy = _bgv($__iox, $__ipj, 1); if (@{$__ioy} > 0) { my $__ioz = authlib9_14_2::_aaz($__iox); foreach my $__ipa (@{$__ioz}) { my %__ipb = (); $__ipb{'_bhe'} = 1; $__ipb{'_bhf'} = 0; $__ipb{'_bhg'} = 0; $__ipb{'_bhh'} = 0; $__iow->{$__ipa->{'_pt'}} = \%__ipb; } foreach my $__ipc (@{$__ioy}) { my @__ipd = @{$__ipc->{"design"}}; my $__ipe = scalar @__ipd; foreach my $__ipf (@__ipd) { $__iow->{$__ipf + 1}->{'_bhf'} += 1; } if (exists $__ipc->{"best"}) { my $__ipg = $__ipc->{"best"} + 1; $__iow->{$__ipg}->{'_bhg'} += $__ipe - 1; $__iow->{$__ipg}->{'_bhh'} += $__ipe - 1; foreach my $__ipf (@__ipd) { if ($__ipc->{"best"} != $__ipf && $__ipc->{"worst"} != $__ipf) { $__iow->{$__ipf + 1}->{'_bhh'} += 1; } } } if (exists $__ipc->{"worst"}) { my $__iph = $__ipc->{"worst"} + 1; $__iow->{$__iph}->{'_bhh'} += $__ipe - 1; foreach my $__ipf (@__ipd) { if ($__ipc->{"best"} != $__ipf && $__ipc->{"worst"} != $__ipf) { $__iow->{$__ipf + 1}->{'_bhg'} += 1; $__iow->{$__ipf + 1}->{'_bhh'} += 1; } } } } } return $__iow; } sub _bgy { my ($__ipq, $__ipr, $__ips, $__ipt) = @_; my $__ipk = undef; my $__ipl = undef; my $__ipm = undef; if ($__ipq) { my $__ipn = maxdifflib9_14_2::_bgv($__ipq, $__ipr, 0); if (@{$__ipn} > 0) { my $__ipo = authlib9_14_2::_aaz($__ipq); my $__ipp = 0; if ($__ipo) { $__ipp = @{$__ipo}; } if ($__ipp > 0) { ($__ipk, $__ipl, $__ipm) = _bgz($__ipn, $__ipp); } } } return ($__ipk, $__ipl, $__ipm); } sub _bgz { my ($__iqy, $__iqz) = @_; my $__ipu = 0; my $__ipv = -9999; my $__ipw = 0.25; my $__ipx = 250; my $__ipy = 0.03; my $__ipz = 15; my @__iqa = (0) x $__iqz; my $__iqb = 0; my $__iqc = 0; for ($__iqb = 0; $__iqb < $__ipx; $__iqb++) { $__ipu = 0; my @__iqd = (0) x $__iqz; $__iqc = 0; foreach my $__iqe (@{$__iqy}) { my @__iqf = map { $__iqa[$_] } @{$__iqe->{"design"}}; if (exists $__iqe->{"best"}) { $__iqc++; my $__iqg = 0; my @__iqh = map{$_ / $__iqg} map { my $__iqi = exp($_); $__iqg += $__iqi; $__iqi } @__iqf; my $__iqj = 0; $__iqj++ until ($__iqe->{"design"}->[$__iqj] == $__iqe->{"best"} || $__iqj >= @__iqf); if ($__iqj < @__iqf) { $__ipu += log($__iqh[$__iqj]); map { $_ = -$_ } @__iqh; $__iqh[$__iqj] += 1; for (my $__iqk = 0; $__iqk < @__iqf; $__iqk++) { $__iqd[$__iqe->{"design"}->[$__iqk]] += $__iqh[$__iqk]; } } } if (exists $__iqe->{"worst"}) { $__iqc++; my $__iql = 0; my @__iqm = map {$_ / $__iql} map { my $__iqi = exp(-$_); $__iql += $__iqi; $__iqi } @__iqf; my $__iqj = 0; $__iqj++ until ($__iqe->{"design"}->[$__iqj] == $__iqe->{"worst"} || $__iqj >= @__iqf); if ($__iqj < @__iqf) { $__ipu += log($__iqm[$__iqj]); $__iqm[$__iqj] -= 1; for (my $__iqk = 0; $__iqk < @__iqf; $__iqk++) { $__iqd[$__iqe->{"design"}->[$__iqk]] += $__iqm[$__iqk]; } } } } my $__iqn = -0x80000000; my $__iqo = 0x80000000; for (my $__iqk = 0; $__iqk < @__iqa; $__iqk++) { if ($__iqc) { $__iqa[$__iqk] += ($__iqd[$__iqk] / $__iqc) * 6; } if ($__iqn < $__iqa[$__iqk]) { $__iqn = $__iqa[$__iqk]; } if ($__iqo > $__iqa[$__iqk]) { $__iqo = $__iqa[$__iqk]; } } if (abs($__ipu - $__ipv) < $__ipy) { last; } elsif (abs($__iqn - $__iqo) > $__ipz) { last; } $__ipv = $__ipu; } my $__iqp = 0; for (my $__iqb = 0; $__iqb < @__iqa; $__iqb++) { $__iqp += $__iqa[$__iqb]; } my $__iqq = $__iqp / @__iqa; my $__iqr = 0; foreach my $__iqs (@__iqa) { my $__iqt = exp($__iqs - $__iqq); $__iqs = $__iqt / ($__iqt + 1); $__iqr += $__iqs; } $__iqr = 100 / $__iqr; map { $_ *= $__iqr } @__iqa; my $__iqu = 0; my $__iqv = 0; if ($__iqc) { $__iqu = exp($__ipu / $__iqc); my $__iqw = @{$__iqy->[0]->{"design"}}; my $__iqx = log(1 / $__iqw) * $__iqc; $__iqv = ($__ipu - $__iqx) / (0 - $__iqx); } return (\@__iqa, $__iqu, $__iqv); } 1; 
