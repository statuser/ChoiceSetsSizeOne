# ---------------------------------------------------------------------------
#     ENTERLIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package enterlib9_14_2; sub _apm { my ($__ebg) = @_; my $__dzw = 0; my $__dzx = 0; my $__dzy = 0; my $__dzz = ""; my $__eaa = ""; my $__eab = ""; my $__eac = 0; my $__ead = ""; my @__eae = (); my @__eaf = (); my $__eag = 0; my %__eah = (); my %__eai = (); my $__eaj = ""; my $__eak = 1; if (exists $__ebg->{'_jt'}) { my $__eal = $__ebg->{'_jt'}; my $__eam = 0; foreach $__eam (@{$__eal}) { $__eaa = $__eam->{'_if'}; $__eab = ""; if (exists $authlib9_14_2::_ahr{uc($__eaa)}) { $__eab = authlib9_14_2::_zo($authlib9_14_2::_ahr{uc($__eaa)}); $__dzz .= $__eab; $__eai{$__eaa} = $__eab; if ($__eab) { $__eak = 0; } } push @__eae, "`" . $__eaa . "` = " . $authlib9_14_2::_ake->quote($__eab); push @__eaf, [$__eaa, $__eab]; if (exists $__eam->{'_bs'}) { $__eah{$__eaa} = $__eab; } } } my $__ean = 1; if (exists $authlib9_14_2::_akn{"hid_test_mode"} && $__eak && exists $authlib9_14_2::_akn{"hid_test_mode_skipquestion"}) { $__ean = 0; $__dzx = 1; $__dzy = 1; } if ($__ean) { if (@__eae) { $__ead = " WHERE " . join(" AND ", @__eae); } eval { $__eaj = "SELECT * FROM `" . $authlib9_14_2::_akj . "_passwords`" . $__ead; $__eac = $authlib9_14_2::_ake->selectrow_hashref(authlib9_14_2::_wh(authlib9_14_2::_wn($__eaj, 0))); }; if ($@) { if (!exists $__ebg->{'_mm'}) { authlib9_14_2::_zq(226, "Database error.", "Database error reading password table.", $@); } } if ($__eac) { $__dzx = 1; if (keys %__eah) { my $__eao = ""; foreach $__eao (sort keys %__eah) { if (authlib9_14_2::_wi($__eac->{$__eao}) ne $__eah{$__eao}) { $__dzx = 0; last; } } } $__eag = $__eac->{"max_respondents"}; if ($__dzx) { if (exists $__ebg->{'_w'}) { my $__eap = 0; my $__eaq = ""; my $__ear = ""; foreach $__eap (@{$__ebg->{'_w'}}) { $__eaq = $__eap->{'_if'}; $authlib9_14_2::_ahr{uc($__eaq)} = authlib9_14_2::_wi($__eac->{$__eaq}); } } } } if (!$__dzx && exists $__ebg->{'_mm'}) { my $__eaa = ""; my $__eas = 0; my $__eat = $__ebg->{'_mm'}->{'_hx'}; my $__eau = 250; my $__eav = 0; foreach $__eaa (sort keys %__eai) { $__eas = length($__eai{$__eaa}); if (($__eas >= $__eat) && ($__eas <= $__eau)) { $__eav = 1; last; } } if ($__eav) { $__dzx = 1; $__eag = 1; } } if ($__dzx && $__eag > 0) { my $__eaw = 0; if (@__eaf) { my $__eax = 0; my $__eay = 0; my @__eaz = (); my %__eba = (); my $__ebb = ""; $__eba{1} = 1; @__eae = (); $__ead = ""; foreach $__eax (@__eaf) { $__eaa = $__eax->[0]; $__eab = $__eax->[1]; ($__eay, $__ebb) = authlib9_14_2::_xk($__eaa); push @__eae, "`" . $authlib9_14_2::_akj . "_data" . $__eay . "`.`" . $__eaa . "` = " . $authlib9_14_2::_ake->quote($__eab); if ($__eay != 1) { $__eba{$__eay} = 1; push @__eae, "`" . $authlib9_14_2::_akj . "_data1`.`sys_RespNum` = `" . $authlib9_14_2::_akj . "_data" . $__eay . "`.`sys_RespNum`"; } } $__ead = " WHERE " . join(" AND ", @__eae); foreach $__eay (sort {$a <=> $b} keys %__eba) { push @__eaz, "`" . $authlib9_14_2::_akj . "_data" . $__eay . "`"; } eval { $__eaj = "SELECT `" . $authlib9_14_2::_akj . "_data1`.`sys_RespNum`, `" . $authlib9_14_2::_akj . "_data1`.`sys_RespStatus`"; $__eaj .= " FROM " . join(",", @__eaz); $__eaj .= $__ead; $__eaw = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wh(authlib9_14_2::_wn($__eaj, 0))); }; if ($@) { authlib9_14_2::_zq(225, "Database error.", "Database error selecting data rows with certain passwords.", $@); } if ($__eaw) { my $__ebc = @{$__eaw}; my $__ebd = 0; my $__ebe = 0; my $__ebf = 0; foreach $__ebd (@{$__eaw}) { $__ebf = $__ebd->[0]; if ($__ebd->[1] == &authlib9_14_2::_AOH || $__ebd->[1] == &authlib9_14_2::_AOG) { $__ebe++; } } if ($__ebe < $__eag) { $__dzy = 1; } if ($__eag == 1) { $__dzw = $__ebf; } } } } if ($__dzz) { $__dzz = authlib9_14_2::_yp($__dzz, 25); } } return ($__dzx, $__dzy, $__dzw, $__dzz); } sub _apn { my ($__ebs) = @_; my $__ebh = 0; my $__ebi = 0; my $__ebj = 0; my $__ebk = 1; if (exists $ENV{"HTTP_COOKIE"}) { my $__ebl = $ENV{"HTTP_COOKIE"}; my $__ebm = _app($__ebs); if ($__ebl =~ m/$__ebm=(.*?)$/) { my $__ebn = $1; if ($__ebn =~ m/respnum:(\d+)/) { $__ebi = $1; } if ($__ebn =~ m/starttime:(\d+)/) { $__ebj = $1; } } } if ($__ebi && authlib9_14_2::_wx($__ebi)) { $authlib9_14_2::_akn{"hid_respnum"} = $__ebi; if (exists $authlib9_14_2::_aky->{'_ju'}) { my $__ebo = $authlib9_14_2::_aky->{'_ju'}; my $__ebp = 0; my $__ebq = ""; my $__ebr = ""; foreach $__ebp (@{$__ebo->{'_jt'}}) { $__ebq = $__ebp->{'_if'}; if (uc(authlib9_14_2::_ws($__ebq)) ne uc($authlib9_14_2::_akn{$__ebq})) { $__ebk = 0; last; } } } if (authlib9_14_2::_ws("sys_StartTimeStamp") eq $__ebj && $__ebk) { $__ebh = $__ebi; } else { delete $authlib9_14_2::_akn{"hid_respnum"}; } } return $__ebh; } sub _apo { my ($__ebu, $__ebv, $__ebw) = @_; my $__ebt = gmtime($__ebv); if ($__ebt =~ m/(\d+)$/) { $__ebt = $1; } print "Set-Cookie: " . _app($__ebw) . "=respnum:" . $__ebu . "|starttime:" . $__ebv . "; expires=Sat, 01-Jan-" . ($__ebt + 50) . " 00:00:00 GMT; path=/; HttpOnly\n"; } sub _app { my ($__eby) = @_; my $__ebx = authlib9_14_2::_yp($__eby, 50); return $authlib9_14_2::_akh . "_ssi_info_" . $__ebx; } sub _apq { my ($__ecn, $__eco, $__ecp) = @_; my $__ebz = ""; my @__eca = (); my $__ecb = ""; my $__ecc = 0; if (exists $authlib9_14_2::_akp->{'_pr'}) { my $__ecd = authlib9_14_2::_aab(); if ($__ecd) { $__ebz .= $__ecd; push @__eca, ["sys_UserAgent", $__ecd]; } my $__ece = authlib9_14_2::_zz(); if ($__ece) { $__ebz .= $__ece; push @__eca, ["sys_Browser", $__ece]; } my $__ecf = authlib9_14_2::_aaa(); if ($__ecf) { $__ebz .= $__ecf; push @__eca, ["sys_OperatingSystem", $__ecf]; } } if (exists $authlib9_14_2::_akp->{'_gh'}) { my $__ecg = authlib9_14_2::_aac(); if ($__ecg) { $__ebz .= $__ecg; push @__eca, ["sys_IPAddress", $__ecg]; } } my $__ech = _apr($__eco, $__ebz); my $__eci = time(); push @__eca, ["sys_UserJavaScript", $__ecp]; push @__eca, ["sys_StartTimeStamp", $__eci]; push @__eca, ["sys_RespStatus", 2]; push @__eca, ["sys_RespRemoved", 0]; push @__eca, ["sys_CheckSum", $__ech]; push @__eca, ["sys_SumPageTimes", 0]; my $__ecj = $authlib9_14_2::_akm->{"capi_deviceid"}; if ($__ecj) { push @__eca, ["sys_CAPIDeviceID", $__ecj]; } my $__eck = 0; if ($authlib9_14_2::_ajg) { $__eck = &authlib9_14_2::_AON; } elsif (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__eck = &authlib9_14_2::_AOM; } elsif ($__ecj) { $__eck = &authlib9_14_2::_AOJ; } elsif ($authlib9_14_2::_akm->{"local_test_mode"}) { $__eck = &authlib9_14_2::_AOL; } else { $__eck = &authlib9_14_2::_AOI; } push @__eca, ["sys_DataSource", $__eck]; my $__ecl = $authlib9_14_2::_akm->{"num_data_tables"}; my $__ecm = 0; if (exists $ciwlib9_14_2::_tx{'_buc'} && $__ecn) { for ($__ecm = 1; $__ecm <= $__ecl; $__ecm++) { eval { $__ecb = "DELETE FROM `" . $authlib9_14_2::_akj . "_data" . $__ecm . "` WHERE `sys_RespNum` = " . $__ecn; $__ecc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ecb, 0)); $__ecc->execute(); }; if ($@) { authlib9_14_2::_zq(233, "Database error.", "Database error. Cannot delete data row from test database.", $@); } } eval { $__ecb = "DELETE FROM `" . $authlib9_14_2::_akj . "_history` WHERE `sys_RespNum` = " . $__ecn; $__ecc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ecb, 0)); $__ecc->execute(); }; if ($@) { authlib9_14_2::_zq(242, "Database error.", "Database error. Cannot delete history data from test database.", $@); } eval { $__ecb = "DELETE FROM `" . $authlib9_14_2::_akj . "_clists` WHERE `sys_RespNum` = " . $__ecn; $__ecc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ecb, 0)); $__ecc->execute(); }; if ($@) { authlib9_14_2::_zq(281, "Database error.", "Database error. Cannot delete clist data from test database.", $@); } } eval { $__ecb = ""; if ($__ecn) { if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__ecb .= "SET IDENTITY_INSERT `" . $authlib9_14_2::_akj . "_data1` ON \n"; } $__ecb .= "INSERT INTO `" . $authlib9_14_2::_akj . "_data1` (`sys_RespNum`) VALUES (" . $__ecn . ")"; } else { $__ecb .= "INSERT INTO `" . $authlib9_14_2::_akj . "_data1` (`sys_RespStatus`) VALUES (2)"; } $__ecc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ecb, 0)); $__ecc->execute(); if (!$__ecn) { $__ecn = authlib9_14_2::_wr($authlib9_14_2::_akj . "_data1", "sys_RespNum"); } }; if ($@) { authlib9_14_2::_zq(200, "Database error.", "Database error. Cannot create data row.", $@); } if ($__ecl > 1) { for ($__ecm = 2; $__ecm <= $__ecl; $__ecm++) { eval { $__ecb = "INSERT INTO `" . $authlib9_14_2::_akj . "_data" . $__ecm . "` (`sys_RespNum`) VALUES (" . $__ecn . ")"; $__ecc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ecb, 0)); $__ecc->execute(); }; if ($@) { authlib9_14_2::_zq(205, "Database error.", "Database error. Cannot insert data row into data table #" . $__ecm . ".", $@); } } } $authlib9_14_2::_ake->commit(); authlib9_14_2::_xj(\@__eca, $__ecn, 0); return ($__ecn, $__eci); } sub _apr { my ($__ecs, $__ect) = @_; my $__ecq = 0; my $__ecr = time(); $__ecs =~ s/([a-z]|[A-Z]|_)//g; $__ecq = $__ecs; $__ecq .= $__ecr; $__ecq += length($__ect); $__ecr =~ s/\d+?(\d)$/$1/; if ($__ecr > 1) { $__ecq *= $__ecr; } if (length($__ecq) > 9) { $__ecq = $__ecq % 999999999; } $authlib9_14_2::_akn{"hid_checksum"} = $__ecq; return $__ecq; } sub _aps { my ($__ecu, $__ecv) = @_; print ciwlib9_14_2::_sa(0, 0, $__ecu, 0, "", "", 0); if ($__ecv) { print scalar reverse(">vid/<.dehcaer neeb sah timil drocer atad edom omed ehT>';retnec :ngila-txet ;xp05 :nigram'=elyts vid<"); } elsif ($authlib9_14_2::_akm->{"close_survey_msg"}) { print $authlib9_14_2::_akm->{"close_survey_msg"}; } print ciwlib9_14_2::_sf(0, 0); authlib9_14_2::_act(); } return 1;
