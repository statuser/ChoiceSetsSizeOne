# ---------------------------------------------------------------------------
#     CIWLIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package ciwlib9_14_2; $ciwlib9_14_2::_uc = 0; $ciwlib9_14_2::_ub = 0; $ciwlib9_14_2::_tz = ""; %ciwlib9_14_2::_tx = (); sub _ql { $ciwlib9_14_2::_uc = 0; $ciwlib9_14_2::_ub = 0; $ciwlib9_14_2::_tz = ""; %ciwlib9_14_2::_tx = (); } sub _qm { my ($__dq, $__dr) = @_; my $__do = ""; my $__dp = "ciwweb" . $authlib9_14_2::_aib; if (exists $ENV{'QUERY_STRING'}) { $__do = $ENV{'QUERY_STRING'}; $__do =~ s/"/%22/g; $__do =~ s/'/%27/g; $__do =~ s/</%3C/g; $__do =~ s/>/%3E/g; } if ($__dq == 0 && $__do !~ m/studyname/i) { $__do .= "hid_studyname=" . htmlentity::encode($__dr); } if ($authlib9_14_2::_amg) { if ($__do !~ m/hid_preview/i) { $__do .= "&hid_preview=" . $authlib9_14_2::_amg; } } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { if ($__do !~ m/hid_test_mode/i) { $__do .= "&hid_test_mode=" . $authlib9_14_2::_akn{"hid_test_mode"}; } } $__dp .= "?" . $__do . "&hid_pagenum=" . $__dq . "&hid_link=1"; print authlib9_14_2::_zb(); print "<html><head>\n"; print "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"; print authlib9_14_2::_aeb(); print "<script type=\"text/javascript\">\n\n"; print "var supported_browser = false;\n"; print "var width = 0;\n"; print "if (Modernizr.flexbox) {\n"; print "supported_browser = true;\n"; print "width = window.innerWidth;\n"; print "}\n"; print "var url = \"" . $__dp . "&hid_javascript=1&hid_screenwidth=\" + width;\n"; print "if (!supported_browser) {\n"; print "url += \"&unsupported_browser=1\";\n"; print "}\n"; print "location.replace(url);"; print "\n\nfor (var i = 0; i < 10000; i++){}\n\n"; print "</script>\n</head><body>\n"; print "<meta http-equiv=\"refresh\" CONTENT=\"1;URL=" . $__dp . "&hid_javascript=0\">"; print "</body></html>"; authlib9_14_2::_act(); } sub _qn { my ($__du, $__dv, $__dw, $__dx, $__dy, $__dz) = @_; my $__ds = 0; if (@{$__dv} && !$__dz) { $__dx = authlib9_14_2::_yr($__dv, $__dw); } if ($__dx eq "") { if (@{$__du}) { $__dx = ciwlib9_14_2::_sr($__du); if (exists($ciwlib9_14_2::_tx{'remove_skip'})) { $__dx = ""; } if ($__dx eq "") { $__dy++; } else { my $__dt = 0; ($__dx, $__dy, $__ds, $__dt) = _qo($__dx, $__dy); } } else { $__dy++; } } return ($__dx, $__dy, $__ds); } sub _qo { my ($__ei, $__ej) = @_; my %__ea = (); my $__eb = 0; my $__ec = $__ej; my $__ed = 0; if ($__ei eq &authlib9_14_2::_ANE) { $__ei = ""; } elsif ($__ei == &authlib9_14_2::_AND) { _qv(); my $__ee = $authlib9_14_2::_ako->[$__ej - 1]; my $__ef = $__ee->{'_ba'}; my $__eg = $authlib9_14_2::_ajs->{$__ef->{'_nj'}}->{'_bb'}->[$__ef->{'_fz'} - 1]; $__ej = $__eg->[1] + 1; $__ei = ""; if (exists $__ee->{'_hm'}) { foreach my $__eh (@{$__ee->{'_hm'}}) { if (_qp($__ee, $__eh)) { $__ea{$__eh} = 1; } } } } elsif ($__ei == &authlib9_14_2::_ANC) { ($__ej, $__eb) = ciwlib9_14_2::_qx($__ej, $__ej, 1, 0, \%__ea, 0); } elsif ($__ei == &authlib9_14_2::_ANB) { ($__ej, $__eb) = ciwlib9_14_2::_qx($__ej, $__ej, 0, 1, \%__ea, 0); } if ($__ec != $__ej) { $__ed = 1; } return ($__ei, $__ej, \%__ea, $__ed); } sub _qp { my ($__eu, $__ev) = @_; my $__ek = 0; if (exists $__eu->{'_ba'}) { my $__el = $__eu->{'_ba'}->{'_nj'}; my $__em = $__eu->{'_ba'}->{'_fz'}; _qv(); my $__en = _qw($__el); my $__eo = $__en->[$__em - 1]; my $__ep = $__eo->[0]; my $__eq = $__eo->[1]; authlib9_14_2::_adr(); if (exists $authlib9_14_2::_ame->{$__ev}) { my $__er = $authlib9_14_2::_ame->{$__ev}->{'_v'}; my $__es = $__er->[0]; my $__et = $__er->[1]; if (($__ep <= $__es) && ($__eq >= $__et)) { $__ek = 1; } } } return $__ek; } sub _qq { my ($__fa, $__fb) = @_; my $__ew = 0; authlib9_14_2::_adr(); if (exists $authlib9_14_2::_ame->{$__fb}) { my $__ex = $authlib9_14_2::_ame->{$__fb}->{'_v'}; my $__ey = $__ex->[0]; my $__ez = $__ex->[1]; if (($__ey == $__ez) && ($__ey == $__fa)) { $__ew = 1; } } return $__ew; } sub _qr { my ($__fo, $__fp) = @_; my $__fc = 0; my $__fd = $authlib9_14_2::_ako->[$__fo - 1]; my $__fe = $authlib9_14_2::_ako->[$__fp - 1]; if (exists $__fe->{'_ba'}) { my $__ff = $__fe->{'_ba'}->{'_nj'}; my $__fg = $__fe->{'_ba'}->{'_fz'}; _qv(); my $__fh = $authlib9_14_2::_ajs->{$__ff}->{'_bb'}->[$__fg - 1]; my $__fi = $__fh->[0]; my $__fj = $__fh->[1]; if ($__fo < $__fi || $__fo > $__fj) { if (exists $__fe->{'_hm'}) { my $__fk = ciwlib9_14_2::_qz($authlib9_14_2::_akn{"hid_loops"}); my $__fl = $__fe->{'_hm'}; my $__fm = 0; foreach my $__fn (@{$__fl}) { if (exists $__fk->{$__fn}) { if (_qp($__fe, $__fn)) { $__fm = 1; last; } } } if (!$__fm) { $__fc = 1; } } } } return $__fc; } sub _qs { my ($__fw, $__fx) = @_; my $__fq = 0; if (exists $__fw->{'_hm'}) { my $__fr = 0; foreach my $__fs (@{$__fw->{'_hm'}}) { if ($__fx eq $__fs) { $__fr = 1; last; } } if ($__fr) { authlib9_14_2::_adr(); my $__ft = $authlib9_14_2::_ame->{$__fx}->{'_v'}; my $__fu = $__ft->[0]; my $__fv = $__ft->[1]; if ($__fu == $__fv) { $__fq = 1; } } } return $__fq; } sub _qt { my ($__go, $__gp, $__gq, $__gr) = @_; _qv(); my $__fy = 0; my $__fz = 0; my $__ga = 0; my $__gb = 0; my $__fz = 0; my $__gc = 0; my $__gd = 1; if ($__gq) { if ($__gq == &authlib9_14_2::_ANB || $__gq == &authlib9_14_2::_ANC) { $__gq = ""; $__gc = 1; } elsif (exists($authlib9_14_2::_ahp{$__gq})) { my $__ge = $authlib9_14_2::_ahp{$__gq}; my $__gf = $__ge->{'_ji'}; my $__gg = $authlib9_14_2::_ako->[$__gf - 1]; $__fy = $authlib9_14_2::_ako->[$__gp - 1]; if (exists $__fy->{'_ba'} && exists $__gg->{'_ba'}) { if ($__fy->{'_ba'}->{'_nj'} == $__gg->{'_ba'}->{'_nj'}) { return ($__go, $__gq); } else { my $__gh = _qw($__gg->{'_ba'}->{'_nj'}); if ($__gh->[0]->[0] == $__gf) { $__gq = ""; } $__gp = $__go; $__go = $__gf; $__gd = 0; } } elsif (exists $__gg->{'_ba'}) { my $__gh = _qw($__gg->{'_ba'}->{'_nj'}); if ($__gh->[0]->[0] == $__gf) { $__gq = ""; } $__gp = $__go; $__go = $__gf; $__gd = 0; } else { return ($__go, $__gq); } } else { authlib9_14_2::_zq(108, "", "Attempted to skip to a question that does not exist.", ""); } } $__fy = $authlib9_14_2::_ako->[$__gp - 1] if ($__gp != 0); if ($__gc && $__fy) { if (exists $__fy->{'_hm'}) { if (!_qp($__fy, $__fy->{'_hm'}->[0])) { $__gd = 0; } } } if ($__fy && exists $__fy->{'_ba'} && $__gd) { my $__gi = $__fy->{'_ba'}; my @__gj = @{_qw($__gi->{'_nj'})}; my $__gk = $__gj[$__gi->{'_fz'} - 1]; if ($__go < $__gk->[0] || $__go > $__gk->[1]) { my @__gl = @{_rf($__gr, $__gp)}; if (@__gl > 0) { for (my $__gm = 0; $__gm < @__gl; $__gm++) { my $__gn = $__gj[$__gl[$__gm] - 1]; if ($__gn->[0] <= $__gp && $__gn->[1] >= $__gp) { $__ga = $__gm; $__gb = $__gi->{'_nj'}; $__fz = 1; last; } } } } } else { $__fz = 1; } if ($__fz) { $__go = _qu($__ga, $__gb, $__go, $__gr); } return ($__go, $__gq); } sub _qu { my ($__he, $__hf, $__hg, $__hh) = @_; my $__gs = $authlib9_14_2::_ako->[$__hg - 1]; my $__gt = 0; my @__gu = (); my $__gv = 0; my @__gw = (); my $__gx = ""; if ($__hf) { @__gw = @{_qw($__hf)}; my @__gy = sort { $a->[0] <=> $b->[0] } @__gw; my $__gz = $__gy[$__he]->[1] + 1; my $__ha = $authlib9_14_2::_ako->[$__gz - 1]; if (exists $__ha->{'_ba'}) { if ($__ha->{'_ba'}->{'_nj'} == $__hf) { my $__hb = $__gw[$__he]->[1]; @__gu = @{_rf($__hh, $__hb)}; if (@__gu < @__gw && $__he >= @__gu - 1) { return _qu(0, 0, $__gz, $__hh); } elsif ($__he > @__gu - 1) { return _qu(0, 0, $__gz, $__hh); } else { $__gv = $__gw[$__gu[$__he + 1] - 1]; return $__gv->[0]; } } else { return _qu(0, 0, $__gz, $__hh); } } else { return $__gz; } } if (exists $__gs->{'_ba'}) { $__gt = $__gs->{'_ba'}; $__gx = "sys_block_set_" . $__gt->{'_nj'}; if (exists $__gs->{'_hm'}) { my $__hc = _rc($__gs); $__gx .= $__hc; } @__gw = @{_qw($__gt->{'_nj'})}; @__gu = @{_rf($__hh, $__hg)}; my $__hd = 0; my @__gy = sort { $a->[0] <=> $b->[0] } @__gw; $__hd++ until ($__gy[$__hd]->[0] <= $__hg && $__hg <= $__gy[$__hd]->[1]); if (@__gu == 0) { return _qu(0, 0, $__gy[$__hd]->[1] + 1, $__hh); } if ($__hd >= @__gu) { return _qu(0, 0, $__gy[$__hd]->[1] + 1, $__hh); } else { $__gv = $__gw[$__gu[$__hd] - 1]; $__hg = $__gv->[0]; } } return $__hg; } sub _qv { if (!$authlib9_14_2::_ajs) { if ($authlib9_14_2::_aij) { seek $authlib9_14_2::_ajm, $authlib9_14_2::_aij, 0; $authlib9_14_2::_ajs = authlib9_14_2::_zi(0); } } } sub _qw { my ($__hj) = @_; my @__hi = grep { $_->[0] != -1 } @{$authlib9_14_2::_ajs->{$__hj}->{'_bb'}}; return \@__hi; } sub _qx { my ($__ic, $__id, $__ie, $__if, $__ig, $__ih) = @_; my $__hk = $authlib9_14_2::_ako->[$__id - 1]; my $__hl = $authlib9_14_2::_ako->[$__ic - 1]; my %__hm = (); if (exists $__hk->{'_hm'} || exists $__hl->{'_hm'}) { authlib9_14_2::_adr(); if (exists $authlib9_14_2::_akn{"hid_loops"}) { my $__hn = _qz($authlib9_14_2::_akn{"hid_loops"}); my $__ho = authlib9_14_2::_acv($__hn); my %__hp = (); my $__hq = 0; my $__hr = 0; my $__hs = 0; my $__ht = 0; my @__hu = (); if (exists $__hl->{'_hm'}) { my $__hv = $__hl->{'_hm'}; %__hp = map { $_ => 1 } @{$__hv}; } foreach my $__hw (@{$__hk->{'_hm'}}) { if ($__ig && exists $__ig->{$__hw}) { next; } elsif ((not exists $__hp{$__hw}) || $__ie || $__if) { $__ht = 1; $__hq = $__hn->{$__hw}; $__hr = $authlib9_14_2::_ame->{$__hw}; $__hs = authlib9_14_2::_aae($__hr->{'_hj'}); push @__hu, $__hr->{'_hj'}; if (($__hq < $__hs) && !$__if) { $__ic = $__hr->{'_v'}->[0]; $__hn->{$__hw}++; $__hm{$__hw} = 1; last; } else { delete $__hn->{$__hw}; if ($__ie || $__if) { $__ic = $__hr->{'_v'}->[1] + 1; last; } } } } if (!$__ih) { $authlib9_14_2::_akn{"hid_loops"} = _ra($__hn); if ($__ht) { my $__hx = @{$__hk->{'_hm'}}; my ($__ii, $__ij) = ciwlib9_14_2::_rb($__hk, $__ho, ""); if ($__hx) { my @__hy = grep(/\Q$__ii\E$/, keys %{$authlib9_14_2::_akg}); my $__hz = ""; foreach my $__ia (@__hy) { if ($__ia =~ m/(.*?)\./) { $__hz = $1; delete $authlib9_14_2::_akg->{$__hz}; delete $authlib9_14_2::_akn{$__hz}; delete $authlib9_14_2::_ain->{$__hz}; } } } my $__ib = ""; foreach $__ib (@__hu) { delete $authlib9_14_2::_akg->{$__ib}; delete $authlib9_14_2::_ain->{$__ib}; } } } } } return ($__ic, \%__hm); } sub _qy { my ($__iq, $__ir, $__is) = @_; my $__ik = 0; my $__il = 0; my $__im = 0; my $__in = 0; ($__iq, $__in) = _qx($__iq, $__ir, 0, 0, $__is, 1); if (keys %{$__in}) { $__ik = 1; } if ($__ik) { my $__io = $authlib9_14_2::_ako->[$__ir - 1]; my $__ip = ""; if (exists $__io->{'_ba'}) { foreach $__ip (keys %{$__in}) { if (_qp($__io, $__ip)) { $__il = 1; last; } } } foreach $__ip (keys %{$__in}) { if (_qq($__ir, $__ip)) { $__im = 1; last; } } } return ($__il, $__im, $__ik); } sub _qz { my ($__iw) = @_; my @__it = split(";", $__iw); my %__iu = (); foreach my $__iv(@__it) { if ($__iv =~ m/(.*?),(\d+)/o) { $__iu{$1} = $2; } } return \%__iu; } sub _ra { my ($__iz) = @_; my $__ix = ""; foreach my $__iy (sort keys %{$__iz}) { $__ix .= $__iy . "," . $__iz->{$__iy} . ";"; } if ($__ix) { chop($__ix); } return $__ix; } sub _rb { my ($__jj, $__jk, $__jl) = @_; my $__ja = ""; my $__jb = 0; authlib9_14_2::_adr(); if (exists $__jj->{'_hm'}) { my @__jc = (); my $__jd = 0; my $__je = 0; my $__jf = 0; my $__jg = ""; my $__jh = 0; if ($__jl) { foreach my $__ji (@{$__jj->{'_hm'}}) { $__jg = $authlib9_14_2::_ame->{$__ji}->{'_hj'}; if ($__jg eq $__jl) { $__jh = 1; last; } } } foreach my $__ji (@{$__jj->{'_hm'}}) { if (exists $__jk->{$__ji}) { $__jb = 1; $__jg = $authlib9_14_2::_ame->{$__ji}->{'_hj'}; if ($__jh) { if ($__jg eq $__jl) { $__jh = 0; } next; } else { $__je = authlib9_14_2::_acy($__jg); if ($__je == 0) { next; } $__jd = $__jk->{$__ji}; if ($__jd) { unshift @__jc, $__je->[$__jd - 1]->{'_pt'}; } else { authlib9_14_2::_zq(250, "Loop Error.", "Loop index out of range.", $@); } } } } if (@__jc && !$__jf) { $__ja = "." . join(".", @__jc); } } return ($__ja, $__jb); } sub _rc { my ($__jq) = @_; my $__jm = {}; my $__jn = {}; if (exists $authlib9_14_2::_akn{"hid_loops"}) { $__jn = ciwlib9_14_2::_qz($authlib9_14_2::_akn{"hid_loops"}); } if (exists $__jq->{'_hm'}) { my $__jo = 1; foreach my $__jp (@{$__jq->{'_hm'}}) { if (!_qp($__jq, $__jp)) { if (exists $__jn->{$__jp}) { $__jo = $__jn->{$__jp}; } $__jm->{$__jp} = $__jo; } } } my ($__jr, $__js) = _rb($__jq, $__jm, ""); return $__jr; } sub _rd { my ($__jw) = @_; my $__jt = {}; if (exists $authlib9_14_2::_akn{"hid_loops"}) { $__jt = ciwlib9_14_2::_qz($authlib9_14_2::_akn{"hid_loops"}); } if (exists $__jw->{'_hm'}) { my $__ju = 1; foreach my $__jv (@{$__jw->{'_hm'}}) { if (_qs($__jw, $__jv)) { delete $__jt->{$__jv}; } } } my ($__jx, $__jy) = _rb($__jw, $__jt, ""); return $__jx; } sub _re { my ($__kk, $__kl, $__km, $__kn, $__ko) = @_; my $__jz = 0; my $__ka = 0; if ($__ko) { if (exists($authlib9_14_2::_ahp{$__ko})) { $__jz = 1; my $__kb = $authlib9_14_2::_ahp{$__ko}; $__kk = $__kb->{'_ji'}; } } my $__kc = $authlib9_14_2::_ako->[$__kk - 1]; if (exists $__kc->{'_jn'} || exists $authlib9_14_2::_akn{"hid_page_rand"}) { if ($__jz && exists $authlib9_14_2::_akn{"hid_page_rand"}) { my $__kd = $authlib9_14_2::_akn{"hid_page_rand"}; if ($__kd =~ m/(\d+)/) { my $__ke = $1; my $__kf = $__kc->{'_jn'}->[0]; my $__kg = $__kc->{'_jn'}->[1]; if ((($__ke < $__kf) || ($__ke > $__kg)) && ($__kd != ($__kg + 1))) { delete $authlib9_14_2::_akn{"hid_page_rand"}; } } } if (!exists $authlib9_14_2::_akn{"hid_page_rand"} && exists $__kc->{'_jn'}) { if (!exists($ciwlib9_14_2::_tx{'remove_rand'})) { if (_rg($__kc->{'_jn'}, $__kl) == 1) { my $__kh = $__kc->{'_jn'}->[0]; my $__ki = $authlib9_14_2::_akn{"hid_page_rand"}; $__ki =~ s/,\d+$//; my $__kj = authlib9_14_2::_ws("sys_randpages_" . $__kh); if ($__kj eq "" || $__kj ne $__ki) { authlib9_14_2::_wt("sys_randpages_" . $__kh, $__ki); $authlib9_14_2::_ajn{"hid_SaveRandPages"} = $__kh; $authlib9_14_2::_ajn{"hid_RandPage_" . $__kh} = $__ki; } } } } if (exists $authlib9_14_2::_akn{"hid_page_rand"}) { if ($authlib9_14_2::_akn{"hid_page_rand"} =~ m/^(\d+),(.*?)$/) { $__kk = $1; $authlib9_14_2::_akn{"hid_page_rand"} = $2; } elsif ($authlib9_14_2::_akn{"hid_page_rand"} =~ m/^(\d+)$/) { $__kk = $1; delete $authlib9_14_2::_akn{"hid_page_rand"}; $__ka = 1; } $__ko = ""; } } return ($__kk, $__kn, $__ko, $__ka); } sub _rf { my ($__lf, $__lg) = @_; my $__kp = $authlib9_14_2::_ako->[$__lg - 1]; if (not exists $__kp->{'_ba'}) { return 0; } _qv(); my $__kq = $authlib9_14_2::_ajs->{$__kp->{'_ba'}->{'_nj'}}; my $__kr = "sys_block_set_" . $__kp->{'_ba'}->{'_nj'}; my @__ks = (); if (exists $__kp->{'_hm'}) { $__kr .= _rc($__kp); } my $__kt = authlib9_14_2::_ws($__kr); if ($__kt) { @__ks = split(",", $__kt); return \@__ks; } elsif ($authlib9_14_2::_ajr) { $__kt = $authlib9_14_2::_akn{"hid_BlockSeq_" . $__kp->{'_ba'}->{'_nj'}}; if ($__kt) { @__ks = split(",", $__kt); return \@__ks; } } my @__ku = @{$__kq->{'_bb'}}; @__ku = grep{$_->[0] != -1} @__ku; my $__kv = @__ku; my $__kw = []; if (exists $__kq->{'_lo'}) { $__kw = authlib9_14_2::_acn($__lf, $__kv, $__ku[0]->[1] * 67); } else { $__kw = authlib9_14_2::_acy($__kq->{'_hj'}); if ($__kw) { my @__kx = (); foreach my $__ky (@{$__kw}) { push (@__kx, $__ky->{'_pt'} - 1); } $__kw = \@__kx; } else { $__kw = []; } } my $__kz = 0; my $__la = 0; my $__lb = ""; for (my $__lc = 0; $__lc < @{$__kw}; $__lc++) { $__kz = $__kw->[$__lc]; next if ($__kz >= $__kv); my $__ld = join(",", @{$__ku[$__kz]}); $__lb .= "[" . $__ld . "]|"; push(@__ks, ($__kz + 1)); $__la++; last if ($__la == $__kv); } chop($__lb); my $__le = join(",", @__ks); $authlib9_14_2::_ajn{"hid_BlockSeq_" . $__kp->{'_ba'}->{'_nj'}} = $__le; if ($authlib9_14_2::_ajg) { $authlib9_14_2::_ajn{"hid_BlockPages_" . $__kp->{'_ba'}->{'_nj'}} = $__lb; } authlib9_14_2::_wt($__kr, $__le); return \@__ks; } sub _rg { my ($__ll, $__lm) = @_; my $__lh = $__ll->[0]; my $__li = $__ll->[1]; if ($__li > $__lh) { my $__lj = ($__li - $__lh) + 1; my $__lk = authlib9_14_2::_acn($__lm, $__lj, $__lh * 103); $authlib9_14_2::_akn{"hid_page_rand"} = join(",", map{$_ + $__lh} @{$__lk}) . "," . ($__li + 1); return 1; } else { return 0; } } sub _rh { my ($__lz) = @_; my $__ln = delete $authlib9_14_2::_akn{'sys_autocompletes'}; my %__lo = (); delete $authlib9_14_2::_akn{'hid_pagetime'}; delete $authlib9_14_2::_akn{'hid_SavedListNames'}; my @__lp = grep(/hid_(?>BlockSeq|RandPage)_/, keys %authlib9_14_2::_akn); foreach my $__lq (@__lp) { delete $authlib9_14_2::_akn{$__lq}; } foreach my $__lr (grep(/hid_(?>prev|q|list)_/, keys %authlib9_14_2::_akn)) { delete $authlib9_14_2::_akn{$__lr}; } foreach my $__ls (@{$__ln}) { $authlib9_14_2::_akn{'hid_q_' . $__ls->{'_ud'}} = $__ls->{'_ud'}; my $__lt = $__ls->{'_ue'}; foreach my $__ln (@{$__lt}) { $authlib9_14_2::_akn{$__ln->[0]} = $__ln->[1]; } my $__lu = $authlib9_14_2::_ahp{$__ls->{'_ud'}}; if ($__lu->{'_pj'} == &authlib9_14_2::_ANS) { my $__lv = $__lu->{'_uf'}->{'_aqe'}; my $__lw = $__lu->{'_uf'}->{'_aqf'}; $authlib9_14_2::_akn{'hid_row_list_' . $__ls->{'_ud'}} = join(",", map{$_->{'_pt'}} @{$__lv}); $authlib9_14_2::_akn{'hid_col_list_' . $__ls->{'_ud'}} = join(",", map{$_->{'_pt'}} @{$__lw}); } else { my $__lx = $__lu->{'_uf'}->{'_vu'}; $authlib9_14_2::_akn{'hid_list_' . $__ls->{'_ud'}} = join(",", map{$_->{'_pt'}} @{$__lx}); } $__lo{$__lu->{'_ji'}} = 1; } if (keys %authlib9_14_2::_ait) { while (my ($__ma, $__mb) = each %authlib9_14_2::_ait) { $authlib9_14_2::_akn{'hid_SavedListNames'} .= $__ma . ","; $authlib9_14_2::_akn{$__ma} = $__mb; $authlib9_14_2::_akn{'hid_list_' . $__ma} = $__mb; authlib9_14_2::_wt($__ma, $__mb); } %authlib9_14_2::_ait = (); chop ($authlib9_14_2::_akn{'hid_SavedListNames'}); } @__lp = grep(/hid_(?>BlockSeq|RandPage)_/, keys %authlib9_14_2::_ajn); foreach my $__lq (@__lp) { $authlib9_14_2::_akn{$__lq} = delete $authlib9_14_2::_ajn{$__lq}; } my @__ly = sort {$a <=> $b} keys %__lo; if (@__ly == 0) { @__ly = ($__lz); } return \@__ly; } sub _ri { my ($__mh, $__mi, $__mj, $__mk, $__ml) = @_; my $__mc = ""; my $__md = ""; my $__me = 0; my $__mf = 0; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__mc .= ciwlib9_14_2::_td($__mh, 0, 1); } if (exists $__mi->{'_ic'}) { $__me = 1; } if ($__mk && $__me == 0) { $__mf = 1; } if ($__mf) { $__mc .= "<table class=\"other_specify_table\"><tr><td>\n"; } my $__mg = $__mh; $__mg =~ s/_other$//; if ($__mk) { $__mc .= "<label for=\"" . $__mg . "\" id=\"" . $__mg . "_label\">" . $__mk . "</label>"; } if ($__mf) { $__mc .= "</td><td>"; } if ($__me) { $__mc .= "<br><textarea wrap=\"virtual\""; } else { $__mc .= "<input type=\"text\" class=\"open_end_text_box text_input\""; } $__mc .= " name=\"" . $__mh . "\" maxlength=\"" . $__mi->{'_ho'} . "\" id=\"" . $__mh . "\" aria-labelledby=\"" . $__mg . "_label\""; if (exists $__mi->{'_px'} || exists $__mi->{'_fq'}) { $__mc .= " style=\""; if (exists $__mi->{'_px'}) { $__mc .= " width: " . $__mi->{'_px'} . "px;"; } if (exists $__mi->{'_fq'}) { $__mc .= " height: " . $__mi->{'_fq'} . "px;"; } $__mc .= "\""; } if (exists $__mj->{'_ug'}) { $__md = $__mj->{'_ug'}->{$__mh}; $__md =~ s/"/&quot;/g; $__md =~ s/\r\n/\n/g; } if ($__ml) { $__mc .= " data-card_num=\"$__ml\""; } if ($__me) { $__mc .= ">"; if ($__md) { $__mc .= $__md; } $__mc .= "</textarea>"; } else { if ($__md) { $__mc .= " value=\"" . $__md . "\""; } $__mc .= ">"; } if ($__mf) { $__mc .= "</td></tr></table>\n"; } $__mc .= "<input type=\"hidden\" name=\"hid_" . $__mh . "\" value=\"" . $__mi->{'_hx'} . "," . $__mi->{'_ho'} . "," . ciwlib9_14_2::_ta($__mi->{'_ek'}) . "\">"; return $__mc; } sub _rj { my $__mm = 0; my $__mn = $authlib9_14_2::_akn{"hid_pagenum"}; if ($__mn > 1 || exists $authlib9_14_2::_akn{"hid_respnum"}) { if (exists $authlib9_14_2::_akn{"hid_respnum"}) { $__mm = $authlib9_14_2::_akn{"hid_respnum"}; } else { $__mm = authlib9_14_2::_acr("hid_respnum"); if ($__mm == 0) { authlib9_14_2::_zq(109, "", "Respondent number is empty.", ""); } } my $__mo = ""; if ($__mm =~ m/(.*?),(.*?)$/) { $__mm = $1; $__mo = $2; } elsif (exists $authlib9_14_2::_akn{"hid_checksum"}) { $__mo = $authlib9_14_2::_akn{"hid_checksum"}; } if ($__mm == 0) { authlib9_14_2::_zq(110, "Input error.", "Respondent number is empty.", ""); } if ($__mo eq "" && $authlib9_14_2::_akn{"hid_pagenum"} > 1 && !$authlib9_14_2::_amg) { authlib9_14_2::_zq(111, "Input error.", "Checksum is empty.", ""); } if ($__mm) { $authlib9_14_2::_akn{"hid_respnum"} = $__mm; } if ($__mo) { $authlib9_14_2::_akn{"hid_checksum"} = $__mo; } } return $__mm; } sub _rk { my ($__qh, $__qi) = @_; my ($__pt, $__qj, $__qk, $__ql, $__qm) = (0) x 5; my ($__qn,$__qo,$__qp,$__qq) = (0) x 4; my $__mp = 0; my ($__qr, $__qs, $__qt) = (0) x 3; my $__mq = 0; my $__mr = 0; my $__ms = 0; my $__mt = ""; my $__mu = ""; my @__mv = (); my @__mw = (); my $__mx = 0; my $__my = 0; my @__mz = (); my @__na = (); my @__nb = (); my @__nc = (); if ($__qh == 1) { authlib9_14_2::_yo(); if (exists $authlib9_14_2::_aky->{'_ju'} && !$__qi) { my $__nd = $authlib9_14_2::_aky->{'_ju'}; my $__ne = $__nd->{'_jt'}; my $__nf = 0; my $__ng = ""; my $__nh = ""; foreach $__nf (@{$__ne}) { $__ng = $__nf->{'_if'}; $__nh = ""; if (exists $authlib9_14_2::_ahr{uc($__ng)}) { $__nh = $authlib9_14_2::_ahr{uc($__ng)}; $__nh = authlib9_14_2::_zo($__nh); push @__na, [$__ng, $__nh]; delete $authlib9_14_2::_ahr{uc($__ng)}; } } if (exists $__nd->{'_w'}) { my @__ni = @{$__nd->{'_w'}}; my $__nj = 0; my $__nk = ""; my $__nl = ""; foreach $__nj (@__ni) { $__nk = $__nj->{'_if'}; $__nl = ""; if (exists $authlib9_14_2::_ahr{uc($__nk)}) { $__nl = $authlib9_14_2::_ahr{uc($__nk)}; $__nl = authlib9_14_2::_zo($__nl); push @__na, [$__nk, $__nl]; delete $authlib9_14_2::_ahr{uc($__nk)}; } } } } if (exists $authlib9_14_2::_aky->{'_jr'}) { my $__nm = $authlib9_14_2::_aky->{'_jr'}; my $__nn = 0; my $__no = ""; my $__np = ""; foreach $__nn (@{$__nm}) { $__no = $__nn->{'_if'}; $__np = authlib9_14_2::_ws($__no); if ($__qi && $__np) { if (&authlib9_14_2::_ANA == 0) { next; } } if (exists $authlib9_14_2::_ahr{uc($__no)}) { $__np = $authlib9_14_2::_ahr{uc($__no)}; $__np = authlib9_14_2::_zo($__np); if ($__nn->{'_pj'} eq "numeric") { if ($__np) { $__np = authlib9_14_2::_abm($__np); if (authlib9_14_2::_adu($__np) == 0) { authlib9_14_2::_zq(372, "Invalid Link Variable Data.", "Invalid Link Variable Data. '$__no' was defined as a number but text was passed in. The value recieved was $__np."); } } } push @__na, [$__no, $__np]; delete $authlib9_14_2::_ahr{uc($__no)}; } } } if (exists $authlib9_14_2::_akn{"hid_link"} && !$__qi) { my $__nq = ""; foreach $__nq (keys %authlib9_14_2::_ahr) { if (($__nq !~ m/^(sys|hid)_/i) && ($__nq !~ m/^studyname$/i)) { authlib9_14_2::_acg(&authlib9_14_2::_AOU, 0, "There is extra information being passed into the survey through the URL (" . $__nq . "). If you have questions on the 1st page and you are trying to pass in data please use the \"Link Variables\" feature of the software."); } } } } $__qo = $authlib9_14_2::_akn{"hid_respnum"}; $__mq = $authlib9_14_2::_ako->[$__qh - 1]; $__mr = $__mq->{'_ld'}; $__qs = @{$__mr}; for ($__pt = 0; $__pt < $__qs; $__pt++) { $__qk = $__pt; $__ms = $__mr->[$__qk]; $__ql = $__ms->{'_pj'}; $__qm = $__ms->{'_iz'}; $__qn = $__ms->{'_if'}; if ($__ql == &authlib9_14_2::_ANL || $__ql == &authlib9_14_2::_ANM) { my $__nr = authlib9_14_2::_za($__qn, 1); if (exists $__nr->{'_ls'}) { my $__ns = 0; my $__nt = 0; my $__nu = 0; ($__qn, $__ns, $__nt, $__nu) = acalib9_14_2::_arl($__nr, $__qn, $__ql, 0); } $acalib9_14_2::_aso = {}; } if (exists $authlib9_14_2::_akn{"hid_q_" . $__qn} || ($__qh == 1)) { if (exists $__ms->{'_jz'}) { push @__nb, $__ms->{'_jz'}; } if ($__ql != &authlib9_14_2::_ANJ && $__ql != &authlib9_14_2::_ANK) { if ($__ql == &authlib9_14_2::_ANH) { if ((exists $authlib9_14_2::_akn{$__qn}) && (defined $authlib9_14_2::_akn{$__qn})) { $__qq = $authlib9_14_2::_akn{$__qn}; $__qq = authlib9_14_2::_abm($__qq); push @__na, [$__qn, $__qq]; } } elsif ($__ql == &authlib9_14_2::_ANI) { if ((exists $authlib9_14_2::_akn{$__qn}) && (defined $authlib9_14_2::_akn{$__qn})) { $__qq = $authlib9_14_2::_akn{$__qn}; push @__na, [$__qn, $__qq]; } } elsif ($__ql == &authlib9_14_2::_ANF) { my $__nv = $__qn; $__nv =~ s/_(.*?)$//; my $__nw = "sys_CVADesignID_" . $__nv; seek $authlib9_14_2::_ajm, $__qm, 0; my $__nx = authlib9_14_2::_zi(0); if ((exists $authlib9_14_2::_akn{$__nw}) && (defined $authlib9_14_2::_akn{$__nw})) { $__qq = $authlib9_14_2::_akn{$__nw}; push @__na, [$__nw, $__qq]; delete $authlib9_14_2::_akn{$__nw}; } my $__ny = "sys_CVAVersion_" . $__nv; if ((exists $authlib9_14_2::_akn{$__ny}) && (defined $authlib9_14_2::_akn{$__ny})) { $__qq = $authlib9_14_2::_akn{$__ny}; push @__na, [$__ny, $__qq]; delete $authlib9_14_2::_akn{$__ny}; } my $__nz = "sys_CVADesignError_" . $__nv; if ((exists $authlib9_14_2::_akn{$__nz}) && (defined $authlib9_14_2::_akn{$__nz})) { $__qq = $authlib9_14_2::_akn{$__nz}; push @__na, [$__nz, $__qq]; delete $authlib9_14_2::_akn{$__nz}; } if ((exists $authlib9_14_2::_akn{$__qn}) && (defined $authlib9_14_2::_akn{$__qn})) { push @__na, [$__qn, $authlib9_14_2::_akn{$__qn}]; } } elsif ($__ql == &authlib9_14_2::_ANG) { seek $authlib9_14_2::_ajm, $__qm, 0; my $__oa = authlib9_14_2::_zi(0); if ($__oa->{'_pj'} eq "check") { $__my = 0; @__mz = (); $__qp = "hid_list_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; @__mz = split(",", $__qq); $__my = @__mz; } if ($__my > 0) { for ($__qj=0; $__qj < $__my; $__qj++) { $__qp = $__qn . "_" . $__mz[$__qj]; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, $__qq]; } else { push @__na, [$__qp, 0]; } $__mt = $__qp . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__na, [$__mt, $__mu]; } } } } else { if ((exists $authlib9_14_2::_akn{$__qn}) && (defined $authlib9_14_2::_akn{$__qn})) { $__qq = $authlib9_14_2::_akn{$__qn}; push @__na, [$__qn, $__qq]; } else { push @__na, [$__qn, ""]; } if ($authlib9_14_2::_akn{"hid_javascript"} == 1) { $__mt = $__qn . "_" . $__qq . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { push @__na, [$__mt, authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt})]; } } else { $__qp = "hid_list_" . $__qn; $__my = 0; @__mz = (); if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; @__mz = split(",", $__qq); $__my = @__mz; } if ($__my > 0) { for ($__qj=0; $__qj < $__my; $__qj++) { $__mt = $__qn . "_" . $__mz[$__qj] . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__na, [$__mt, $__mu]; } } } } } } elsif ($__ql == &authlib9_14_2::_ANL) { $__qp = "hid_" . $__qn . "_levels"; if (exists $authlib9_14_2::_akn{$__qp}) { my $__ob = $authlib9_14_2::_akn{$__qp}; if ($__ob) { for ($__qj = 0; $__qj < $__ob; $__qj++) { $__qp = $__qn . "_" . ($__qj+1); if (exists $authlib9_14_2::_akn{$__qp}) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, $__qq]; } } } } } elsif ($__ql == &authlib9_14_2::_ANM || $__ql == &authlib9_14_2::_ANN) { $__qq = $authlib9_14_2::_akn{$__qn}; $__qp = "hid_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $__qq . "," . $authlib9_14_2::_akn{$__qp}; push @__na, [$__qn, $__qq]; } else { authlib9_14_2::_zq(113, "", "Missing ACA system information.", ""); } } elsif ($__ql == &authlib9_14_2::_ANO) { if ($__qn =~ m/(.*?_Calibration)/i) { my $__oc = $1; my $__od = ""; my $__oe = ""; seek $authlib9_14_2::_ajm, $__qm, 0; my $__of = authlib9_14_2::_zi(0); my $__og = $__of->{'_ir'}; if ($__of->{'_gx'} == 1) { $__og = 1; } for ($__qj = 1; $__qj <= $__og; $__qj++) { if ($__of->{'_gx'} == 1) { $__oe = $__qn; } else { $__oe = $__oc . $__qj; } $__qq = $authlib9_14_2::_akn{$__oe}; if ($__qq =~ m/(\d+)/) { $__qq = authlib9_14_2::_abm($1); } $__od = "hid_" . $__oe; if (exists $authlib9_14_2::_akn{$__od}) { $__qq .= "," . $authlib9_14_2::_akn{$__od}; } else { authlib9_14_2::_zq(112, "", "Missing ACA Calibration system information.", ""); } push @__na, [$__oe, $__qq]; } } } elsif ($__ql == &authlib9_14_2::_ANP || $__ql == &authlib9_14_2::_ANQ) { seek $authlib9_14_2::_ajm, $__qm, 0; my $__oh = authlib9_14_2::_zi(0); my $__oi = 0; my $__oj = ""; if (exists $authlib9_14_2::_akn{"hid_Custom_CBC_" . $__qn}) { $__oj = $authlib9_14_2::_akn{"hid_Custom_CBC_" . $__qn}; $__oi = 1; } if (exists $__oh->{'_df'}) { my $__og = $__oh->{'_cv'}; my $__ok = ""; my $__ol = ""; if (exists $__oh->{'_ph'}) { $__og++; } for ($__qj = 1; $__qj <= $__og; $__qj++) { $__ok = $__qn . "_" . $__qj; if ($__oi) { if ((exists $authlib9_14_2::_akn{$__oj . $__qj}) && (defined $authlib9_14_2::_akn{$__oj . $__qj})) { $__ol = authlib9_14_2::_zo($authlib9_14_2::_akn{$__oj . $__qj}); $__ol = authlib9_14_2::_abm($__ol); push @__na, [$__ok, $__ol]; } } else { if ((exists $authlib9_14_2::_akn{$__ok}) && (defined $authlib9_14_2::_akn{$__ok})) { $__ol = authlib9_14_2::_zo($authlib9_14_2::_akn{$__ok}); $__ol = authlib9_14_2::_abm($__ol); push @__na, [$__ok, $__ol]; } } } } elsif (exists $__oh->{'_aw'}) { my $__om = $__qn . "_b"; my $__on = $__qn . "_w"; if ($__oi) { my $__oo = $__oj . "best"; my $__op = $__oj . "worst"; if ((exists $authlib9_14_2::_akn{$__oo}) && (defined $authlib9_14_2::_akn{$__oo})) { push @__na, [$__om, $authlib9_14_2::_akn{$__oo}]; } if ((exists $authlib9_14_2::_akn{$__op}) && (defined $authlib9_14_2::_akn{$__op})) { push @__na, [$__on, $authlib9_14_2::_akn{$__op}]; } } else { if ((exists $authlib9_14_2::_akn{$__om}) && (defined $authlib9_14_2::_akn{$__om})) { push @__na, [$__om, $authlib9_14_2::_akn{$__om}]; } if ((exists $authlib9_14_2::_akn{$__on}) && (defined $authlib9_14_2::_akn{$__on})) { push @__na, [$__on, $authlib9_14_2::_akn{$__on}]; } } } else { if ($__oi) { if ((exists $authlib9_14_2::_akn{$__oj}) && (defined $authlib9_14_2::_akn{$__oj})) { push @__na, [$__qn, authlib9_14_2::_zo($authlib9_14_2::_akn{$__oj})]; } } else { if ((exists $authlib9_14_2::_akn{$__qn}) && (defined $authlib9_14_2::_akn{$__qn})) { push @__na, [$__qn, $authlib9_14_2::_akn{$__qn}]; } } } if (exists $__oh->{'_eh'}) { my $__oq = $__qn . "_none"; if ($__oi) { my $__or = $__oj; if ($__or =~ m/(.*?)_(.*?)/) { $__or = $1 . "_none"; } if ((exists $authlib9_14_2::_akn{$__or}) && (defined $authlib9_14_2::_akn{$__or})) { push @__na, [$__oq, authlib9_14_2::_zo($authlib9_14_2::_akn{$__or})]; } } else { if ((exists $authlib9_14_2::_akn{$__oq}) && (defined $authlib9_14_2::_akn{$__oq})) { push @__na, [$__oq, $authlib9_14_2::_akn{$__oq}]; } } } } elsif ($__ql == &authlib9_14_2::_ANR || $__ql == &authlib9_14_2::_ANS) { my ($__qu) = 0; my ($__pt) = 0; my ($__qv) = 0; my ($__qw) = ""; my $__os = 0; @__mv = (); @__mw = (); $__mx = 0; seek $authlib9_14_2::_ajm, $__qm, 0; my $__ot = authlib9_14_2::_zi(0); if ($__ql == &authlib9_14_2::_ANS) { my @__ou = (); my @__ov = (); $__qp = "hid_row_list_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { @__ou = split(",", $authlib9_14_2::_akn{$__qp}); $__qp = "hid_col_list_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__os = 1; @__ov = split(",", $authlib9_14_2::_akn{$__qp}); $__qu = authlib9_14_2::_ack($__ot, 1, \@__ou, \@__ov); my $__ow = @__ou; my $__ox = @__ov; my $__mt = ""; for ($__qj = 0; $__qj < $__ow; $__qj++) { $__mt = $__qn . "_r" . $__ou[$__qj] . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__na, [$__mt, $__mu]; } } for ($__qj = 0; $__qj < $__ox; $__qj++) { $__mt = $__qn . "_c" . $__ov[$__qj] . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__na, [$__mt, $__mu]; } } } } } else { $__qu = $__ot->{'_pv'}; $__os = 1; } if ($__os) { my $__oy = @{$__qu}; for ($__qj = 0; $__qj < $__oy; $__qj++) { $__qw = $__qu->[$__qj]->{'_if'}; if (ref($__qu->[$__qj]) eq "CheckVar") { my @__oz = (); if ($__ql == &authlib9_14_2::_ANS) { @__oz = @{$__qu->[$__qj]->{'_uh'}}; } else { my $__pa = 1; my $__pb = $__qu->[$__qj]->{'_iy'}; for ($__pa = 1; $__pa <= $__pb; $__pa++) { push @__oz, $__pa; } } foreach $__qv (@__oz) { if ($__ql == &authlib9_14_2::_ANS) { $__qp = $__qw; $__qp =~ s/\*/$__qv/; } else { $__qp = $__qw . "_" . $__qv; } if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, $__qq]; } else { push @__na, [$__qp, 0]; } } } elsif (ref($__qu->[$__qj]) eq "ConsumVar") { if ((exists $authlib9_14_2::_akn{$__qw}) && (defined $authlib9_14_2::_akn{$__qw})) { $__qq = $authlib9_14_2::_akn{$__qw}; $__qq = authlib9_14_2::_zo($__qq); $__qq = authlib9_14_2::_abo($__qq); if ($__qq eq "") { if (exists $__qu->[$__qj]->{'_ui'}) { $__qq = 0; } } push @__na, [$__qw, authlib9_14_2::_abm($__qq)]; } } elsif ((exists $authlib9_14_2::_akn{$__qw}) && (defined $authlib9_14_2::_akn{$__qw})) { $__qq = $authlib9_14_2::_akn{$__qw}; if (ref($__qu->[$__qj]) eq "NumericVar") { $__qq = authlib9_14_2::_abm($__qq); } elsif (ref($__qu->[$__qj]) eq "HiddenVar") { if ($__qq) { my $__pc = $__qu->[$__qj]->{'_dp'}; my $__pd = authlib9_14_2::_abr($__qq); my $__pe = ""; if ($__pc == &authlib9_14_2::_APF) { $__pe = "Whole Number"; } elsif ($__pc == &authlib9_14_2::_APG) { $__pe = "Decimal Number"; } elsif ($__pc == &authlib9_14_2::_APH) { $__pe = "Text"; } if (($__pc == &authlib9_14_2::_APF || $__pc == &authlib9_14_2::_APG) && !$__pd) { authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "The text \"" . $__qq . "\" cannot be saved to a Free Format hidden variable with data type set to \"" . $__pe . "\"."); $__qq = 0; } elsif ($__pc == &authlib9_14_2::_APF) { my $__pf = int($__qq); if ($__pf != $__qq) { authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "The number \"" . $__qq . "\" cannot be saved to a Free Format hidden variable with data type set to \"" . $__pe . "\"."); $__qq = $__pf; } } } } push @__na, [$__qw, $__qq]; if ((ref($__qu->[$__qj]) eq "ComboVar") || ((ref($__qu->[$__qj]) eq "RankVar") && ($__qu->[$__qj]->{'_pj'} eq "combo"))) { $__mt = $__qw . "_" . $__qq . "_other"; if (exists $authlib9_14_2::_akn{$__mt}) { $__qq = $authlib9_14_2::_akn{$__mt}; push @__na, [$__mt, $__qq]; } } } else { push @__na, [$__qw, ""]; } } } } elsif ($__ql == &authlib9_14_2::_ANT) { $__my = 0; @__mz = (); $__qp = "hid_list_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; @__mz = split(",", $__qq); $__my = @__mz; } if ($__my > 0) { @__mv = (); @__mw = (); $__mx = 0; for ($__qj=0; $__qj < $__my; $__qj++) { $__qp = $__qn . "_" . $__mz[$__qj]; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; $__qq = authlib9_14_2::_zo($__qq); $__qq = authlib9_14_2::_abo($__qq); if ($__qq eq "") { $__qq = 0; if (!$__mx) { push @__mw, [$__qp, ""]; } } else { $__mx = 1; } push @__mv, [$__qp, authlib9_14_2::_abm($__qq)]; } $__mt = $__qp . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__mv, [$__mt, $__mu]; if (!$__mx) { push @__mw, [$__mt, $__mu]; } } } if ($__mx) { push @__na, @__mv; } else { push @__na, @__mw; } } } elsif ($__ql == &authlib9_14_2::_ANU) { $__my = 0; @__mz = (); $__qp = "hid_list_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; @__mz = split(",", $__qq); $__my = @__mz; } if ($__my > 0) { for ($__qj = 0; $__qj < $__my; $__qj++) { $__qp = $__qn . "_" . $__mz[$__qj]; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, authlib9_14_2::_abm($__qq)]; } $__mt = $__qp . "_other"; if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__na, [$__mt, $__mu]; } } } } elsif ($__ql == &authlib9_14_2::_ANW) { my $__pg = $__qn . "_b"; my $__ph = $__qn . "_w"; my $__pi = $__qn . "_anchor"; my $__pj = ""; my $__pk = ""; my $__oc = $__qn; $__oc =~ s/_\d+//; my $__nw = "sys_MXDDesignID_" . $__oc; if ((exists $authlib9_14_2::_akn{$__nw}) && (defined $authlib9_14_2::_akn{$__nw})) { $__qq = $authlib9_14_2::_akn{$__nw}; push @__na, [$__nw, $__qq]; delete $authlib9_14_2::_akn{$__nw}; } my $__pl = "sys_MXDVersion_" . $__oc; if ((exists $authlib9_14_2::_akn{$__pl}) && (defined $authlib9_14_2::_akn{$__pl})) { $__qq = $authlib9_14_2::_akn{$__pl}; push @__na, [$__pl, $__qq]; delete $authlib9_14_2::_akn{$__pl}; } my $__nz = "sys_MXDDesignError_" . $__oc; if ((exists $authlib9_14_2::_akn{$__nz}) && (defined $authlib9_14_2::_akn{$__nz})) { $__qq = $authlib9_14_2::_akn{$__nz}; push @__na, [$__nz, $__qq]; delete $authlib9_14_2::_akn{$__nz}; } if (exists $authlib9_14_2::_akn{"hid_Custom_MaxDiff_" . $__qn}) { my $__pm = $authlib9_14_2::_akn{"hid_Custom_MaxDiff_" . $__qn}; if ((exists $authlib9_14_2::_akn{$__pm . "_b"}) && (defined $authlib9_14_2::_akn{$__pm . "_b"})) { $authlib9_14_2::_akn{$__pg} = $authlib9_14_2::_akn{$__pm . "_b"}; } if ((exists $authlib9_14_2::_akn{$__pm . "_w"}) && (defined $authlib9_14_2::_akn{$__pm . "_w"})) { $authlib9_14_2::_akn{$__ph} = $authlib9_14_2::_akn{$__pm . "_w"}; } if (exists $authlib9_14_2::_akn{$__pm . "_anchor"}) { $authlib9_14_2::_akn{$__pi} = $authlib9_14_2::_akn{$__pm . "_anchor"}; } } if ((exists $authlib9_14_2::_akn{$__pg}) && (defined $authlib9_14_2::_akn{$__pg})) { $__pj = $authlib9_14_2::_akn{$__pg}; push @__na, [$__pg, $__pj]; } if ((exists $authlib9_14_2::_akn{$__ph}) && (defined $authlib9_14_2::_akn{$__ph})) { $__pk = $authlib9_14_2::_akn{$__ph}; push @__na, [$__ph, $__pk]; } if (exists $authlib9_14_2::_akn{$__pi}) { push @__na, [$__pi, $authlib9_14_2::_akn{$__pi}]; } my $__pn = 1; for ($__pn = 1; $__pn <= 2; $__pn++) { if ($__pn == 1) { $__mt = $__qn . "_" . $__pj . "_other"; } else { $__mt = $__qn . "_" . $__pk . "_other"; } if ((exists $authlib9_14_2::_akn{$__mt}) && (defined $authlib9_14_2::_akn{$__mt})) { $__mu = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mt}); $__mu =~ s/&quot;/"/g; push @__na, [$__mt, $__mu]; } } } elsif ($__ql == &authlib9_14_2::_ANX) { if (exists $authlib9_14_2::_akn{$__qn} || $__qh == 1) { seek $authlib9_14_2::_ajm, $__qm, 0; $__ms->{'_uf'} = authlib9_14_2::_zi(0); push @__nc, $__ms; } } elsif ($__ql == &authlib9_14_2::_ANY) { _rm(\@__na, $__qo, $__qn, 0); } elsif ($__ql == &authlib9_14_2::_ANZ) { my $__po = 1; $__qp = $__qn . '_' . $__po; while ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, $__qq]; $__po++; $__qp = $__qn . "_" . $__po; } $__qp = $__qn . '_shown'; if (exists $authlib9_14_2::_akn{$__qp} && defined $authlib9_14_2::_akn{$__qp}) { $__qq = $authlib9_14_2::_akn{$__qp}; push(@__na, [$__qp, $__qq]); } } elsif ($__ql == &authlib9_14_2::_AOA || $__ql == &authlib9_14_2::_AOB || $__ql == &authlib9_14_2::_AOC || $__ql == &authlib9_14_2::_AOD) { if ((exists $authlib9_14_2::_akn{$__qn}) && (defined $authlib9_14_2::_akn{$__qn})) { $__qq = $authlib9_14_2::_akn{$__qn}; push @__na, [$__qn, $__qq]; $__qp = $__qn . "_shown"; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, $__qq]; } } } elsif ($__ql == &authlib9_14_2::_AOE) { $__my = 0; @__mz = (); $__qp = "hid_list_" . $__qn; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; @__mz = split(",", $__qq); $__my = @__mz; } if ($__my > 0) { for ($__qj = 0; $__qj < $__my; $__qj++) { $__qp = $__qn . "_" . $__mz[$__qj]; if ((exists $authlib9_14_2::_akn{$__qp}) && (defined $authlib9_14_2::_akn{$__qp})) { $__qq = $authlib9_14_2::_akn{$__qp}; push @__na, [$__qp, authlib9_14_2::_abm($__qq)]; } } } } elsif (!exists $authlib9_14_2::_akn{"hid_test_mode"}) { authlib9_14_2::_zq(202, "Data Save Error.", "Data Save Error - Unknown question type " . $__ql . ".", $@); } } } } my @__pp = (); if (exists($authlib9_14_2::_akn{"hid_SavedListNames"})) { my @__pq = split(",", $authlib9_14_2::_akn{"hid_SavedListNames"}); my $__pr = @__pq; my $__ps = ""; for ($__pt = 0; $__pt < $__pr; $__pt++) { $__ps = $__pq[$__pt]; if (exists($authlib9_14_2::_akn{$__ps})) { push @__pp, [$__ps, $authlib9_14_2::_akn{$__ps}]; } } } if (exists $__mq->{'_la'}) { for (my $__pt = 0; $__pt < @{$__mq->{'_la'}}; $__pt++) { my $__pu = $__mq->{'_la'}->[$__pt]; my $__pv = "randquestion_" . $__mr->[$__pu->[0] - 1]->{'_if'}; if (exists $authlib9_14_2::_akn{$__pv}) { push @__na, ["sys_" . $__pv, $authlib9_14_2::_akn{$__pv}]; } } } if (exists $authlib9_14_2::_akn{"hid_loops"}) { my $__pw = _qz($authlib9_14_2::_akn{"hid_loops"}); my ($__qe, $__qx) = _rb($__mq, $__pw, ""); if ($__qe) { my $__px = 0; my $__oc = ""; my $__py = ""; my $__pz = ""; foreach $__px (@__na) { $__px->[0] .= $__qe; } if (@__pp) { my $__qa = ""; my %__qb = (); my $__qc = ""; my $__ps = ""; my $__pz = $__qe; my $__qd = ""; if (exists $__mq->{'_hm'}) { foreach $__qc (@{$__mq->{'_hm'}}) { $__qa = $authlib9_14_2::_ame->{$__qc}->{'_hj'}; if ($authlib9_14_2::_akn{$__qa} ne "") { if ($__pz =~ m/(.*?)\.\d+$/) { $__pz = $1; } } $__qb{$__qa} = $__pz; } } foreach $__px (@__pp) { $__ps = $__px->[0]; $__pz = $__qe; if ($__ps =~ m/(.*?)_others/i) { $__qd = $1; } else { $__qd = $__ps; } if (exists $__qb{$__qd}) { $__pz = $__qb{$__qd}; } $__px->[0] = $__ps . $__pz; } } } } if (exists $authlib9_14_2::_akn{"hid_pagetime"}) { _rl(\@__na, $__qo, $__qh, $authlib9_14_2::_akn{"hid_pagetime"}); } if (exists $__mq->{'_ba'}) { if (exists $authlib9_14_2::_akn{"hid_BlockSeq_" . $__mq->{'_ba'}->{'_nj'}}) { my $__qe = ""; if (exists $authlib9_14_2::_akn{"hid_loops"}) { $__qe = _rc($__mq); } push @__na, ["sys_block_set_" . $__mq->{'_ba'}->{'_nj'} . $__qe, $authlib9_14_2::_akn{"hid_BlockSeq_" . $__mq->{'_ba'}->{'_nj'}}]; } } if (exists $authlib9_14_2::_akn{"hid_SaveRandPages"} || $authlib9_14_2::_ajn{"hid_SaveRandPages"}) { my $__qf = 0; if (exists $authlib9_14_2::_akn{"hid_SaveRandPages"}) { $__qf = $authlib9_14_2::_akn{"hid_SaveRandPages"}; } elsif ($authlib9_14_2::_ajn{"hid_SaveRandPages"}) { $__qf = $authlib9_14_2::_ajn{"hid_SaveRandPages"}; } if (exists $authlib9_14_2::_akn{"hid_RandPage_" . $__qf}) { my $__qe = ""; if (exists $authlib9_14_2::_akn{"hid_loops"}) { $__qe = _rd($__mq); } push @__na, ["sys_randpage_" . $__qf . $__qe, $authlib9_14_2::_akn{"hid_RandPage_" . $__qf}]; } } if (exists $authlib9_14_2::_akn{"hid_show_prev"}) { push @__na, ["sys_ShowPrev", 1]; } my @__qg = (@__na, @__pp); authlib9_14_2::_xv(\@__qg, $__qo, 0, 0); authlib9_14_2::_xj(\@__na, $__qo, 0); if (@__pp) { authlib9_14_2::_xm(\@__pp, $__qo); } return (\@__nb, \@__nc); } sub _rl { my ($__rc, $__rd, $__re, $__rf) = @_; if (exists $authlib9_14_2::_akn{"hid_loops"}) { my $__qy = $authlib9_14_2::_ako->[$__re - 1]; my $__qz = _qz($authlib9_14_2::_akn{"hid_loops"}); my ($__rg, $__rh) = _rb($__qy, $__qz, ""); $__re = $__re . $__rg; } my $__ra = 0; my $__rb = "sys_pagetime_" . $__re; if ($__rf) { $__ra = time() - $__rf; } if (exists $authlib9_14_2::_akp->{'_ov'}) { push @{$__rc}, [$__rb, $__ra]; } if ($__re > 1 && $__ra > 0) { push @{$__rc}, ["sys_SumPageTimes", $__ra]; } } sub _rm { my ($__sy, $__sz, $__ta, $__tb) = @_; my %__ri = (); my $__rj = 0; my $__rk = 0; my $__rl = 0; my $__rm = 0; my $__rn = ""; my $__ro = 0; my $__rp = ""; my $__rq = authlib9_14_2::_aao($__ta); my $__rr = authlib9_14_2::_acy($__rq->{'_ac'}); my $__rs = 0; my %__rt = (); if ($__rr) { $__rs = @{$__rr}; } my $__ru = $__rq->{'_ad'}; my $__rv = 0; my $__rw = 0; my $__rx = 0; my $__ry = 0; my @__rz = (); my $__sa = ""; if ($__ta =~ m/(.*?)_BYO/) { $__sa = $1; } $acbclib9_14_2::_bky = {}; if (exists $__rq->{'_kf'}) { my $__sb = $__rq->{'_kf'}; $__rl = $__sb->{'_kg'}; } my @__sc = (); for ($__ro = 0; $__ro < $__rs; $__ro++) { $__rj = $__rr->[$__ro]->{'_pt'}; $__rt{$__rj} = $__ro; $__ry = 0; $__rk = 0; if (exists $__ru->{$__rj}) { $__rv = $__ru->{$__rj}; $__rp = $__ta . "_" . $__rj; if (exists $__rv->{'_me'}) { if (exists $__rv->{'_kb'}) { $__rw = $__rv->{'_kb'}; $__rx = authlib9_14_2::_acy($__rv->{'_he'}); if ($__rx) { @__rz = map {$_->{'_pt'}} @{$__rx}; } if ($__rw > 0) { my @__sd = (); if ($__rw == 1) { @__sd = sort {$b <=> $a} @__rz; } elsif ($__rw == 2) { @__sd = sort {$a <=> $b} @__rz; } $__ry = {'_uj'=>$__rj, '_hc'=>$__sd[0], '_gk'=>\@__sd, '_blg'=>1, '_me'=>1}; } else { my $__se = @{$__rx}; my $__sf = acbclib9_14_2::_bkf($__se); acbclib9_14_2::_bkg($__sf, $__sz * 97); my @__sg = map {$__rx->[$_]->{'_pt'};} @{$__sf->{"a"}}; my $__sh = $__sg[0]; $__ry = {'_uj'=>$__rj, '_hc'=>$__sh, '_gk'=>\@__sg, '_blf'=>1, '_me'=>1}; } } } else { if ((exists $authlib9_14_2::_akn{$__rp}) && (defined $authlib9_14_2::_akn{$__rp})) { $__rk = $authlib9_14_2::_akn{$__rp}; $__ry = {'_uj'=>$__rj, '_hc'=>$__rk}; } else { $__ry = {'_uj'=>$__rj, '_hc'=> 0, '_me'=>1}; } } if ($__ry) { if ($__rl) { if (exists $authlib9_14_2::_akn{$__rp . "_prices"} && $authlib9_14_2::_akn{$__rp . "_prices"} ne "") { $__rn = $authlib9_14_2::_akn{$__rp . "_prices"}; $__rn =~ s/\s//g; $__rn =~ s/^,/0,/; $__rn =~ s/,$/,0/; $__rn =~ s/,,/,0,/g; } else { $__rm = $__ru->{$__rj}->{'_ko'}; _rn($__rm); $__rn = join(",", @{$__rm}); } $__ry->{'_ko'} = $__rn; } $__ri{$__rj} = authlib9_14_2::_acv($__ry); } } } if (exists $__rq->{'_ks'}) { acbclib9_14_2::_bkc(\%__ri, $__rq->{'_ks'}); } for ($__ro = 0; $__ro < $__rs; $__ro++) { $__rj = $__rr->[$__ro]->{'_pt'}; if (exists $__ru->{$__rj}) { $__rv = $__ru->{$__rj}; if ($__rv->{'_kp'}) { my $__si = $__rv->{'_kp'}; my $__sj = 0; for (my $__sk = 0; $__sk < @{$__si} && !$__sj; $__sk++) { if (exists $__rt{$__si->[$__sk]}) { my $__rx = authlib9_14_2::_acy($__ru->{$__si->[$__sk]}->{'_he'}); my $__sl = $__ru->{$__si->[$__sk]}->{'_db'}->{$__rj}; for (my $__sm = 0; $__sm < @{$__rx} && !$__sj; $__sm++) { $__sj = exists $__sl->{$__rx->[$__sm]->{'_pt'}}; } } } if ($__sj) { push (@__sc, $__ro); } else { if (exists $__ri{$__rj}) { $__ri{$__rj}->{'_me'} = 1; $__ri{$__rj}->{'_hc'} = 0; } } } } } foreach $__ro (@__sc) { $__rj = $__rr->[$__ro]->{'_pt'}; $__rv = $__ru->{$__rj}; my $__sn = 0; my @__so = @{$__rv->{'_kp'}}; for (my $__sk = 0; $__sk < @__so && !$__sn; $__sk++) { if (exists $__ri{$__so[$__sk]}) { my $__sp = $__ri{$__so[$__sk]}->{'_hc'}; $__sn = exists $__ru->{$__so[$__sk]}->{'_db'}->{$__rj}->{$__sp}; } } if (!$__sn) { if (exists $__ri{$__rj}) { $__ri{$__rj}->{'_hc'} = 0; } } } my $__sq = 0; my @__sr = (0) x $__rs; foreach $__rj (sort {$a <=> $b} keys %__ri) { $__ry = $__ri{$__rj}; $__rp = $__ta . "_" . $__ry->{'_uj'}; my $__ss = $__rt{$__rj}; if (exists $__ry->{'_hc'} && $__ry->{'_hc'} ne "") { $__sr[$__ss] = $__ry->{'_hc'}; } if (not exists $__ry->{'_me'}) { push @{$__sy}, [$__rp, $__ry->{'_hc'}]; } if (exists $__ry->{'_ko'}) { $__rn = $__ry->{'_ko'}; push @{$__sy}, ["sys_ACBC_" . $__rp . "_prices", "[" . $__rn . "]"]; if ($__rl && $__ry->{'_hc'} != 0) { my @__st = split(',', $__rn); my $__su = $__st[$__ry->{'_hc'} - 1]; if ($__tb && exists $__rq->{'_dc'}) { my $__sv = acbclib9_14_2::_bjl($__rq->{'_dc'}, \%__rt, \@__sr); if (exists $__sv->{$__rj . "," . $__ry->{'_hc'}}) { $__su += $__sv->{$__rj . "," . $__ry->{'_hc'}}; } } $__sq += $__su; } } } if ($__rl && exists $__rt{$__rl}) { if (exists $__rq->{'_kf'}->{'_aq'}) { $__sq += $__rq->{'_kf'}->{'_aq'}; } my $__sw = 0; if (exists $__rq->{'_kf'}->{'_ix'}) { $__sw = $__rq->{'_kf'}->{'_ix'}; } $__sq = authlib9_14_2::_abj($__sq, $__sw); if (!$__tb) { push @{$__sy}, [$__ta . "_" . $__rl, $__sq]; } my $__ss = $__rt{$__rl}; $__sr[$__ss] = $__sq; } my $__sa = ""; if ($__ta =~ m/(.*?)_BYO/) { $__sa = $1; } my $__sx = acbclib9_14_2::_bil($__sa, $__rq); push @{$__sy}, ["sys_ACBC_" . $__sa . "_atts", join(',', @{$__sx})]; push @{$__sy}, ["sys_ACBC_" . $__sa . "_byo", join(',', @__sr)]; } sub _rn { my ($__te) = @_; my $__tc = 0; my $__td = ""; for ($__tc = 0; $__tc < @{$__te}; $__tc++) { $__td = $__te->[$__tc]; if (!authlib9_14_2::_adv($__td)) { $__te->[$__tc] = 0; } } } sub _ro { my ($__tk, $__tl) = @_; if ($ciwlib9_14_2::_uc == 0) { my $__tf = ""; if (exists $authlib9_14_2::_akn{"hid_respnum"}) { $__tf = _rj(); } print _sa($authlib9_14_2::_akn{"hid_pagenum"}, $__tf, $authlib9_14_2::_akn{"hid_javascript"}, 0, "", ""); } ciwlib9_14_2::_rp("","",$__tk,0,0,0,0); if ($ciwlib9_14_2::_tz) { print $ciwlib9_14_2::_tz; } if ($__tl) { my $__tg = ""; my $__th = ""; my $__ti = ""; my %__tj = ("hid_backup" => 1, "hid_studyname" => 1, "hid_respnum" => 1, "hid_pagenum" => 1, "hid_javascript" => 1, "hid_previous" => 1, "hid_s" => 1); foreach $__tg (sort keys(%authlib9_14_2::_akn)) { if (exists $__tj{$__tg}) { next; } else { $__th = $authlib9_14_2::_akn{$__tg}; $__th =~ s/"/&quot;/g; $__ti .= "<input name=\"" . $__tg . "\" type=\"hidden\" value=\"" . $__th . "\">\n"; } } print $__ti; if ($authlib9_14_2::_akn{"hid_javascript"}) { _sw({}, [], [], []); } if (exists $authlib9_14_2::_akp->{'_kc'}) { delete $authlib9_14_2::_akp->{'_kc'}; } print _sg($authlib9_14_2::_akn{"hid_pagenum"}, 0, 0, ""); } print ciwlib9_14_2::_sf(0, 0); authlib9_14_2::_act(); } sub _rp { my ($__tu, $__tv, $__tw, $__tx, $__ty, $__tz, $__ua) = @_; my $__tm = 0; my $__tn = ""; my $__to = ""; my $__tp = ""; my $__tq = $authlib9_14_2::_akq->{'_hw'}; $__tv =~ s/\\"/"/g; if (exists $__tq->{$__tw}) { $__to = $__tq->{$__tw}; $__to = authlib9_14_2::_zw($__to, 0); $__to = authlib9_14_2::_acq($__to); } if ($__tw eq '_de') { my $__tr = $__tz; my $__ts = $__ua->{'_dg'}; $__tz = $__ts; $__to =~ s/\[%ERRCURSUM\(\)%\]/$__tr/ig; $__to =~ s/\[%ERRTOTAL\(\)%\]/$__ts/ig; } elsif ($__tw eq '_lt') { $__to =~ s/\[%ERRTOTAL\(\)%\]/$__tz/ig; } $__to =~ s/\[%ERRFIELD\(\)%\]/$__tx/ig; $__to =~ s/\[%ERRTEXT\(\)%\]/$__tv/ig; $__to =~ s/\[%ERRQNAME\(\)%\]/$__tu/ig; $__to =~ s/\[%ERRMIN\(\)%\]/$__ty/ig; $__to =~ s/\[%ERRMAX\(\)%\]/$__tz/ig; $__tp .= "<div class=\"server_verification_error\">\n"; if ($__tu) { if (exists $__tq->{'_jm'}) { my $__tt = $__tq->{'_jm'}; $__tt = authlib9_14_2::_zw($__tt, 0); $__tt = authlib9_14_2::_acq($__tt); $__tp .= "<div id=\"error_box\" class=\"page_error error_messages\" role=\"alert\">\n"; $__tp .= $__tt; $__tp .= "</div>\n"; } } if ($__to) { $__tp .= "<div class=\"question_errors error_messages\" role=\"alert\">\n"; $__tp .= $__to; $__tp .= "</div>\n"; } $__tp .= "</div>\n"; if (exists($authlib9_14_2::_akp->{'_nt'})) { $__tp .= "<input type=\"hidden\" name=\"hid_skip_simple_browser_transition\" value=\"1\">\n"; } $ciwlib9_14_2::_tz = $__tp; } sub _rq { my ($__ul, $__um, $__un, $__uo, $__up) = @_; my $__ub = 1; my $__uc = 0; my $__ud = 1; my $__ue = 0; my $__uf = 0; my $__ug = 0; my $__uh = 0; if ($__un) { $__ud = 0; } while($__ub) { $__uc = 0; if (not exists $ciwlib9_14_2::_tx{'remove_rand'}) { if ($__ud) { ($__ue, $__uf, $__uh) = _qy($__ul, $__um, $__up); } else { $__ue = 0; $__uf = 0; $__uh = 0; } if ($authlib9_14_2::_aij && !$__ue && !$__uf) { ($__ul, $__un) = _qt($__ul, $__um, $__un, $__uo); } if (!$__uf) { if ($__uh && !exists $authlib9_14_2::_akn{"hid_page_rand"}) { } else { ($__ul, $__ud, $__un, $__uc) = _re($__ul, $__uo, $__up, $__ud, $__un); if ($__uc) { next; } } } } if ($authlib9_14_2::_ail && $__ud) { my $__ui = $__ul; ($__ul, $__ug) = _qx($__ul, $__um, 0, 0, $__up, 0); $__ud = 0; if ($__ul != $__ui) { if (!$__uf) { my $__uj = $authlib9_14_2::_ako->[$__um - 1]; foreach my $__uk (keys %{$__ug}) { if (!_qp($__uj, $__uk)) { $__um = 0; last; } } %authlib9_14_2::_ajn = (); delete $authlib9_14_2::_akn{"hid_page_rand"}; next; } } } if ($__un == &authlib9_14_2::_ANC || $__un == &authlib9_14_2::_ANB) { $__un = ""; } $__ub = 0; } return ($__ul, $__un); } sub _rr { my ($__xz, $__xd, $__ya, $__yb, $__yc, $__yd, $__ye) = @_; my $__uq = ""; my $__ur = 0; my ($__yf,$__yg,$__yh) = (0) x 3; my ($__yi, $__xt) = (0) x 2; my $__us = 0; my $__ut = ""; my $__uu = 0; my $__uv = 0; my $__uw = 1; my $__ux = ""; my %__uy = (); my @__uz = (); my $__va = 0; my $__vb = 0; my $__vc = 1; my $__vd = 0; my $__ve = 0; my $__vf = 0; my $__vg = 0; my $__vh = 0; my $__vi = 0; my $__vj = 0; my $__vk = 0; my @__vl = (); my @__vm = (); my @__vn = (); my $__vo = ""; my $__vp = ""; my $__vq = 0; my @__vr = (); my $__vs = 0; my $__vt = ""; my $__vu = ""; my $__vv = 0; my $__vw = 0; my $__vx = 0; if ($authlib9_14_2::_amg && exists $authlib9_14_2::_akn{"hid_test_mode_settings"}) { if ($authlib9_14_2::_akn{"hid_test_mode_settings"} ne "") { ciwlib9_14_2::_tc(); } } if ($__xd) { if (exists($authlib9_14_2::_ahp{$__xd})) { $__vg = $authlib9_14_2::_ahp{$__xd}; $__xz = $__vg->{'_ji'}; $__vf = $authlib9_14_2::_ako->[$__xz - 1]; $__vh = $__vf->{'_ld'}; _rs($__vh); $__ur = @{$__vh}; for ($__yi = 0; $__yi < $__ur; $__yi++) { $__vg = $__vh->[$__yi]; if ($__vg->{'_if'} eq $__xd) { $__vi = $__yi; last; } else { $__vg->{'_uk'} = 1; } } } else { authlib9_14_2::_zq(115, "Attempted to skip to a question that does not exist.", "Attempted to skip to a question that does not exist (" . $__xd . ").", ""); } } else { if ($__xz > @{$authlib9_14_2::_ako}) { $__ve = 1; $__vk = 1; } else { $__vf = $authlib9_14_2::_ako->[$__xz - 1]; $__vh = $__vf->{'_ld'}; _rs($__vh); $__ur = @{$__vh}; } } $authlib9_14_2::_akn{"hid_pagenum"} = $__xz; if ($__vf) { if (exists $__vf->{'_hm'}) { my $__vy = 0; my $__vz = 0; $__vw = {}; my $__wa = ""; my @__wb = (); authlib9_14_2::_adr(); if (exists $authlib9_14_2::_akn{"hid_loops"}) { $__vw = _qz($authlib9_14_2::_akn{"hid_loops"}); } if (!exists $authlib9_14_2::_akn{"hid_loops_restart_dot_notation"}) { my %__wc = (); foreach $__wa (@{$__vf->{'_hm'}}) { $__wc{$__wa} = 1; $__vy = $authlib9_14_2::_ame->{$__wa}; $__vz = authlib9_14_2::_aae($__vy->{'_hj'}); if ($__vz) { if (not exists $__vw->{$__wa}) { $__vw->{$__wa} = 1; } } else { $__xz++; return ($__xz, "", $__vx); } } foreach $__wa (keys %{$__vw}) { if (!exists $__wc{$__wa}) { delete $__vw->{$__wa}; } } } my $__vv = 0; ($__vu, $__vv) = _rb($__vf, $__vw, ""); my $__wd = _ra($__vw); $authlib9_14_2::_akn{"hid_loops"} = $__wd; $authlib9_14_2::_ajn{"hid_loops"} = $__wd; } } my $__we = ""; my $__wf = 0; my $__wg = 0; my $__wh = ""; my $__wi = 0; my $__wj = 0; my $__wk = 0; if ($authlib9_14_2::_ajq && $__xz > 1) { $__wk = $authlib9_14_2::_akn{"sys_prev_low_hop"}; } elsif ($__xz > 1) { $__wk = $authlib9_14_2::_akn{"sys_next_hop"}; } for ($__yi = $__vi; $__yi < $__ur; $__yi++) { $__vg = $__vh->[$__yi]; $authlib9_14_2::_ajk = $__vg->{'_if'}; if ($__wh) { if ($__wh eq $__vg->{'_if'}) { $__wh = ""; } else { $__vg->{'_uk'} = 1; next; } } if (exists $__vg->{'_ka'} && !$authlib9_14_2::_amg) { if ($authlib9_14_2::_ajq && $__xd eq $__vg->{'_if'}) { } elsif (!exists($ciwlib9_14_2::_tx{'remove_skip'})) { my $__wl = $__vg->{'_ka'}; my $__wm = @{$__wl}; my $__wn = 0; for ($__xt = 0; $__xt < $__wm; $__xt++) { $__wn = $__wl->[$__xt]; if (_sq($__wn->{'_hk'})) { $__wh = $__wn->{'_dw'}; ($__wh, $__xz, $__vx, $__wj) = _qo($__wh, $__xz); if ($__wh eq "" && $__wj) { $__wi = 1; if ($authlib9_14_2::_ajq) { $__wi = 0; } } $__vg->{'_uk'} = 1; last; } } if ($__wi) { last; } if (exists $__vg->{'_uk'}) { next; } } } if ($__vg->{'_pj'} == &authlib9_14_2::_ANL || $__vg->{'_pj'} == &authlib9_14_2::_ANM) { my $__wo = authlib9_14_2::_za($__vg->{'_if'}, 1); if (exists $__wo->{'_ls'}) { my $__wp = 0; my $__wq = 0; my $__wr = 0; $__vg->{'_ul'} = $__vg->{'_if'}; ($__vg->{'_if'}, $__wp, $__wq, $__wr) = acalib9_14_2::_arl($__wo, $__vg->{'_if'}, $__vg->{'_pj'}, 1); $authlib9_14_2::_ajk = $__vg->{'_if'}; } } $authlib9_14_2::_ain = {}; _tj($__vg); $__vg->_ve(); if (exists $__vg->{'_uk'}) { next; } elsif (exists $__vg->{'_um'}) { my $__ws = delete $__vg->{'_um'}; my @__wt = (); if (exists $authlib9_14_2::_akn{'sys_autocompletes'}) { @__wt = @{$authlib9_14_2::_akn{'sys_autocompletes'}}; } else { my $__wu = delete $authlib9_14_2::_akn{'hid_SavedListNames'}; if ($__wu) { my @__wv = split(",", $__wu); foreach my $__ww (@__wv) { delete($authlib9_14_2::_akn{$__ww}); } } } foreach my $__wx (@{$__ws}) { authlib9_14_2::_wt($__wx->[0], $__wx->[1]); } my $__wy = {'_ud' => $__vg->{'_if'}, '_ue' => $__ws}; push(@__wt, $__wy); $authlib9_14_2::_akn{'sys_autocompletes'} = \@__wt; $__vg->{'_uk'} = 1; next; } else { if ($__vg->{'_pj'} == &authlib9_14_2::_ANV) { $__uu = $__vg->{'_uf'}; $__uu->{'_if'} = $__vg->{'_if'}; } elsif ($__vg->{'_pj'} == &authlib9_14_2::_ANX) { push @__vr, $__vg; } else { if (authlib9_14_2::_yf($__vg->{'_pj'})) { $__vg->_bhk(); } elsif ($__vg->{'_pj'} == &authlib9_14_2::_ANW) { $__vg->_bgo(); } if (exists $__vg->{'_uk'} && exists $__vg->{'_uf'}->{'_nw'}) { $__wh = $__vg->{'_uf'}->{'_nw'}; if ($__wh eq "" && $__vg->{'_pj'} != &authlib9_14_2::_ANY) { $__ve = 1; } else { ($__wh, $__xz, $__vx, $__wj) = _qo($__wh, $__xz); if ($__wh eq "" && $__wj) { $__wi = 1; last; } } } } if (exists $__vg->{'_uk'}) { next; } else { if ($ciwlib9_14_2::_tz eq "" && $__xz > 1 && authlib9_14_2::_aet()) { eval { require "Digest.pm"; $__vg->{'_un'} = Digest->new("MD5"); $__vg->{'_un'}->add($__vg->_vf()); $__vg->{'_un'}->add($__vg->_vg()); }; if ($@) { authlib9_14_2::_zq(337, "Unable to load library.", "Unable to load Digest.pm.", $@); } } $__uq .= $__vg->_vf(); $__vf->{'_fl'} .= $__vg->_vg(); my $__wz = $__vg->{'_uf'}; if (exists $__wz->{'_gq'}) { my $__xa = "SSI_CustomJScriptShell_" . $__vg->{'_if'} . "()"; $__wz->{'_gq'}->{'_ut'} = $__vg->{'_if'}; $__wz->{'_gq'}->{'quest_type'} = $__vg->{'_pj'}; $__wz->{'_gq'}->{'_us'} = $__xa; if ($__wz->{'_gq'}->{'_br'} eq "after") { push @__vm, $__xa; } else { push @__vl, $__xa; } push @__vn, $__wz->{'_gq'}; if ($ciwlib9_14_2::_tz eq "" && $__xz > 1 && authlib9_14_2::_aet()) { $__vg->{'_un'}->add($__wz->{'_gq'}->{'_ck'}); } } if ($__vg->{'_pj'} != &authlib9_14_2::_ANX) { $__vk = 1; } if ($__vp eq "") { if (exists $__vg->{'_ul'}) { $__vp = $__vg->{'_ul'}; } else { $__vp = $__vg->{'_if'}; } if ($__vu) { $__vp .= $__vu; } } } } } $authlib9_14_2::_ajk = ""; if ($__wh || $__wi) { return ($__xz, $__wh, $__vx); } elsif (@__vr > 0 && !$__vk) { if ($authlib9_14_2::_amg) { $__vs = 1; $__vk = 1; if ($authlib9_14_2::_amg == &authlib9_14_2::_AOX) { $__vs = 0; } } else { my $__xb = 0; my @__xc = (); my $__xd = ""; foreach $__xb (@__vr) { if (exists $__xb->{'_jz'}) { push @__xc, $__xb->{'_jz'}; } } ($__xd, $__xz, $__vx) = _qn(\@__xc, \@__vr, $__ya, "", $__xz, 0); return ($__xz, $__xd, $__vx); } } if ($__uu && exists $__uu->{'_oo'} || $__ve) { if (!$authlib9_14_2::_amg) { _ry($__yc, $__ya, $__uu); } $__vb = 1; } if (!$authlib9_14_2::_amg && $__uu && exists $__uu->{'_ma'} && $__uu->{'_ma'} eq "immediately") { _rw($__uu->{'_if'}, $__ya); if (exists $ciwlib9_14_2::_tx{'remove_terminate'}) { $__vc = 0; } else { $__vo = $__uu->{'_mb'}; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { if ($__vo =~ m/\?/) { $__vo .= "&hid_test_mode=" . $authlib9_14_2::_akn{"hid_test_mode"}; } } print authlib9_14_2::_zb(); print "<html><head>\n"; print "<meta http-equiv=\"refresh\" content=\"0;url=" . $__vo . "\">\n"; print "<meta http-equiv=\"pragma\" content=\"no-cache\">\n"; print "</head><body bgcolor=\"#ffffff\"></body></html>\n"; return (0, "", $__vx); } } if ($__ve) { $authlib9_14_2::_alf = 100; print _sa($__xz, $__ya, $__yb, 0, "", ""); _sh(); print _sf($__xz, 0); return (0, "", $__vx); } if ($__vk) { if (@__vn > 0) { $__vf->{'_gq'} = \@__vn; } if ($__yd) { if (exists $__yd->{'_uo'}) { return ($__vf, $__uq, $__vx); } else { if (exists $__yd->{'_up'}) { $__vf->{'_fl'} = $__yd->{'_up'}; } if (exists $__yd->{'_uq'}) { $__uq = $__yd->{'_uq'}; } } } print _sa($__xz, $__ya, $__yb, $__vf, $__vp, $__uq, $__ye); if ($ciwlib9_14_2::_tz) { print $ciwlib9_14_2::_tz; } if (exists $authlib9_14_2::_akn{"hid_page_rand"}) { $authlib9_14_2::_ajn{"hid_page_rand"} = $authlib9_14_2::_akn{"hid_page_rand"}; } if ($__xd ne "") { print "<input type=\"hidden\" name=\"hid_destination\" value=\"" . $__xd . "\">\n"; } if (exists($__vf->{'_la'}) && !$authlib9_14_2::_amg) { if (!exists($ciwlib9_14_2::_tx{'remove_rand'})) { ($__us, $__vi) = _sp($__vf, $__vi, $__ya, $__ur, $__xz); my @__xe = @{$__us}; my @__xf = (); my $__xg = 0; my @__xh = (); my $__xi = ""; my $__xj = ""; for ($__yi = 0; $__yi < @{$__vf->{'_la'}}; $__yi++) { $__xg = $__vf->{'_la'}->[$__yi]; @__xh = @__xe[($__xg->[0] - 1)..($__xg->[1] - 1)]; $__xi = join(",", map { ($_ + 1) - ($__xg->[0] - 1) } @__xh); $__xj = "randquestion_" . $__vh->[$__xg->[0] - 1]->{'_if'} . $__vu; $authlib9_14_2::_ajn{$__xj} = $__xi; } } } if (exists $authlib9_14_2::_akn{'sys_autocompletes'}) { my $__wx = delete $authlib9_14_2::_akn{'sys_autocompletes'}; foreach my $__xk (@{$__wx}) { my $__ut = $__xk->{'_ud'}; my $__xl = $__xk->{'_ue'}; my $__vg = $authlib9_14_2::_ahp{$__ut}; $authlib9_14_2::_ajn{"hid_q_" . $__ut} = $__ut; foreach my $__wx (@{$__xl}) { $authlib9_14_2::_ajn{$__wx->[0]} = $__wx->[1]; } if ($__vg->{'_pj'} == &authlib9_14_2::_ANS) { my $__xm = $__vg->{'_uf'}->{'_aqe'}; my $__xn = $__vg->{'_uf'}->{'_aqf'}; $authlib9_14_2::_ajn{"hid_row_list_" . $__xk->{'_ud'}} = join(",", map{$_->{'_pt'}} @{$__xm}); $authlib9_14_2::_ajn{"hid_col_list_" . $__xk->{'_ud'}} = join(",", map{$_->{'_pt'}} @{$__xn}); } else { my $__wf = $__vg->{'_uf'}->{'_vu'}; $authlib9_14_2::_ajn{"hid_list_" . $__ut} = join(",", map{$_->{'_pt'}} @{$__wf}); } } } unless ($__us) { my @__xo = (0..($__ur - 1)); $__us = \@__xo; } for ($__yi = $__vi; $__yi < $__ur; $__yi++) { $__yf = $__us->[$__yi]; $__vg = $__vh->[$__yf]; $__yh = $__vg->{'_pj'}; $__ut = $__vg->{'_if'}; $authlib9_14_2::_ajk = $__ut; $__vq = $__xz * 1009 + ($__yf + 1); if (exists $__vg->{'_uk'}) { next; } if ($authlib9_14_2::_amg && $__ye) { if (($__ye & 1) && $__uw) { $__uw = 0; $__uv = !$__uv } } elsif (($__xz & 1) && $__uw) { $__uw = 0; $__uv = !$__uv } if ($__yh != &authlib9_14_2::_ANJ && $__yh != &authlib9_14_2::_ANK) { $__va++; } my $__xp = ""; my $__xq = 0; if ($ciwlib9_14_2::_tz && !$authlib9_14_2::_amg && $__xz > 1) { $__xq = 1; $__vg->{'_uf'}->{'_ug'} = \%authlib9_14_2::_akn; my @__xr = split(",", $authlib9_14_2::_akn{"hid_prev_" . $__vg->{'_if'} . $__vu}); ($__wk, $__vg->{'_un'}) = @__xr[0, -1]; } do { if (exists $__vg->{'_uf'}->{'_azv'}) { $__xp = $__vg->{'_uf'}->{'_azv'}; } else { $__xp = ""; $__vg->{'_uf'}->{'_blh'} = $__va; if ($__yh == &authlib9_14_2::_ANX) { if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__xp .= _td($__ut, 1, 0); } $__xp .= $__vg->_vr($__vq, $__ya, $__yb, $__uv); } else { $__xp .= $__vg->_vh(); if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__xp .= _td($__ut, 1, 0); } $__xp .= $__vg->_vi(); $__xp .= $__vg->_vj(); $__xp .= $__vg->_vk(); $__xp .= $__vg->_vr($__vq, $__ya, $__yb, $__uv); $__xp .= $__vg->_vl(); $__xp .= $__vg->_vm(); $__xp .= $__vg->_vl(); } } if ($__xq == 0 && $__xz > 1 && authlib9_14_2::_aet()) { $__vg->{'_un'}->add($__xp); $__vg->{'_un'} = $__vg->{'_un'}->hexdigest(); $__ut = $__vg->{'_if'}; if ($__yh == &authlib9_14_2::_ANO && $__vg->{'_uf'}->{'_gx'} == 2) { my $__xs = $__vg->{'_uf'}->{'_ir'}; my ($__yj) = $__ut =~ m/^(.*?_Calibration)/; for (my $__xt = 1; $__xt <= $__xs; $__xt++) { my @__xu = @{authlib9_14_2::_xy($__ya, {"quest_name" => $__yj . $__xt, "quest_version" => $__vg->{'_un'}})}; if (@__xu > 0 && $__xu[-1]->{"quest_name"} eq ($__yj . $__xt)) { while (my ($__yk, $__yl) = each %{$__xu[-1]->{"data"}}) { $__vg->{'_uf'}->{'_ug'}->{$__yk} = $__yl; } $__xq = 1; $authlib9_14_2::_ajj = 0; } } } elsif (!$authlib9_14_2::_amg) { my @__xu = @{authlib9_14_2::_xy($__ya, {"quest_name" => $__ut . $__vu, "quest_version" => $__vg->{'_un'}})}; if (@__xu > 0 && $__xu[-1]->{"quest_name"} eq $__ut . $__vu) { if ($__vu) { while (my ($__ym, $__yn) = each %{$__xu[-1]->{"data"}}) { $__ym =~ s/^(.*?)\..*$/$1/o; $__vg->{'_uf'}->{'_ug'}->{$__ym} = $__yn; } } else { $__vg->{'_uf'}->{'_ug'} = $__xu[-1]->{"data"}; } $__xq = 1; $authlib9_14_2::_ajj = 0; } } } else { $__xq = 0; $authlib9_14_2::_ajj = 1; } } until($__xq == 0); if ($__yb) { $__vg->_vs(\@__uz, \%__uy, $__va); } $__uv = !$__uv; print $__xp; if (authlib9_14_2::_aet()) { print "\n<input type=\"hidden\" name=\"hid_q_" . $__ut . "\" value=\"" . $__ut . "\">\n"; if ($__xz > 1) { if ($__yh == &authlib9_14_2::_ANO && $__vg->{'_uf'}->{'_gx'} == 2) { my $__xs = $__vg->{'_uf'}->{'_ir'}; my ($__yj) = $__ut =~ m/^(.*?_Calibration)/; print "\n<input type=\"hidden\" name=\"hid_prev_" . $__ut . "\" value=\"" . join(",", $__wk, $__ut, $__xz, $__vg->{'_un'}) . "\">\n"; for (my $__xt = 2; $__xt <= $__xs; $__xt++) { $__wk++; print "\n<input type=\"hidden\" name=\"hid_prev_" . $__yj . $__xt . "\" value=\"" . join(",", $__wk, $__yj . $__xt, $__xz, $__vg->{'_un'}) . "\">\n"; } } else { print "\n<input type=\"hidden\" name=\"hid_prev_" . $__ut . $__vu . "\" value=\"" . join(",", $__wk, $__ut . $__vu, $__xz, $__vg->{'_un'}) . "\">\n"; } } } $authlib9_14_2::_ajk = ""; $__wk++; } } else { $__xz++; return ($__xz, "", $__vx); } if ($__yb) { _sw(\%__uy, \@__uz, \@__vl, \@__vm); } else { print _rv(); } my $__xv = _sf($__xz, 1); if ($authlib9_14_2::_amg == &authlib9_14_2::_AOX || $authlib9_14_2::_amg == &authlib9_14_2::_AOY) { $__vc = 0; } if ($__vc) { if ($__vb == 0) { print _rt(); print _sg($__xz, 0, 0, ""); } else { if (exists $__vg->{'_uf'}->{'_ma'} && $__vg->{'_uf'}->{'_ma'} ne "donotredirect") { my $__xw = $__vg->{'_uf'}->{'_ma'}; my $__xx = $__vg->{'_uf'}->{'_mb'}; if ($__xw eq "afterclick") { my $__xy = ""; if (exists $__vg->{'_uf'}->{'_ly'}) { $__xy = $__vg->{'_uf'}->{'_ly'}; } print _sg($authlib9_14_2::_akn{"hid_pagenum"}, 0, 1, $__xy); if (!$authlib9_14_2::_amg) { print "<script>"; print "function SSI_NextSubmit(next_button){window.location.href = \"" . $__xx . "\";}"; print "</script>"; } } } if ($authlib9_14_2::_amg && ($__xz < @{$authlib9_14_2::_ako}) && ($authlib9_14_2::_amg != &authlib9_14_2::_AOZ)) { print _sg($__xz, 0, 0, ""); print _rx("This is a terminating page. The navigation button(s) only appear on this page in preview mode."); } } } if ($__vs) { print _rx("This page only contains quota information and only appears in preview mode."); } if ($__vb && ($authlib9_14_2::_aku || $authlib9_14_2::_akw)) { _sh(); } print $__xv; if ($__vp ne "" && $__xz > 1 && authlib9_14_2::_aet()) { _rw($__vp, $__ya); } return (0, "", $__vx); } sub _rs { my ($__yp) = @_; my $__yo = 0; foreach $__yo (@{$__yp}) { delete $__yo->{'_uk'}; } } sub _rt { my $__yq = ""; my %__yr = (); my $__ys = ""; my @__yt = (); foreach $__ys (sort keys %authlib9_14_2::_ait) { if ($__ys =~ m/^(.*)_others$/) { my $__yu = $1; if (!exists $authlib9_14_2::_ait{$__yu}) { next; } } $authlib9_14_2::_ajn{$__ys} = $authlib9_14_2::_ait{$__ys}; push @__yt, $__ys; } if (@__yt) { $authlib9_14_2::_ajn{"hid_SavedListNames"} = join(",", @__yt); } my @__yv = sort keys %authlib9_14_2::_ajn; if (@__yv > 0) { my $__yw = ""; foreach $__yw (@__yv) { $__yq .= "\n<input type=\"hidden\" name=\"" . $__yw . "\" value=\"" . $authlib9_14_2::_ajn{$__yw} . "\">\n"; $__yr{$__yw} = 1; } } my @__yx = sort keys %__yr; if (@__yx > 0) { $__yq .= "\n<input type=\"hidden\" name=\"hid_page_vars\" value=\"" . join(",", @__yx) . "\">\n"; } $__yq .= "\n<input type=\"hidden\" name=\"hid_pagetime\" value=\"" . time() . "\">\n"; return $__yq; } sub _ru { my ($__zf) = @_; if (exists($authlib9_14_2::_ahp{$__zf})) { my $__yy = $authlib9_14_2::_ahp{$__zf}; if ($__yy->{'_pj'} == &authlib9_14_2::_ANL || $__yy->{'_pj'} == &authlib9_14_2::_ANM) { my $__yz = authlib9_14_2::_za($__yy->{'_if'}, 1); if (exists $__yz->{'_ls'}) { my $__za = ""; my $__zb = 0; my $__zc = 0; my $__zd = 0; my $__ze = 0; ($__za, $__zb, $__zc, $__zd) = acalib9_14_2::_arl($__yz, $__zf, $__yy->{'_pj'}, 1); if ($__yy->{'_pj'} == &authlib9_14_2::_ANL) { $__ze = acalib9_14_2::_arm($__zb, $__zd); } elsif ($__yy->{'_pj'} == &authlib9_14_2::_ANM) { $__ze = acalib9_14_2::_arm($__zc, $__zd); } if ($__ze) { $__zf =~ s/(_Rating|_Importance)\d+/$1$__ze/i; } } } } return $__zf; } sub _rv { my $__zg = ""; if ($authlib9_14_2::_amg == 0 && $ciwlib9_14_2::_tz eq "") { $__zg .= "\n\n<script type=\"text/javascript\">\n"; $__zg .= "window.document.mainform.hid_javascript.value = 1;"; $__zg .= "\n</script>\n\n"; } return $__zg; } sub _rw { my ($__zh, $__zi) = @_; authlib9_14_2::_xj([["sys_LastQuestion", $__zh]], $__zi, 0); _sc($__zi, $__zh); } sub _rx { my ($__zk) = @_; my $__zj = ""; $__zj .= "<div class=\"preview_note\">"; $__zj .= "<div class=\"preview_title\">Note:</div>\n"; $__zj .= $__zk; $__zj .= "</div>"; return $__zj; } sub _ry { my ($__zt, $__zu, $__zv) = @_; my $__zl = 0; my $__zm = 0; my $__zn = "SELECT `sys_RespStatus` FROM `" . $authlib9_14_2::_akj . "_data1` WHERE `sys_RespNum` = " . $__zu; my $__zo = 0; my $__zp = 1; eval { $__zo = $authlib9_14_2::_ake->selectrow_hashref(authlib9_14_2::_wn($__zn, 0)); }; if ($@ || $__zo == 0) { authlib9_14_2::_zq(208, "Database error.", "Database error. Cannot read data record.", $@); } $__zl = $__zo->{"sys_RespStatus"}; if (exists $ciwlib9_14_2::_tx{'remove_terminate'}) { $__zp = 0; } if ($__zp && $__zl < 4) { my $__zq = ""; my $__zr = 5; my @__zs = (); if ($__zv) { if (exists $__zv->{'_dx'}) { $__zq = $__zv->{'_dx'}; push @__zs, ["sys_DispositionCode", $__zq]; } if (exists $__zv->{'_oo'}) { $__zr = $__zv->{'_oo'}; } } push @__zs, ["sys_RespStatus", $__zr]; authlib9_14_2::_xj(\@__zs, $__zu, 0); if ($authlib9_14_2::_aih > 0) { authlib9_14_2::_yh("acalib9_14_2.pl"); acalib9_14_2::_arn(); } if (exists $authlib9_14_2::_akp->{'_am'}) { authlib9_14_2::_yh("maxdifflib9_14_2.pl"); maxdifflib9_14_2::_bgw($__zu); } } } sub _rz { my ($__zz) = @_; my $__zw = 0; if ($__zz && exists $__zz->{'_ld'}) { for (my $__zx=0; $__zx < scalar @{ $__zz->{'_ld'} }; $__zx++) { my $__zy = $__zz->{'_ld'}->[$__zx]; if ((&authlib9_14_2::_ANP == $__zy->{'_pj'}) || (&authlib9_14_2::_ANQ == $__zy->{'_pj'})) { $__zw = 1; last; } } } return $__zw; } sub _sa { my ($__aaz, $__aba, $__abb, $__abc, $__abd, $__abe, $__abf) = @_; my $__aaa = ""; my $__aab = ""; if ($ciwlib9_14_2::_uc == 0) { if (!$ciwlib9_14_2::_ub) { if (exists $authlib9_14_2::_akn{"hid_test_mode"} && $__aaz == 1 && $ciwlib9_14_2::_tz eq "") { $__aba = 0; } if (authlib9_14_2::_aet()) { $__aaa .= authlib9_14_2::_zb(); $authlib9_14_2::_alc = 0; } $__aaa .= authlib9_14_2::_yi(0); $__aaa .= "<title>"; if (exists($authlib9_14_2::_akp->{'_ox'})) { $__aaa .= $authlib9_14_2::_akp->{'_ox'}; } $__aaa .= "</title>\n"; $__aaa .= authlib9_14_2::_ady(); $__aaa .= authlib9_14_2::_adz(); if (_rz($__abc)) { $__aaa .= "<script type=\"text/javascript\" src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/owl.carousel.min.js\"></script>"; } $__aaa .= authlib9_14_2::_aeb(); $__aaa .= "<script type=\"text/javascript\" src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/ssi_javascript9_14_2.js\"></script>\n"; $__aaa .= authlib9_14_2::_adx(); $__aaa .= authlib9_14_2::_aea(); if (_rz($__abc)) { $__aaa .= "\n<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/owl.carousel.min.css\">\n"; } $__aaa .= "\n<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/ssi_style9_14_2.css\">\n"; if (exists($authlib9_14_2::_akn{"hid_test_mode"})) { $__aaa .= "<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/ssi_testmode_style9_14_2.css\">\n"; if (!exists($authlib9_14_2::_akn{"hid_test_frame"})) { $__aaa .= "<script type=\"text/javascript\" src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/ssi_test_mode9_14_2.js\"></script>\n"; } } my $__aac = {}; my $__aad = ""; if (exists($authlib9_14_2::_akp->{'_od'})) { $__aaa .= "\n<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/sawtooth_style1/sawtooth_style1.css\">\n"; if (exists($authlib9_14_2::_akp->{'_kq'})) { my $__aae = "#" . $authlib9_14_2::_akp->{'_kq'}; my $__aaf = "#" . authlib9_14_2::_acu($authlib9_14_2::_akp->{'_kq'}, 12); _se($__aac, ".font_primary_color", "color: " . $__aae); _se($__aac, ".background_primary_color", "background-color: " . $__aae); _se($__aac, ".border_primary_color", "border-color: " . $__aae); _se($__aac, ".slider_control .ui-slider-handle", "border-color: " . $__aae); _se($__aac, ".fill_primary_color", "fill: " . $__aae); _se($__aac, ".stroke_primary_color", "stroke: " . $__aae); if (exists $authlib9_14_2::_akp->{'_fa'}) { _se($__aac, "#next_button .next_svg_rect:hover", "fill: " . $__aaf); } else { _se($__aac, "#next_button:hover", "background-color: " . $__aaf); } _se($__aac, "input:hover, input:focus, textarea:hover, textarea:focus, select:hover", "border: 1px solid " . $__aae); _se($__aac, ".cbc .task_select_button:hover, .cbc .dual_response_none_button:hover", "background-color: " . $__aae . "; border-color:" . $__aae); _se($__aac, ".cbc_concept.best .best_button, .cbc_concept.discrete.best .task_select_button, .dual_response_none_button.would_button.selected, .dual_response_none_button.would_not_button.selected, .custom_position_none.best .best_button", "background-color: " . $__aae . "; border-color:" . $__aae . "; color: #ffffff"); _se($__aac, ".nav_dot.best .nav_dot_circle", "fill: " . $__aae); _se($__aac, ".nav_dot.best .nav_dot_border", "stroke: " . $__aae); _se($__aac, ".acbc_screener .acbc_task_bottom_row td, .acbc_choicetask .acbc_task_bottom_row td, .acbc_calibration .acbc_task_bottom_row td", "border-top: 1px solid " . $__aae); } } elsif (exists($authlib9_14_2::_akp->{'_do'})) { $__aaa .= "\n<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $authlib9_14_2::_ahv{'_ur'} . $authlib9_14_2::_akp->{'_do'} . "/" . $authlib9_14_2::_akp->{'_do'} . ".css\">\n"; } if (exists $authlib9_14_2::_akp->{'_fy'}) { _se($__aac, ".indent", "margin-left: " . $authlib9_14_2::_akp->{'_fy'} . "px"); } if (exists $authlib9_14_2::_akp->{'_oe'}) { _se($__aac, ".submit_div", "text-align: " . $authlib9_14_2::_akp->{'_oe'}); } if (exists $authlib9_14_2::_akp->{'_eq'}) { _se($__aac, "body", "font-family: " . $authlib9_14_2::_akp->{'_eq'}); } if (exists $authlib9_14_2::_akp->{'_fm'}) { if (exists $authlib9_14_2::_akp->{'_fm'}->{'_et'}) { _se($__aac, ".page_header", _tk($authlib9_14_2::_akp->{'_fm'}, 0, 0)); if (exists $authlib9_14_2::_akp->{'_fm'}->{'_et'}->{'_m'}) { _se($__aac, ".page_header .header_text", _tl($authlib9_14_2::_akp->{'_fm'}->{'_et'}->{'_m'})); } } } if (exists $authlib9_14_2::_akp->{'_er'}) { if (exists $authlib9_14_2::_akp->{'_er'}->{'_et'}) { _se($__aac, ".page_footer", _tk($authlib9_14_2::_akp->{'_er'}, 0, 0)); } } if (exists $authlib9_14_2::_akp->{'_kx'}) { if (exists $authlib9_14_2::_akp->{'_kx'}->{'_et'}) { _se($__aac, ".header1", _tk($authlib9_14_2::_akp->{'_kx'}, 0, 0)); } } if (exists $authlib9_14_2::_akp->{'_ky'}) { if (exists $authlib9_14_2::_akp->{'_ky'}->{'_et'}) { _se($__aac, ".header2", _tk($authlib9_14_2::_akp->{'_ky'}, 0, 0)); } } if (exists $authlib9_14_2::_akp->{'_kz'}) { if (exists $authlib9_14_2::_akp->{'_kz'}->{'_et'}) { _se($__aac, ".question_text", _tk($authlib9_14_2::_akp->{'_kz'}, 0, 0)); } } if (exists $authlib9_14_2::_akp->{'_kw'}) { if (exists $authlib9_14_2::_akp->{'_kw'}->{'_et'}) { _se($__aac, ".footer", _tk($authlib9_14_2::_akp->{'_kw'}, 0, 0)); } } if (exists $authlib9_14_2::_akp->{'_lc'}) { _se($__aac, ".question", "width:" . $authlib9_14_2::_akp->{'_lc'} . "px"); } if (exists $authlib9_14_2::_akp->{'_ku'}) { _se($__aac, ".question", _tl($authlib9_14_2::_akp->{'_ku'})); } if (exists $authlib9_14_2::_akp->{'_lb'}) { my $__aag = $authlib9_14_2::_akp->{'_lb'}; my $__aah = int($__aag / 2); my $__aai = $__aag - $__aah; _se($__aac, ".question", "margin-top:" . $__aah . "px"); _se($__aac, ".question", "margin-bottom:" . $__aai . "px"); } if (exists $authlib9_14_2::_akp->{'_kv'}) { _se($__aac, ".question", "background-color: #" . $authlib9_14_2::_akp->{'_kv'}); } if (exists $authlib9_14_2::_akp->{'_jk'}) { _se($__aac, ".page", "background-color: #" . $authlib9_14_2::_akp->{'_jk'}); } if (exists $authlib9_14_2::_akp->{'_na'}) { _se($__aac, "body", "background-color: #" . $authlib9_14_2::_akp->{'_na'}); } if (exists $authlib9_14_2::_akp->{'_q'}) { if (exists $authlib9_14_2::_akp->{'_q'}->{'_ay'}) { _se($__aac, ".alt_color1", "background-color: #" . $authlib9_14_2::_akp->{'_q'}->{'_ay'}); } if (exists $authlib9_14_2::_akp->{'_q'}->{'_az'}) { _se($__aac, ".alt_color2", "background-color: #" . $authlib9_14_2::_akp->{'_q'}->{'_az'}); } } if (exists $authlib9_14_2::_akp->{'_or'}) { _se($__aac, "body", _tk($authlib9_14_2::_akp->{'_or'}, 0, 0)); } if (exists $authlib9_14_2::_akq->{'_ej'}) { _se($__aac, ".error_messages, .question_error_box .question_errors", _tk($authlib9_14_2::_akq->{'_ej'}, 0, 0)); my $__aaj = $authlib9_14_2::_akq->{'_ej'}->{'_et'}; if (exists $__aaj->{'_cm'}) { _se($__aac, ".error_quest_highlight, .error_var_highlight, .error_var_highlight_left, .error_var_highlight_center, .error_var_highlight_right, .error_var_highlight_top, .error_var_highlight_middle, .error_var_highlight_bottom", "border-color: #" . $__aaj->{'_cm'} . " !important"); } } if (exists $authlib9_14_2::_akp->{'_ex'}) { if ($authlib9_14_2::_amg) { _se($__aac, ".checkbox input, .radiobox input", "visibility: hidden;"); } if (exists $authlib9_14_2::_akp->{'_ce'}) { _se($__aac, ".checkbox", "background:url(\"" . $authlib9_14_2::_akp->{'_ce'} . "\") no-repeat center center"); _se($__aac, ".checkbox .checkbox_svg", "display: none;"); } if (exists $authlib9_14_2::_akp->{'_cd'}) { _se($__aac, ".checkboxselected", "background:url(\"" . $authlib9_14_2::_akp->{'_cd'} . "\") no-repeat center center"); _se($__aac, ".checkboxselected .checkbox_svg", "display: none;"); } if (exists $authlib9_14_2::_akp->{'_li'}) { _se($__aac, ".radiobox", "background:url(\"" . $authlib9_14_2::_akp->{'_li'} . "\") no-repeat center center"); _se($__aac, ".radiobox .radio_svg", "display: none;"); } if (exists $authlib9_14_2::_akp->{'_lh'}) { _se($__aac, ".radioboxselected", "background:url(\"" . $authlib9_14_2::_akp->{'_lh'} . "\") no-repeat center center"); _se($__aac, ".radioboxselected .radio_svg", "display: none;"); } my $__aak = ".acbc_screener .radiobox, .acbc_screener .radioboxselected, .acbc_choicetask .radiobox, .acbc_choicetask .radioboxselected, .acbc_calibration .radiobox, .acbc_calibration .radioboxselected"; if (exists $authlib9_14_2::_akp->{'_ez'}) { _se($__aac, ".checkbox, .checkboxselected, .radiobox, .radioboxselected, " . $__aak, "width:" . $authlib9_14_2::_akp->{'_ez'} . "px"); } if (exists $authlib9_14_2::_akp->{'_ey'}) { _se($__aac, ".checkbox, .checkboxselected, .radiobox, .radioboxselected, " . $__aak, "height:" . $authlib9_14_2::_akp->{'_ey'} . "px"); } } if (exists $authlib9_14_2::_akp->{'_ij'}) { _se($__aac, ".graphical_next_button", "background:url(\"" . $authlib9_14_2::_akp->{'_ij'} . "\") no-repeat center center"); } if (exists $authlib9_14_2::_akp->{'_fa'} && exists($authlib9_14_2::_akp->{'_od'}) && !exists $authlib9_14_2::_akp->{'_ij'}) { _se($__aac, ".graphical_next_button", "width: auto; background: none;"); } if (exists $authlib9_14_2::_akp->{'_kd'}) { _se($__aac, ".graphical_previous_button", "background:url(\"" . $authlib9_14_2::_akp->{'_kd'} . "\") no-repeat center center"); } if (exists $authlib9_14_2::_akp->{'_fa'} && exists($authlib9_14_2::_akp->{'_od'}) && !exists $authlib9_14_2::_akp->{'_kd'}) { _se($__aac, ".graphical_previous_button", "width: auto; background: none;"); } if (exists $authlib9_14_2::_akp->{'_fc'}) { _se($__aac, ".graphical_next_button, .graphical_previous_button", "width: " . $authlib9_14_2::_akp->{'_fc'} . "px"); } if (exists $authlib9_14_2::_akp->{'_fb'}) { _se($__aac, ".graphical_next_button, .graphical_previous_button", "height: " . $authlib9_14_2::_akp->{'_fb'} . "px"); } if (exists $authlib9_14_2::_akp->{'_jo'}) { _se($__aac, ".page", "width: " . $authlib9_14_2::_akp->{'_jo'} . "px"); _se($__aac, ".page", "max-width: " . $authlib9_14_2::_akp->{'_jo'} . "px"); } if (exists $authlib9_14_2::_akp->{'_jl'}) { _se($__aac, ".page", "border: " . $authlib9_14_2::_akp->{'_jl'} . "px solid black"); } if (exists $authlib9_14_2::_akp->{'_jj'}) { _se($__aac, ".page", _tl($authlib9_14_2::_akp->{'_jj'})); } if (exists $authlib9_14_2::_akp->{'_ft'}) { _se($__aac, ".highlight, .highlight td", "background-color: #" . $authlib9_14_2::_akp->{'_ft'} . " !important"); } if (exists $authlib9_14_2::_akp->{'_kr'}) { my $__aal = $authlib9_14_2::_akp->{'_kr'}; if (exists $__aal->{'_px'}) { _se($__aac, ".progress_bar", "width: " . $__aal->{'_px'} . "px"); } if (exists $__aal->{'_m'}) { _se($__aac, ".progress_bar", _tl($__aal->{'_m'})); } if (exists $__aal->{'_ao'}) { _se($__aac, ".progress_bar_outer", "background-color: #" . $__aal->{'_ao'}); } if (exists $__aal->{'_ap'}) { _se($__aac, ".progress_bar_inner", "background-color: #" . $__aal->{'_ap'}); } if (exists $__aal->{'_ax'}) { _se($__aac, ".progress_bar", "background-color: #" . $__aal->{'_ax'}); } if (exists $__aal->{'_os'}) { _se($__aac, ".progress_bar", "color: #" . $__aal->{'_os'}); } } foreach my $__aam (sort keys %{$__aac}) { $__aad .= "\n" . $__aam . "\n{\n"; foreach my $__aan (@{$__aac->{$__aam}}) { if ($__aan !~ m/;$/) { $__aan .= ";"; } $__aad .= " " . $__aan . "\n"; } $__aad .= "}\n"; } $__aad .= $__abe; if ($__aad) { $__aaa .= "<style type=\"text/css\">\n"; $__aaa .= $__aad; $__aaa .= "\n</style>"; } if (exists($authlib9_14_2::_akp->{'_ew'})) { $__aaa .= $authlib9_14_2::_akp->{'_ew'}; } if ($__abc) { if (exists($__abc->{'_fl'})) { $__aaa .= $__abc->{'_fl'}; } if (exists($__abc->{'_gq'})) { $__aaa .= "\n<script type=\"text/javascript\">\n"; my $__aao = 0; my $__aap = @{$__abc->{'_gq'}}; my $__aaq = 0; for ($__aao = 0; $__aao < $__aap; $__aao++) { $__aaq = $__abc->{'_gq'}->[$__aao]; $__aaa .= "function " . $__aaq->{'_us'} . "{\n"; $__aaa .= "\t var strErrorMessage = \"\";\n"; $__aaa .= "\t var strVarName = \"" . $__aaq->{'_ut'} . "\";\n"; $__aaa .= "\t var strQuestName = \"" . $__aaq->{'_ut'} . "\";\n"; $__aaa .= "\t " . $__aaq->{'_ck'}; $__aaa .= "\n\tSSI_UpdateQuestionErrHash(strVarName, strQuestName, strErrorMessage);\n"; $__aaa .= "\n}\n"; } $__aaa .= "\n</script>\n"; } } $__aaa .= "\n</head>\n"; $__aaa .= "<body"; if ($authlib9_14_2::_aku) { $__aaa .= " id=\"demo_mode\""; } my %__aar = (); if ($authlib9_14_2::_amg == &authlib9_14_2::_AOY || $authlib9_14_2::_amg == &authlib9_14_2::_AOZ) { $__aar{"print_study"} = 1; } if (exists($authlib9_14_2::_akn{"hid_test_mode"})) { if (exists $ciwlib9_14_2::_tx{'print_study_mode'}) { $__aar{"print_study"} = 1; } if (exists $ciwlib9_14_2::_tx{'show_names'}) { $__aar{"show_names"} = 1; } if (exists $ciwlib9_14_2::_tx{'show_vars'}) { $__aar{"show_vars"} = 1; } } elsif ($__abf) { $__aar{"c2_preview"} = 1; } my @__aas = keys %__aar; if (@__aas) { $__aaa .= " class=\"" . join(" ", @__aas) . "\""; } $__aaa .= ">\n"; $ciwlib9_14_2::_ub = 1; } if (exists($authlib9_14_2::_akn{"hid_test_mode"})) { if (!exists($authlib9_14_2::_akn{"hid_test_frame"}) && authlib9_14_2::_aet()) { $__aaa .= _tn(); } } $__aaa .= "<form name=\"mainform\""; if ($__abb) { $__aaa .= " onSubmit=\"SSI_SubmitMe(); return false;\""; } $__aaa .= " method=\"post\""; $__aaa .= " action=\"ciwweb" . $authlib9_14_2::_aib; if ($__aba > 0 && authlib9_14_2::_aet() && $authlib9_14_2::_amg != &authlib9_14_2::_AOX) { $__aab = _sb(); $__aaa .= "?hid_s=" . $__aab; } $__aaa .= "\">\n"; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__aaa .= "<input type=\"hidden\" name=\"hid_test_mode\" value=\"" . $authlib9_14_2::_akn{"hid_test_mode"} . "\">\n"; my $__aat = ""; if (exists $authlib9_14_2::_akn{"hid_test_mode_settings"}) { $__aat = $authlib9_14_2::_akn{"hid_test_mode_settings"}; if ($__aaz > 1 && $__aat =~ m/^([^,]+)(,.*?)$/) { $__aat = $2; } } if (exists $authlib9_14_2::_akn{"hid_test_frame"}) { $__aaa .= "<input type=\"hidden\" name=\"hid_test_frame\" value=\"" . $authlib9_14_2::_akn{"hid_test_frame"} . "\">\n"; } $__aaa .= "<input type=\"hidden\" name=\"hid_test_mode_settings\" id=\"hid_test_mode_settings\" value=\"" . $__aat . "\">\n"; if (exists $authlib9_14_2::_akn{"hid_test_db"}) { $__aaa .= "<input type=\"hidden\" name=\"hid_test_db\" value=\"1\">\n"; } } $__aaa .= "\n<div class=\"page\" id=\"page\" role=\"main\">\n"; if ($authlib9_14_2::_aku && !$authlib9_14_2::_amg) { $__aaa .= authlib9_14_2::_yj(0); } $__aaa .= "<input type=\"hidden\" name=\"hid_backup\" value=\"". $authlib9_14_2::_akh . ","; if (!$authlib9_14_2::_amg) { if ($__aaz > 1) { $__aaa .= $__aba . "," . $authlib9_14_2::_akn{"hid_checksum"}; } else { $__aaa .= ","; } } $__aaa .= "," . $__aaz . "," . $__abb . "\">\n"; $__aaa .= "<input type=\"hidden\" name=\"hid_studyname\" value=\"" . htmlentity::encode($authlib9_14_2::_akh) . "\">\n"; if ($__aba > 0 && authlib9_14_2::_aet()) { $__aaa .= "<input type=\"hidden\" name=\"hid_respnum\" value=\"" . $__aba . "," . $authlib9_14_2::_akn{"hid_checksum"} . "\">\n"; $__aaa .= "<input type=\"hidden\" name=\"hid_s\" id=\"hid_s\" value=\"" . $__aab . "\">\n"; } $__aaa .= "<input type=\"hidden\" id=\"hid_pagenum\" name=\"hid_pagenum\" value=\"" . $__aaz . "\">\n"; $__aaa .= "<input type=\"hidden\" name=\"hid_javascript\" value=\""; if ($authlib9_14_2::_amg) { $__aaa .= "1"; $authlib9_14_2::_akn{"hid_javascript"} = 1; } else { $__aaa .= "0"; } $__aaa .= "\">\n"; $__aaa .= "<input type=\"hidden\" name=\"hid_previous\" value=\"0\">\n"; $__aaa .= "<input type=\"hidden\" id=\"hid_screenwidth\" name=\"hid_screenwidth\" value=\"0\">\n"; if (exists $authlib9_14_2::_akn{"hid_preview"}) { $__aaa .= "<input type=\"hidden\" name=\"hid_preview\" id=\"hid_preview\" value=\"" . $authlib9_14_2::_akn{"hid_preview"} . "\">\n"; } if ($authlib9_14_2::_ajg) { $__aaa .= "<input type=\"hidden\" name=\"hid_loadtest_mode\" value=\"" . $authlib9_14_2::_ajg . "\">\n"; $__aaa .= "<!--LoadTestMode: <sysglobal><numquests>" . @{$authlib9_14_2::_ako} . "</numquests>"; if ($authlib9_14_2::_akm->{"close_survey"} == 1) { $__aaa .= "<closed>true</closed>"; } $__aaa .= "</sysglobal>-->\n"; } if (exists $authlib9_14_2::_akn{"hid_Random_ACARAT"}) { $__aaa .= "\n<input type=\"hidden\" name=\"hid_Random_ACARAT\" value=\"" . $authlib9_14_2::_akn{"hid_Random_ACARAT"} . "\">\n"; } if (exists $authlib9_14_2::_akn{"hid_Random_ACAIMP"}) { $__aaa .= "\n<input type=\"hidden\" name=\"hid_Random_ACAIMP\" value=\"" . $authlib9_14_2::_akn{"hid_Random_ACAIMP"} . "\">\n"; } if ($__aaz < 2) { $__aaa .= "\n<input type=\"hidden\" name=\"hid_show_prev\" value=\"1\">\n"; } if ((exists $authlib9_14_2::_akn{"hid_pagenum"}) && ($__aaz == 1) && !(exists $authlib9_14_2::_akn{"hid_test_mode"})) { if ($authlib9_14_2::_aky) { if (exists $authlib9_14_2::_aky->{'_ju'}) { my $__aau = $authlib9_14_2::_aky->{'_ju'}; my $__aav = 0; my $__aaw = ""; my $__aax = ""; foreach $__aav (@{$__aau->{'_jt'}}) { $__aax = ""; $__aaw = $__aav->{'_if'}; if (exists $authlib9_14_2::_ahr{uc($__aaw)}) { $__aax = authlib9_14_2::_zo($authlib9_14_2::_ahr{uc($__aaw)}); } $__aaa .= "<input type=\"hidden\" name=\"" . $__aaw . "\" value=\"" . $__aax ."\">\n"; } } } } if (exists $authlib9_14_2::_akp->{'_nt'} && (!$authlib9_14_2::_amg || ($__aaz == 0))) { my $__aay = $authlib9_14_2::_akp->{'_nt'}; if (exists $__aay->{'_ev'}) { $__aaa .= "<div class=\"simple_browser_close\">\n"; $__aaa .= _ti($__aay); $__aaa .= "</div>\n"; } } if ($authlib9_14_2::_amg != &authlib9_14_2::_AOX) { $__aaa .= "<div class=\"page_header font_primary_color\">\n"; if (exists($authlib9_14_2::_akp->{'_hl'})) { $__aaa .= "<div class=\"header_logo\"><img src=\"" . $authlib9_14_2::_akp->{'_hl'} . "\"></div>\n"; } if (exists($authlib9_14_2::_akp->{'_fm'})) { $__aaa .= "<div class=\"header_text\">" . $authlib9_14_2::_akp->{'_fm'}->{'_op'} . "</div>"; } $__aaa .= "</div>\n"; if (exists($authlib9_14_2::_akp->{'_kr'})) { my $__aal = $authlib9_14_2::_akp->{'_kr'}; if (($__aal->{'_ps'} eq "top") && ($__aaz > 0)) { $__aaa .= _te($__aal); } } } $ciwlib9_14_2::_uc = 1; $__aaa = authlib9_14_2::_zw($__aaa, 0); if (!$authlib9_14_2::_amg) { $__aaa .= "<div id=\"error_box\" class=\"page_error error_messages HideElement\" role=\"alert\"></div>\n"; $authlib9_14_2::_alc = 1; } $__aaa .= "<div id=\"alert_dialog\" class=\"dialog\"></div>"; } return $__aaa; } sub _sb { my $__abg = "INSERT INTO `" . $authlib9_14_2::_akj . "_url_restore` (`timestamp`, `fields`) VALUES(?, ?)"; my $__abh = 0; my $__abi = 0; my $__abj = 0; my $__abk = time(); my $__abl = ""; my $__abm = $authlib9_14_2::_akn{"hid_respnum"}; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__abh = $authlib9_14_2::_akn{"hid_test_mode"}; } if (exists $authlib9_14_2::_akn{"hid_checksum"}) { $__abj = $authlib9_14_2::_akn{"hid_checksum"}; } $__abl = "{\"resp_num\" => \"$__abm\", \"checksum\" => \"$__abj\", \"test_mode\" => \"$__abh\", \"previous\" => \"$authlib9_14_2::_ajq\", \"study_name\" => \"" . $authlib9_14_2::_akh . "\""; if (exists $authlib9_14_2::_akn{"hid_preview"}) { $__abl .= ",\"preview\" => \"" . $authlib9_14_2::_akn{"hid_preview"} . "\""; } $__abl .= "}"; eval { my $__abn = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__abg, 0)); $__abn->execute($__abk, $__abl); }; if ($@) { authlib9_14_2::_zq(298, "Database error.", "Database error. Cannot insert url_restore row.", $@); } my $__abo = authlib9_14_2::_wr($authlib9_14_2::_akj . "_url_restore", "id"); return authlib9_14_2::_xa($__abo, $__abj, $__abh, $__abk); } sub _sc { my ($__acd, $__ace) = @_; my $__abp = ""; my $__abq = ""; my $__abr = ""; my $__abs = 0; my $__abt = 0; my $__abu = 0; my $__abv = 0; my $__abw = 0; my $__abx = 0; my $__aby = 0; if (exists $authlib9_14_2::_akn{"hid_s"}) { my $__abz = $authlib9_14_2::_akn{"hid_s"}; ($__abp, $__abs, $__abq, $__abt, $__abu, $__abv, $__abw, $__abx, $__aby) = authlib9_14_2::_xc($__abz); } if ($__abs) { my $__aca = "{\"resp_num\" => " . $__acd . ", \"last_question\" => \"" . $__ace . "\","; if (exists $authlib9_14_2::_akn{"hid_test_mode_settings"}) { $__aca .= " \"test_mode_settings\" => \"" . $authlib9_14_2::_akn{"hid_test_mode_settings"} . "\","; } if ($__aby) { $__aca .= " \"test_db\" => \"" . $__aby . "\","; } if (exists $authlib9_14_2::_akn{"hid_preview"}) { $__aca .= " \"preview\" => \"" . $authlib9_14_2::_akn{"hid_preview"} . "\","; } $__aca .= " \"test_mode\" => \"$__abu\", \"previous\" => \"$__abx\", \"checksum\" => \"$__abt\", \"study_name\" => \"$authlib9_14_2::_akh\""; $__aca .= "}"; eval { my $__acb = "UPDATE `" . $authlib9_14_2::_akj . "_url_restore` SET `fields` = ? WHERE `id` = " . $__abs; my $__acc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__acb, 0)); $__acc->execute($__aca); $authlib9_14_2::_ake->commit(); }; if ($@) { authlib9_14_2::_zq(299, "Database error.", "Cannot update url_restore table.", $@); } } } sub _sd { my ($__aci) = @_; my $__acf = "SELECT `timestamp`, `fields` FROM `" . $authlib9_14_2::_akj . "_url_restore` WHERE `id` = " . int($__aci); my $__acg = 0; my $__ach = 0; eval { $__acg = $authlib9_14_2::_ake->selectrow_hashref(authlib9_14_2::_wn($__acf, 0)); }; if ($@) { authlib9_14_2::_zq(300, "Link error.", "Link error. A link used to read the url_restore table failed.", $@); } if ($__acg) { $__ach = eval($__acg->{"fields"}); if ($@) { authlib9_14_2::_zq(301, "", "Evaluating url_restore data.", $@); } $__ach->{"timestamp"} = $__acg->{"timestamp"}; } elsif (!$authlib9_14_2::_amg) { authlib9_14_2::_zq(365, "Link error.", "Link error. The ID " . $__aci . " could not be found in the url_restore table.", $@); } return $__ach; } sub _se { my ($__acj, $__ack, $__acl) = @_; if (!exists $__acj->{$__ack}) { $__acj->{$__ack} = []; } push(@{$__acj->{$__ack}}, $__acl); } sub _sf { my ($__acr, $__acs) = @_; my $__acm = ""; my $__acn = 0; if ($authlib9_14_2::_amg != &authlib9_14_2::_AOX) { if ($authlib9_14_2::_amg != &authlib9_14_2::_AOY) { if (exists($authlib9_14_2::_akp->{'_kr'})) { $__acn = $authlib9_14_2::_akp->{'_kr'}; if (($__acn->{'_ps'} eq "bottom") && ($__acr > 0)) { $__acm .= _te($__acn); } } } $__acm .= "<div class=\"page_footer\">\n"; if (exists($authlib9_14_2::_akp->{'_er'})) { $__acm .= $authlib9_14_2::_akp->{'_er'}->{'_op'}; } $__acm .= "\n</div>\n"; } if ($authlib9_14_2::_akn{"hid_javascript"} == 1) { $__acm .= "\n\n<script type=\"text/javascript\">\n"; $__acm .= "function SSI_Initialize(){\n"; $__acm .= "SSI_PageInitialize();\n"; $__acm .= "SSI_InitializeErrors();\n"; if (!$authlib9_14_2::_amg || $authlib9_14_2::_amg == &authlib9_14_2::_AOV) { $__acm .= "SSI_SubmitInitialize();\n"; } if (exists $authlib9_14_2::_akp->{'_ex'}) { $__acm .= "GlobalGraphicalSelect = true;\n"; } $__acm .= "SSI_ClickableInitialize("; if (exists $authlib9_14_2::_akp->{'_fu'}) { $__acm .= "true"; } else { $__acm .= "false"; } $__acm .= ");\n"; if ($authlib9_14_2::_aji) { $__acm .= $authlib9_14_2::_aji; } $__acm .= "SSI_SetupToolTips();\n"; if ($__acr > 1 && exists $authlib9_14_2::_akp->{'_il'}) { my $__aco = 1; if (exists($ENV{'HTTP_USER_AGENT'})) { my $__acp = $ENV{'HTTP_USER_AGENT'}; if ($__acp =~ m/(CriOS|iPod|iPhone|iPad)/i) { $__aco = 0; } } if ($__aco) { $__acm .= "SSI_RemoveBackButtonShell();\n\n"; } } $__acm .= "}\n\n"; $__acm .= "GlobalDocumentReadyArray.push(function(){SSI_Initialize();})"; $__acm .= "\n\n</script>\n\n"; } my $__acq = 1; if ($authlib9_14_2::_amg == &authlib9_14_2::_AOY || ($authlib9_14_2::_amg == &authlib9_14_2::_AOZ && (exists $authlib9_14_2::_akn{"hid_print_study_html"}))) { $__acq = 0; if ($__acr == @{$authlib9_14_2::_ako}) { $__acq = 1; } else { $__acm .= "</div>\n"; } } if ($__acq) { $__acm .= "</div>\n"; $__acm .= "</form>\n"; $__acm .= "<div id=\"submit_overlay\"><div id=\"submit_progress_bar\"><img src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/loading.gif\" border=\"0\" alt=\"Loading...\"></div></div>"; $__acm .= "</body>\n"; $__acm .= "</html>\n"; } $__acm = authlib9_14_2::_zw($__acm, 0); return $__acm; } sub _sg { my ($__ada, $__adb, $__adc, $__add) = @_; my $__act = ""; my $__acu = 0; my $__acv = ""; my $__acw = ""; my $__acx = ""; my $__acy = ""; my $__acz = ""; $__act .= "\n<div class=\"submit_div\">\n"; if (exists $authlib9_14_2::_akp->{'_fa'} && $__add eq "") { $__acw = "graphical_next_button"; $__acx = "graphical_previous_button"; } else { $__acw = "text_nav_button"; $__acx = "text_nav_button"; if ($__adc && $__add) { $authlib9_14_2::_akp->{'_ik'} = $__add; } if (exists $authlib9_14_2::_akp->{'_ik'}) { $__acy = authlib9_14_2::_zw($authlib9_14_2::_akp->{'_ik'}, 0); } if (exists $authlib9_14_2::_akp->{'_ke'}) { $__acz = authlib9_14_2::_zw($authlib9_14_2::_akp->{'_ke'}, 0); } } if (exists $authlib9_14_2::_akp->{'_kc'} && authlib9_14_2::_ya($__ada) && !$__adc) { $__act .= "<div id=\"previous_button\" role=\"button\" class=\"navigation_button " . $__acx . "\">"; if (exists $authlib9_14_2::_akp->{'_fa'} && exists($authlib9_14_2::_akp->{'_od'}) && !exists $authlib9_14_2::_akp->{'_kd'}) { $__act .= "<svg width=\"111\" height=\"36\" viewBox=\"0 0 111 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n"; $__act .= "<rect class=\"previous_svg_rect\" width=\"111\" height=\"36\" rx=\"4\" fill=\"#979797\"/>\n"; $__act .= "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M39.3217 19.2605C38.8928 18.8645 38.8928 18.1868 39.3217 17.7909L47.8481 9.9204C48.2539 9.54579 48.8866 9.5711 49.2612 9.97692L50.6177 11.4465C50.9923 11.8523 50.967 12.485 50.5612 12.8596L46.5896 16.5257L68.4743 16.5257C69.0266 16.5257 69.4743 16.9734 69.4743 17.5257L69.4743 19.5257C69.4743 20.078 69.0266 20.5257 68.4743 20.5257L46.5896 20.5257L50.5612 24.1917C50.967 24.5664 50.9923 25.199 50.6177 25.6048L49.2612 27.0744C48.8866 27.4803 48.2539 27.5056 47.8481 27.131L39.3217 19.2605Z\" fill=\"white\"/>\n"; $__act .= "</svg>\n"; } if (!exists $authlib9_14_2::_akp->{'_fa'}) { $__act .= $__acz; } $__act .= "</div>"; } $__act .= "<div id=\"next_button\" role=\"button\" class=\"navigation_button " . $__acw; if (!exists $authlib9_14_2::_akp->{'_fa'}) { $__act .= " background_primary_color"; } if ($__adb) { $__act .= " launch_simple_browser\""; $__act .= " data-url=\"" . _tf() . "\""; $__act .= " data-settings=\"" . _tg() . "\""; } else { $__act .= "\""; } $__act .= ">"; if (exists $authlib9_14_2::_akp->{'_fa'} && exists($authlib9_14_2::_akp->{'_od'}) && !exists $authlib9_14_2::_akp->{'_ij'}) { $__act .= "<svg width=\"112\" height=\"36\" viewBox=\"0 0 112 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n"; $__act .= "<rect class=\"fill_primary_color next_svg_rect\" width=\"112\" height=\"36\" rx=\"4\" fill=\"#2796C6\"/>\n"; $__act .= "<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M71.6783 17.7395C72.1072 18.1355 72.1072 18.8132 71.6783 19.2091L63.1519 27.0796C62.7461 27.4542 62.1134 27.4289 61.7388 27.0231L60.3823 25.5535C60.0077 25.1477 60.033 24.515 60.4388 24.1404L64.4104 20.4743L42.5257 20.4743C41.9734 20.4743 41.5257 20.0266 41.5257 19.4743L41.5257 17.4743C41.5257 16.922 41.9734 16.4743 42.5257 16.4743L64.4104 16.4743L60.4388 12.8083C60.033 12.4336 60.0077 11.801 60.3823 11.3952L61.7388 9.92556C62.1134 9.51974 62.7461 9.49443 63.1519 9.86904L71.6783 17.7395Z\" fill=\"white\"/>\n"; $__act .= "</svg>\n"; } if (!exists $authlib9_14_2::_akp->{'_fa'}) { $__act .= $__acy; } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__act .= "<div id=\"test_mode_submit_msg\" class=\"new_tooltip\">Submit this page to apply the options set above.</div>"; } $__act .= "</div>"; $__act .= "</div>"; return $__act; } sub _sh { print "<a href=\"https://www.sawtoothsoftware.com\" target=\"_blank\" id=\"sawtooth_logo\">Powered by Sawtooth Software</a>\n"; } sub _si { my ($__adf, $__adg, $__adh, $__adi) = @_; my $__ade = ""; $__ade .= "\n\n<script type=\"text/javascript\">\n"; $__ade .= "function SSI_Totals_" . $__adf . "(){\n"; $__ade .= "var TotalIndexArray = [" . join(", ", @{$__adg}) . "];\n"; $__ade .= "var QArray = [\"" . join("\", \"", sort keys %{$__adh}) . "\"];\n"; $__ade .= "SSI_Totals_EventSetup(TotalIndexArray, QArray, \"" . $__adi . "\");\n"; $__ade .= "}\n\n"; ciwlib9_14_2::_sj("SSI_Totals_" . $__adf . "();\n\n"); $__ade .= "</script>\n"; return $__ade; } sub _sj { my ($__adj) = @_; if ($authlib9_14_2::_ajj) { $authlib9_14_2::_aji .= $__adj; } } sub _sk { my ($__adl, $__adm) = @_; my $__adk = ""; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__adk .= _td($__adl, 0, 1); } $__adk .= "<input name=\"" . $__adl . "\" type=\"text\" size=\"" . $__adm . "\" class=\"total text_input\" id=\"" . $__adl . "\" readonly>"; return $__adk; } sub _sl { my ($__adp, $__adq, $__adr, $__ads) = @_; my $__adn = ""; $__adn .= "<option value=\"\">"; my $__ado = 0; if (exists($__adp->{'_dt'})) { $__adn .= $__adp->{'_dt'}; } $__adn .= "</option>\n"; for ($__ado = 1; $__ado <= $__adr; $__ado++) { $__adn .= "<option value=\"" . $__ado . "\""; if ($__adq == $__ado) { $__adn .= " selected"; } $__adn .= " id=\"" . $__ads . "_" . $__ado . "\">" . $__ado . "</option>\n"; } return $__adn; } sub _sm { my ($__adz, $__aea) = @_; my $__adt = ""; if ($__aea =~ m/^(.*?)\.(.*?)$/o) { $__aea = $1; $__adt = $2; } if ($__aea ne "" && exists($authlib9_14_2::_ahp{$__aea})) { my $__adu = $authlib9_14_2::_ahp{$__aea}; my $__adv = $__adu->{'_ji'}; my $__adw = $authlib9_14_2::_ako->[$__adv - 1]; _sn($__adw, $__adt, $__adv, $__aea); if (exists $__adw->{'_jn'}) { if (!exists($ciwlib9_14_2::_tx{'remove_rand'})) { if (_rg($__adw->{'_jn'}, $__adz) == 1) { $authlib9_14_2::_akn{"hid_page_rand"} =~ s/^(.*?,)?$__adv,(.*?)/$2/; } } } } else { $__aea = ""; } my $__adx = 0; my @__ady = @{authlib9_14_2::_xy($__adz)}; if (@__ady > 0) { $__adx = $__ady[-1]->{"hop"}; } $__adx++; $authlib9_14_2::_akn{"sys_next_hop"} = $__adx; return $__aea; } sub _sn { my ($__aek, $__ael, $__aem, $__aen) = @_; if (exists $__aek->{'_hm'} && $__ael) { authlib9_14_2::_adr(); my $__aeb = "." . $__ael; if ($__aeb =~ m/(.*?)\.\d+$/) { $__aeb = $1; } $authlib9_14_2::_akn{"hid_loops_restart_dot_notation"} = $__aeb; $authlib9_14_2::_akn{"hid_loops_restart_page"} = $__aem; my @__aec = (); if ($__ael =~ m/\./) { @__aec = split(/\./, $__ael); } else { push @__aec, $__ael; } my $__aed = ""; my $__aee = 0; my $__aef = 0; my $__aeg = 0; my $__aeh = 0; my @__aei = reverse @{$__aek->{'_hm'}}; foreach my $__aej (@__aei) { $__aef = shift(@__aec); $__aee = authlib9_14_2::_acy($authlib9_14_2::_ame->{$__aej}->{'_hj'}); $__aeh = 0; if ($__aee && @{$__aee}) { foreach $__aeg (@{$__aee}) { $__aeh++; if ($__aeg->{'_pt'} == $__aef) { last; } } } if ($__aeh) { if ($__aed) { $__aed = $__aej . "," . $__aeh . ";" . $__aed; } else { $__aed = $__aej . "," . $__aeh } $authlib9_14_2::_akn{"hid_loops"} = $__aed; } else { if (exists $authlib9_14_2::_akn{"hid_test_mode"} || exists $authlib9_14_2::_akn{"hid_test_mode_settings"}) { authlib9_14_2::_zt("Question <b>" . $__aen . "</b> requires a list that is not available."); } else { authlib9_14_2::_zq(251, "Loop Error.", "Loop index out of range.", ""); } } } } } sub _so { my ($__aep) = @_; my $__aeo = ""; foreach $__aeo (sort keys %authlib9_14_2::_ahp) { if (uc($__aep) eq uc($__aeo)) { $__aep = $__aeo; last; } } return $__aep; } sub _sp { my ($__aew, $__aex, $__aey, $__aez, $__afa) = @_; my $__aeq = 0; my $__aer = 0; my $__aes = 0; my $__aet = 0; my $__aeu = 0; my $__aev = 0; for ($__aet = 0; $__aet < @{$__aew->{'_la'}}; $__aet++) { $__aeq = $__aew->{'_la'}->[$__aet]; if (($__aeq->[0] <= $__aex + 1) && ($__aeq->[1] >= $__aex + 1)) { $__aex = $__aeq->[0] - 1; } $__aev = ($__afa * 73) + $__aet + 1; if ($__aet == 0) { $__aes = authlib9_14_2::_acm($__aey, $__aez, $__aev, $__aeq->[0], $__aeq->[1]); } else { $__aer = authlib9_14_2::_acm($__aey, $__aez, $__aev, $__aeq->[0], $__aeq->[1]); for ($__aeu = ($__aeq->[0] - 1); $__aeu <= ($__aeq->[1] - 1); $__aeu++) { $__aes->[$__aeu] = $__aer->[$__aeu]; } } } return ($__aes, $__aex); } sub _sq { my ($__afc) = @_; my $__afb = 0; $__afb = authlib9_14_2::_zx($__afc, "skip logic"); if ($__afb) { return 1; } else { return 0; } } sub _sr { my ($__afg) = @_; my $__afd = 0; my $__afe = ""; my $__aff = 0; foreach $__aff (@{$__afg}) { foreach $__afd (@{$__aff}) { if (_sq($__afd->{'_hk'})) { $__afe = $__afd->{'_dw'}; last; } } if ($__afe) { last; } } return $__afe; } sub _ss { my ($__afj, $__afk) = @_; my $__afh = 0; if ((exists $authlib9_14_2::_akn{$__afk}) && (defined $authlib9_14_2::_akn{$__afk})) { my $__afi = $authlib9_14_2::_akn{$__afk}; if ($__afi == $__afj) { $__afh = 1; } else { $__afh = 0; } } return $__afh; } sub _st { my ($__aft, $__afu, $__afv, $__afw, $__afx, $__afy, $__afz) = @_; my $__afl = 0; my $__afm = ""; my $__afn = 0; my $__afo = 0; for ($__afl = 0; $__afl < @{$__afu}; $__afl++) { $__afo = $__afu->[$__afl]; $__afn = ref($__afo); if ($__afn eq "RadioVar") { $__afm = "SSI_RadCheck(\"" . $__afo->{'_if'} . "\",\"" . $__aft . "\",\"" . ciwlib9_14_2::_sx($__afo->{'_ek'}) . "\", " . $__afx; if (exists($__afo->{'_ml'})) { $__afm = $__afm . ", true)"; } else { $__afm = $__afm . ", false)"; } push @{$__afw}, ($__afm); $__afv->{'_uu'} = 1; } elsif ($__afn eq "CheckVar") { if (!exists($__afo->{'_uh'}) && exists($__afo->{'_iy'})) { my @__afp = (); my $__afq = 1; my $__afr = $__afo->{'_iy'}; for ($__afq = 1; $__afq <= $__afr; $__afq++) { push @__afp, $__afq; } $__afo->{'_uh'} = \@__afp; } if (!exists($__afo->{'_hx'}) && !exists($__afo->{'_ho'})) { $__afo->{'_hx'} = -1; $__afo->{'_ho'} = -1; } $__afm = "SSI_CheckBoxCheck(\"" . $__afo->{'_if'} . "\",\"" . $__aft . "\", \"" . ciwlib9_14_2::_sx($__afo->{'_ek'}) . "\", " . $__afx . ", [" . join(",", @{$__afo->{'_uh'}}) . "], " . $__afo->{'_hx'} . ", " . $__afo->{'_ho'} . ", [" . $__afy . "])"; push @{$__afw}, ($__afm); $__afv->{'_uv'} = 1; } elsif ($__afn eq "NumericVar") { $__afm = "SSI_NumCheck(\"" . $__afo->{'_if'} . "\",\"" . $__aft . "\",\"" . ciwlib9_14_2::_sx($__afo->{'_ek'}) . "\", " . $__afx; if (exists($__afo->{'_ml'})) { $__afm .= ", true, "; } else { $__afm .= ", false, "; } my $__afs = ""; if (exists $__afo->{'_ie'}) { $__afs = $__afo->{'_ie'}; } $__afo->{'_hx'} =~ s/,/\./; $__afo->{'_ho'} =~ s/,/\./; $__afs =~ s/,/\./; authlib9_14_2::_adt($__afo); $__afm .= $__afo->{'_hx'} . ", " . $__afo->{'_ho'} . ", \"" . $__afs . "\""; if (exists $__afo->{'_dq'}) { $__afm .= ", true)"; } else { $__afm .= ", false)"; } push @{$__afw}, ($__afm); $__afv->{'_uw'} = 1; } elsif ($__afn eq "RankVar") { _su($__afo, $__aft, $__afw, $__afv, $__afx); } elsif ($__afn eq "ConsumVar") { _sv($__afo, $__aft, $__afw, $__afv, $__afx); } elsif ($__afn eq "ComboVar") { $__afm = "SSI_ComboCheck(\"" . $__afo->{'_if'} . "\",\"" . $__aft . "\", \"" . ciwlib9_14_2::_sx($__afo->{'_ek'}) . "\", " . $__afx; if (exists($__afo->{'_ml'})) { $__afm = $__afm . ", true)"; } else { $__afm = $__afm . ", false)"; } push @{$__afw}, ($__afm); $__afv->{'_ux'} = 1; } elsif ($__afn eq "OpenEndVar") { $__afm = "SSI_TxtCheck(\"" . $__afo->{'_if'} . "\",\"" . $__aft . "\",\"" . ciwlib9_14_2::_sx($__afo->{'_ek'}) . "\", " . $__afx; $__afm .= ", " . $__afo->{'_hx'} . ", " . $__afo->{'_ho'} . ")"; push @{$__afw}, ($__afm); $__afv->{'_uy'} = 1; } } } sub _su { my ($__agg, $__agh, $__agi, $__agj, $__agk) = @_; my $__aga = ""; $__aga = "SSI_RankCheck(\"" . $__agg->{'_uz'} . "\",\"" . $__agh . "\",\"" . ciwlib9_14_2::_sx($__agg->{'_ek'}) . "\", " . $__agk . ", [" . join(",", @{$__agg->{'_uh'}}) . "]"; my $__agb = 0; my $__agc = 0; my $__agd = @{$__agg->{'_uh'}}; authlib9_14_2::_adt($__agg); if (exists $__agg->{'_ho'}) { if ($__agg->{'_ho'} > $__agd) { $__agc = $__agd; } else { $__agc = $__agg->{'_ho'}; } } else { $__agc = $__agd; $__agb = $__agd; } if (exists $__agg->{'_hx'}) { if ($__agg->{'_hx'} > $__agd) { $__agb = $__agd; } else { $__agb = $__agg->{'_hx'}; } } else { if ($__agg->{'_pj'} eq "dragAndDrop" || $__agg->{'_pj'} eq "containers") { $__agb = $__agc; } } if ($__agg->{'_pj'} eq "combo") { $__aga .= ", 0"; $__agj->{'_ux'} = 1; my $__age = authlib9_14_2::_acy($__agg->{'_hj'}); my $__agf = 0; if ($__age) { $__agf = @{$__age}; } if ($__agf < $__agc) { $__agc = $__agf; } if ($__agf < $__agb) { $__agb = $__agf; } } else { $__aga .= ", 1"; $__agj->{'_uw'} = 1; } if (exists($__agg->{'_ml'})) { $__aga .= ", true"; } else { $__aga .= ", false"; } $__aga .= ", " . $__agb . ", " . $__agc . ")"; push @{$__agi}, ($__aga); $__agj->{'_va'} = 1; } sub _sv { my ($__ago, $__agp, $__agq, $__agr, $__ags) = @_; my $__agl = ""; my $__agm = $__ago->{'_dg'}; $__agm =~ s/,/\./; my $__agn = $__agm; $__agn =~ s/\.//; if ($__agn !~ m/^\s*\d+\s*$/) { $__agm = 0; } authlib9_14_2::_adt($__ago); $__agl = "SSI_ConSumCheck(\"" . $__ago->{'_uz'} . "\",\"" . $__agp . "\",\"" . ciwlib9_14_2::_sx($__ago->{'_ek'}) . "\", " . $__ags . ", [" . join(",", @{$__ago->{'_uh'}}) . "]," . $__agm . ", " . $__ago->{'_hx'} . ", " . $__ago->{'_ho'}; if (exists $__ago->{'_dq'}) { $__agl .= ", true"; } else { $__agl .= ", false"; } if ($__ago->{'_pw'} == 1) { $__agl .= ", true"; } else { $__agl .= ", false"; } if (exists($__ago->{'_ml'})) { $__agl .= ", true"; } else { $__agl .= ", false"; } $__agl .= ")"; push @{$__agq}, $__agl; $__agr->{'_vb'} = 1; $__agr->{'_uw'} = 1; } sub _sw { my ($__agz, $__aha, $__ahb, $__ahc) = @_; my $__agt = 0; my $__agu = $authlib9_14_2::_akq->{'_hw'}; my %__agv = (); my $__agw = ""; $__agv{"page_error"} = $__agu->{'_jm'}; if (exists $__agz->{'_uw'}) { $__agv{"missing"} = $__agu->{'_ia'}; $__agv{"not_numeric"} = $__agu->{'_ip'}; $__agv{"out_of_range"} = $__agu->{'_iu'}; } if (exists $__agz->{'_uy'}) { $__agv{"missing"} = $__agu->{'_ia'}; $__agv{"min_char"} = $__agu->{'_ci'}; $__agv{"max_char"} = $__agu->{'_ch'}; } if (exists $__agz->{'_uu'}) { $__agv{"missing"} = $__agu->{'_ia'}; } if (exists $__agz->{'_ux'}) { $__agv{"missing"} = $__agu->{'_ia'}; } if (exists $__agz->{'_uv'}) { $__agv{"min_check"} = $__agu->{'_cg'}; $__agv{"max_check"} = $__agu->{'_cf'}; } if (exists $__agz->{'_va'}) { $__agv{"rank_unique"} = $__agu->{'_lv'}; $__agv{"rank_count"} = $__agu->{'_lt'}; } if (exists $__agz->{'_vb'}) { $__agv{"constant_sum"} = $__agu->{'_de'}; } if (exists $__agz->{'_vc'}) { $__agv{"maxdiff_unique"} = $__agu->{'_hu'} } if (exists $__agz->{'_bv'}) { $__agv{"cbc_unique"} = $__agu->{'_bv'} } if (exists $__agz->{'_vd'}) { $__agv{"missing"} = $__agu->{'_ia'}; } print "\n\n"; print "<script type=\"text/javascript\">\n"; print "var GlobalQuestHash = 0;\n"; foreach $__agw (sort keys %__agv) { print "var strGlobalError_" . $__agw . " = \"" . ciwlib9_14_2::_sx($__agv{$__agw}) . "\";\n"; } print "\nvar blnGlobalCommaForDecimal = "; if (exists $authlib9_14_2::_akp->{'_dq'}) { print "true;\n"; } else { print "false;\n"; } print "function SSI_Verify(){\n"; print "SSI_InitializeErrors();\n"; my $__agx = ""; my $__agy = 0; foreach $__agx (@{$__ahb}) { $__agy = 1; print "if (!SSI_ErrorsExist()){" . $__agx . "}\n"; } if ($__agy) { print "if (!SSI_ErrorsExist()){\n"; } if (@{$__aha}) { print join(";\n", @{$__aha}) . ";\n"; } if ($__agy) { print "}\n"; } foreach $__agx (@{$__ahc}) { print "if (!SSI_ErrorsExist()){" . $__agx . "}\n"; } print "SSI_RemoveErrors();\n"; print "return SSI_ShowErrors();\n"; print "}\n"; print "\n</script>"; } sub _sx { my ($__ahd) = @_; $__ahd = authlib9_14_2::_zw($__ahd, 0); $__ahd = _sz($__ahd); $__ahd = authlib9_14_2::_acq($__ahd); return $__ahd; } sub _sy { my ($__ahe) = @_; $__ahe =~ s/\r\n/ /g; $__ahe =~ s/\n/ /ig; $__ahe =~ s/<br>/\\n/ig; $__ahe =~ s/\\n /\\n/ig; $__ahe =~ s/<[\w|\/].*?>//g; $__ahe =~ s/&nbsp;/ /g; return $__ahe; } sub _sz { my ($__ahf) = @_; $__ahf =~ s/\r\n/ /g; $__ahf =~ s/\n/ /g; $__ahf =~ s/\\/\\\\/g; $__ahf =~ s/"/\\"/g; $__ahf =~ s/\//\\\//g; return $__ahf; } sub _ta { my ($__ahg) = @_; $__ahg =~ s/"/&quot;/g; return $__ahg; } sub _tb { my $__ahh = ""; my $__ahi = 0; my $__ahj = 0; my $__ahk = 0; my $__ahl = 0; my $__ahm = 0; my $__ahn = 0; my $__aho = 0; if (exists $authlib9_14_2::_akn{"hid_test_mode_skipto"}) { $__ahh = $authlib9_14_2::_akn{"hid_test_mode_skipquestion"}; } if (exists $authlib9_14_2::_akn{"hid_test_mode_skiplogic"}) { $__ahi = 1; } if (exists $authlib9_14_2::_akn{"hid_test_mode_randomization"}) { $__ahj = 1; } if (exists $authlib9_14_2::_akn{"hid_test_mode_questnames"}) { $__ahk = 1; } if (exists $authlib9_14_2::_akn{"hid_test_mode_varnames"}) { $__ahl = 1; } if (exists $authlib9_14_2::_akn{"hid_test_mode_userespnum"}) { $__ahm = authlib9_14_2::_zo($authlib9_14_2::_akn{"hid_test_mode_respnum"}); } if (exists $authlib9_14_2::_akn{"hid_test_mode_printstudy"}) { $__ahn = 1; } if (exists $authlib9_14_2::_akn{"hid_test_mode_removeterminate"}) { $__aho = 1; } $authlib9_14_2::_akn{"hid_test_mode_settings"} = join(",", $__ahh, $__ahk, $__ahl, $__ahi, $__ahj, $__aho, $__ahm, $__ahn); } sub _tc { my $__ahp = $authlib9_14_2::_akn{"hid_test_mode_settings"}; my @__ahq = split(",", $__ahp); if ($__ahq[0] ne "") { $ciwlib9_14_2::_tx{'skip'} = $__ahq[0]; $authlib9_14_2::_akn{"hid_test_mode_skipquestion"} = $ciwlib9_14_2::_tx{'skip'}; } if ($__ahq[1] == 1) { $ciwlib9_14_2::_tx{'show_names'} = 1; $authlib9_14_2::_akn{"hid_test_mode_questnames"} = 1; } if ($__ahq[2] == 1) { $ciwlib9_14_2::_tx{'show_vars'} = 1; $authlib9_14_2::_akn{"hid_test_mode_varnames"} = 1; } if ($__ahq[3] == 1) { $ciwlib9_14_2::_tx{'remove_skip'} = 1; $authlib9_14_2::_akn{"hid_test_mode_skiplogic"} = 1; } if ($__ahq[4] == 1) { $ciwlib9_14_2::_tx{'remove_rand'} = 1; $authlib9_14_2::_akn{"hid_test_mode_randomization"} = 1; } if ($__ahq[5] == 1) { $ciwlib9_14_2::_tx{'remove_terminate'} = 1; $authlib9_14_2::_akn{"hid_test_mode_removeterminate"} = 1; } if ($__ahq[6] > 0) { my $__ahr = $__ahq[6]; $ciwlib9_14_2::_tx{'_buc'} = $__ahr; $authlib9_14_2::_akn{"hid_test_mode_userespnum"} = 1; $authlib9_14_2::_akn{"hid_test_mode_respnum"} = $__ahr; } if ($__ahq[7] == 1) { $ciwlib9_14_2::_tx{'print_study_mode'} = 1; } } sub _td { my ($__aht, $__ahu, $__ahv) = @_; my $__ahs = " <span class=\"test_label"; if ($__ahu) { $__ahs .= " test_question_label"; } if ($__ahv) { $__ahs .= " test_var_label"; } $__ahs .= "\">" . $__aht . "</span> "; return $__ahs; } sub _te { my ($__aip) = @_; my $__ahw = 0; my $__ahx = 0; my $__ahy = 0; my $__ahz = 0; my $__aia = ""; my $__aib = 0; my $__aic = 0; my $__aid = 0; my $__aie = 0; my $__aif = 0; my $__aig = 0; if ($authlib9_14_2::_ale) { return ""; } if (exists $authlib9_14_2::_akn{"hid_pagenum"}) { $__aif = $authlib9_14_2::_akn{"hid_pagenum"}; } if ($__aif <= 1) { return "&nbsp;"; } if ($__aif) { $__aie = $authlib9_14_2::_ako->[$__aif - 1]; } my $__aih = @{$authlib9_14_2::_ako}; if ($__aie && exists($__aie->{'_ld'}->[0]->{'_uf'}->{'_oo'})) { $__aic = 1; } my $__aii = 0; if (!$authlib9_14_2::_amg && exists $__aip->{'_le'}) { $__aii = 1; } if ($__aic || ($__aif > $__aih)) { $__ahz = 1; } elsif ($__aii) { my $__aij = authlib9_14_2::_xz(); my $__aik = $__aip->{'_pb'}; if ($__aik > 0) { $__ahz = ($__aij / $__aik); my $__ail = authlib9_14_2::_zw($__aip->{'_jv'}, 0); my $__aim = ($__ail / 100); if ($__ahz < $__aim) { $__ahz = $__ahz / $__aim; } else { $__ahz = .98; } } } else { $__ahz = ($__aif / $__aih); } $__aia .= "<div class=\"progress_bar\">\n"; $__aia .= "<table class=\"progress_bar_table\"><tr>\n"; $__aia .= "<td class=\"left_cell\">0%</td>"; $__aia .= "<td class=\"middle_cell\">\n"; $__aia .= "<div class=\"progress_bar_outer\">\n"; my $__ain = authlib9_14_2::_zw($__aip->{'_ei'}, 0); my $__aio = authlib9_14_2::_zw($__aip->{'_oc'}, 0); $__aid = int((($__ain - $__aio) * $__ahz) + $__aio); if ($__aid < 1) { $__aid = 1; } if ($authlib9_14_2::_alf) { $__aid = $authlib9_14_2::_alf; } $__aia .= "<div class=\"progress_bar_inner background_primary_color\" style=\"width: " . $__aid . "%\">"; $__aia .= "<p class=\"sr-only\">" . $__aid . "%</p>"; $__aia .= "</div>"; $__aia .= "</div>\n"; $__aia .= "</td>"; $__aia .= "<td class=\"right_cell\">100%</td>"; $__aia .= "</tr></table>"; $__aia .= "</div>"; return $__aia; } sub _tf { my $__aiq = "ciwweb" . $authlib9_14_2::_aib . "?hid_skip_simple_browser_transition=1&"; my $__air = ""; my $__ais = ""; foreach $__air (sort keys(%authlib9_14_2::_akn)) { $__ais = $authlib9_14_2::_akn{$__air}; if ($__air eq "hid_respnum" || $__air eq "hid_backup") { next; } elsif ($__air eq "hid_pagenum") { $__ais = 1; } $__ais = authlib9_14_2::_abq($__ais); $__aiq .= $__air . "=" . $__ais . "&"; } return $__aiq; } sub _tg { my $__ait = 0; my $__aiu = ""; if (exists $authlib9_14_2::_akp->{'_nt'}) { $__ait = $authlib9_14_2::_akp->{'_nt'}; if (exists($__ait->{'_ev'})) { $__aiu .= "fullscreen=yes"; } else { $__aiu .= "width=" . $__ait->{'_px'}; $__aiu .= ",height=" . $__ait->{'_fq'}; $__aiu .= ",resizable=yes"; } $__aiu .= ",scrollbars=yes"; } return $__aiu; } sub _th { my ($__aix) = @_; print ciwlib9_14_2::_sa(1,"", 1, 0, "", "", 0); my $__aiv = textlib9_14_2::new($__aix); $__aiv->{'_uf'} = $__aix->{'_pi'}; my $__aiw = $__aiv->_vh(); $__aiw .= $__aiv->_vi(); $__aiw .= $__aiv->_vj(); $__aiw .= $__aiv->_vk(); $__aiw .= $__aiv->_vr($__aiv, 0, 0, 0, 0); $__aiw .= $__aiv->_vl(); $__aiw .= $__aiv->_vm(); $__aiw .= $__aiv->_vl(); print authlib9_14_2::_zw($__aiw); print ciwlib9_14_2::_sg(1, 1, 0, ""); print ciwlib9_14_2::_sf(1, 0); } sub _ti { my ($__aiz) = @_; my $__aiy = ""; $__aiy .= "<a href=\"#\" onclick=\"window.close();\">" . authlib9_14_2::_zw($__aiz->{'_cj'}, 0) . "</a>\n"; return $__aiy; } sub _tj { my ($__aja) = @_; if (&authlib9_14_2::_ANF == $__aja->{'_pj'}) { authlib9_14_2::_yh("cvalib9_14_2.pl"); $__aja = cvalib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANG == $__aja->{'_pj'}) { $__aja = selectlib9_14_2::new($__aja); } elsif ((&authlib9_14_2::_ANP == $__aja->{'_pj'}) || (&authlib9_14_2::_ANQ == $__aja->{'_pj'})) { authlib9_14_2::_yh("cbclib9_14_2.pl"); $__aja = cbclib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANS == $__aja->{'_pj'}) { authlib9_14_2::_yh("grdlib9_14_2.pl"); $__aja = grdlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANT == $__aja->{'_pj'}) { $__aja = constantsumlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANU == $__aja->{'_pj'}) { $__aja = rankinglib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANW == $__aja->{'_pj'}) { authlib9_14_2::_yh("maxdifflib9_14_2.pl"); $__aja = maxdifflib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANH == $__aja->{'_pj'}) { $__aja = numericlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANI == $__aja->{'_pj'}) { $__aja = openendlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANJ == $__aja->{'_pj'}) { $__aja = passwordlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANK == $__aja->{'_pj'}) { $__aja = textlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANR == $__aja->{'_pj'}) { $__aja = freeformatlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANV == $__aja->{'_pj'}) { $__aja = terminatelinklib9_14_2::new($__aja); } elsif (authlib9_14_2::_yf($__aja->{'_pj'})) { authlib9_14_2::_yh("acbclib9_14_2.pl"); if (&authlib9_14_2::_ANY == $__aja->{'_pj'}) { $__aja = acbcbyolib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANZ == $__aja->{'_pj'}) { $__aja = acbcscreenerlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_AOA == $__aja->{'_pj'}) { $__aja = acbcmusthavelib9_14_2::new($__aja); } elsif (&authlib9_14_2::_AOB == $__aja->{'_pj'}) { $__aja = acbcunacceptablelib9_14_2::new($__aja); } elsif (&authlib9_14_2::_AOC == $__aja->{'_pj'}) { $__aja = acbcchoicelib9_14_2::new($__aja); } elsif (&authlib9_14_2::_AOD == $__aja->{'_pj'}) { $__aja = acbccalibrationlib9_14_2::new($__aja); } } elsif (authlib9_14_2::_ye($__aja->{'_pj'})) { authlib9_14_2::_yh("acalib9_14_2.pl"); if (&authlib9_14_2::_ANL == $__aja->{'_pj'}) { $__aja = acaratlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANM == $__aja->{'_pj'}) { $__aja = acaimplib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANN == $__aja->{'_pj'}) { $__aja = acaparlib9_14_2::new($__aja); } elsif (&authlib9_14_2::_ANO == $__aja->{'_pj'}) { $__aja = acacallib9_14_2::new($__aja); } } elsif (&authlib9_14_2::_ANX == $__aja->{'_pj'}) { $__aja = quotalib9_14_2::new($__aja); } elsif (&authlib9_14_2::_AOE == $__aja->{'_pj'}) { $__aja = semanticdifflib9_14_2::new($__aja); } else { authlib9_14_2::_zq(116, "", "Cannot load question. Unknown question type.", ""); } } sub _tk { my ($__aje, $__ajf, $__ajg) = @_; my $__ajb = ""; if (exists $__aje->{'_et'}) { if ($__ajf) { $__ajb .= " style=\""; } my $__ajc = ""; my $__ajd = $__aje->{'_et'}; foreach $__ajc (sort keys %{$__ajd}) { if ($__ajc eq '_cm') { $__ajb .= "color:#" . $__ajd->{'_cm'} . ";"; } elsif ($__ajc eq '_bf') { if ($__ajd->{'_bf'} == 1) { $__ajb .= "font-weight:bold;"; } elsif ($__ajd->{'_bf'} == 0) { $__ajb .= "font-weight:normal;"; } } elsif ($__ajc eq '_pk') { if ($__ajd->{'_pk'} == 1) { $__ajb .= "text-decoration:underline;"; } elsif ($__ajd->{'_pk'} == 0) { $__ajb .= "text-decoration:none;"; } } elsif ($__ajc eq '_gi') { if ($__ajd->{'_gi'} == 1) { $__ajb .= "font-style:italic;"; } elsif ($__ajd->{'_gi'} == 0) { $__ajb .= "font-style:normal;"; } } elsif ($__ajc eq '_nv') { $__ajb .= "font-size:" . $__ajd->{'_nv'} . "px;"; } elsif ($__ajc eq '_m' && !$__ajg) { if ($__ajd->{'_m'} ne "left - right") { $__ajb .= "text-align:" . $__ajd->{'_m'} . ";"; } } } if ($__ajf) { $__ajb .= "\""; } } return $__ajb; } sub _tl { my ($__aji) = @_; my $__ajh = ""; if ($__aji eq "right") { $__ajh = "margin-left: auto; margin-right: 0px;"; } elsif ($__aji eq "left") { $__ajh = "margin-left: 0px; margin-right: auto;"; } elsif ($__aji eq "center") { $__ajh = "margin-left: auto; margin-right: auto;"; } return $__ajh; } sub _tm { my ($__ajr, $__ajs, $__ajt, $__aju) = @_; my $__ajj = ""; my $__ajk = ""; my $__ajl = 0; my $__ajm = 0; if (exists $authlib9_14_2::_akp->{'_ex'}) { $__ajl = 1; } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { my $__ajn = $__ajr; if ($__ajt) { $__ajn .= "=" . $__ajs; } $__ajj .= ciwlib9_14_2::_td($__ajn, 0, 1); } if ($__ajt) { my $__ajo = $__ajs; $__ajo =~ s/,/-/g; $__ajo =~ s/\./-/g; $__ajk = $__ajr . "_" . $__ajo; } else { $__ajk = $__ajr; } if ($__ajl) { my $__ajp; my $__ajq; if ($__ajt) { $__ajp = "radiobox"; $__ajq = "radio"; } else { $__ajp = "checkbox"; $__ajq = "checkbox"; } if ($__ajm) { $__ajp .= "selected"; } $__ajj .= "<div id=\"" . $__ajk . "_graphical\" class=\"graphical_select " . $__ajp . "\" role=\"" . $__ajq . "\" aria-checked=\"false\" aria-labelledby=\"" . $__ajk . "_label\">\n"; if (exists($authlib9_14_2::_akp->{'_od'})) { if ($__ajt) { $__ajj .= "<svg class=\"radio_svg\" width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\">\n"; $__ajj .= "<circle class=\"stroke_primary_color\" cx=\"11\" cy=\"11\" r=\"10.5\" stroke=\"#808080\"/>\n"; $__ajj .= "<circle class=\"fill_primary_color\" cx=\"11\" cy=\"11\" r=\"7\" fill=\"#808080\"/>\n"; $__ajj .= "</svg>\n"; } else { $__ajj .= "<svg class=\"checkbox_svg\" width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\">\n"; $__ajj .= "<rect class=\"stroke_primary_color\" x=\"0.5\" y=\"0.5\" width=\"21\" height=\"21\" rx=\"1.5\" stroke=\"#808080\"/>\n"; $__ajj .= "<rect class=\"fill_primary_color\" x=\"3.47998\" y=\"10.3101\" width=\"10.4711\" height=\"4.18842\" rx=\"1\" transform=\"rotate(36 3.47998 10.3101)\" fill=\"#808080\"/>\n"; $__ajj .= "<rect class=\"fill_primary_color\" x=\"17.1794\" y=\"2.14307\" width=\"4.18842\" height=\"18.8479\" rx=\"1\" transform=\"rotate(36 17.1794 2.14307)\" fill=\"#808080\"/>\n"; $__ajj .= "</svg>\n"; } } $__ajj .= "</div>"; } $__ajj .= "<input name=\"" . $__ajr . "\" value=\"" . $__ajs . "\" type=\""; if ($__ajt) { $__ajj .= "radio"; } else { $__ajj .= "checkbox"; } $__ajj .= "\" id=\""; $__ajj .= $__ajk; $__ajj .= "\""; if ($__aju) { if (exists $__aju->{'_ug'}) { if ($__aju->{'_ug'}->{$__ajr} eq $__ajs) { $__ajj .= " checked"; $__ajm = 1; } } } if ($__ajl) { $__ajj .= " class=\"HideElement\""; } $__ajj .= ">\n"; return $__ajj; } sub _tn { my $__ajv = ""; $__ajv .= "<div id=\"test_mode_bar\" class=\"row\">\n"; $__ajv .= "<div id=\"desktop_view\" class=\"col selected\"></div>\n"; $__ajv .= "<div id=\"mobile_view\" class=\"col\"></div>\n"; $__ajv .= "<div class=\"col mobile_view_settings\">\n"; $__ajv .= "<select id=\"mobile_size\">\n"; $__ajv .= "<option value=\"1\">Small Phone</option>\n"; $__ajv .= "<option value=\"2\" selected>Medium Phone</option>\n"; $__ajv .= "<option value=\"3\">Large Phone</option>\n"; $__ajv .= "<option value=\"4\">Tablet</option>\n"; $__ajv .= "</select>\n"; $__ajv .= "</div>\n"; $__ajv .= "<div id=\"size_display\" class=\"col mobile_view_settings\">\n"; $__ajv .= "</div>\n"; $__ajv .= "<div id=\"rotate\" class=\"col portrait mobile_view_settings\"></div>\n"; $__ajv .= "<div class=\"col mobile_view_settings\">\n"; $__ajv .= "</div>\n"; if (!$authlib9_14_2::_amg || $authlib9_14_2::_amg == &authlib9_14_2::_AOV) { $__ajv .= "<div id=\"skip_col\" class=\"col\">Skip to: \n"; $__ajv .= "<select id=\"skip_question_name\">\n"; $__ajv .= "<option value=\"\"></option>\n"; my $__ajw = ""; if (exists $authlib9_14_2::_akn{"hid_test_mode_skipquestion"}) { $__ajw = $authlib9_14_2::_akn{"hid_test_mode_skipquestion"}; } my ($__ajx, $__ajy) = authlib9_14_2::_aee(0, 1, 0, 0, 0, 1, $__ajw); $__ajv .= $__ajx; $__ajv .= "</select></div>"; } $__ajv .= "<div id=\"test_options_link\" class=\"col\"></div>\n"; $__ajv .= "</div>\n"; $__ajv .= "<div id=\"mobile_display\">\n"; $__ajv .= "<div class=\"iframe_container\">\n"; $__ajv .= "<iframe id=\"display_iframe\" src=\"\" frameborder=\"0\" allowfullscreen></iframe>\n"; $__ajv .= "</div>\n"; $__ajv .= "</div>\n"; $__ajv .= _to(); $__ajv .= "<div id=\"overlay\"></div>"; return $__ajv; } sub _to { my $__ajz = ""; $__ajz .= "<div id=\"test_options_dialog\">"; $__ajz .= _tp("show_quest_names", "Show Question Names", exists $authlib9_14_2::_akn{"hid_test_mode_questnames"}); $__ajz .= _tp("show_var_names", "Show Variable Names", exists $authlib9_14_2::_akn{"hid_test_mode_varnames"}); if (!$authlib9_14_2::_amg) { $__ajz .= _tp("remove_skip_logic", "Remove All Skip Logic", exists $authlib9_14_2::_akn{"hid_test_mode_skiplogic"}); $__ajz .= _tp("remove_randomization", "Remove Randomization", exists $authlib9_14_2::_akn{"hid_test_mode_randomization"}); $__ajz .= _tp("remove_terminate", "Disable Terminate/Link Functionality", exists $authlib9_14_2::_akn{"hid_test_mode_removeterminate"}); if (!$authlib9_14_2::_aku && !exists $authlib9_14_2::_akp->{'_bp'}) { my $__aka = 0; if (exists $authlib9_14_2::_akn{"hid_test_mode_userespnum"} && exists $authlib9_14_2::_akn{"hid_test_mode_respnum"}) { $__aka = authlib9_14_2::_zo($authlib9_14_2::_akn{"hid_test_mode_respnum"}); } $__ajz .= _tp("use_respnum", "Use Internal Respondent Number", $__aka, "respnum_content"); $__ajz .= "<div id=\"respnum_box\" class=\"respnum_content\"><input id=\"test_respnum\" type=\"text\" class=\"text_input\" maxlength=\"9\" size=\"9\""; if ($__aka) { $__ajz .= " value=\"" . $__aka . "\""; } $__ajz .= "></div>"; $__ajz .= "<div id=\"respnum_note\" class=\"respnum_content\">(Warning: Existing test data with the same respondent number will be overwritten!)</div>"; } } $__ajz .= "</div>"; return $__ajz; } sub _tp { my ($__akc, $__akd, $__ake, $__akf) = @_; my $__akb = "<div class=\"test_options_row"; if ($__akf) { $__akb .= " " . $__akf; } $__akb .= "\"><div><input id=\"" . $__akc . "\" type=\"checkbox\" class=\"checkbox\" value=\"1\" "; if ($__ake) { $__akb .= " checked "; } $__akb .= "></div><div><label for=\"" . $__akc . "\">" . $__akd . "</label></div></div>"; return $__akb; } 1;  package dalqst9_14_2; our @ISA = qw(dallib); sub new { my ($__akh) = @_; seek $authlib9_14_2::_ajm, $__akh, 0; my $__akg = authlib9_14_2::_zi(1); return bless($__akg); } 1;  package questionlib9_14_2; sub _ve { my ($__akj, $__akk) = @_; if ($__akk) { $__akj->{'_uf'} = $__akk; } else { my $__aki = dalqst9_14_2::new($__akj->{'_iz'}); $__akj->{'_uf'} = $__aki; } } sub _vf { } sub _vg { my ($__akm) = @_; my $__akl = ""; if (exists $__akm->{'_uf'}->{'_fl'}) { $__akl .= "\n" . $__akm->{'_uf'}->{'_fl'}; } return $__akl; } sub _vh { my ($__akp) = @_; my $__akn = "<div class=\"question " . $__akp->{'_vo'} . "\" id=\"" . $__akp->{'_if'} . "_div\""; my $__ako = ""; if (exists $__akp->{'_uf'}->{'_lc'}) { $__ako .= "width:" . $__akp->{'_uf'}->{'_lc'} . "px;"; } if (exists $__akp->{'_uf'}->{'_ku'}) { $__ako .= ciwlib9_14_2::_tl($__akp->{'_uf'}->{'_ku'}); } if ($__ako) { $__akn .= " style=\"" . $__ako . "\""; } $__akn .= ">\n"; return $__akn; } sub _vi { my ($__akq) = @_; return $__akq->_vn('_fn', "header1"); } sub _vj { my ($__akr) = @_; return $__akr->_vn('_fo', "header2"); } sub _vk { my ($__akv) = @_; my $__aks = "<div class=\"question_body"; if (exists $__akv->{'_vp'}) { $__aks .= " indent"; } $__aks .= "\""; if (exists $__akv->{'_uf'}->{'_bc'}) { my $__akt = $__akv->{'_uf'}->{'_bc'}; if (exists $__akt->{'_et'}) { my $__aku = $__akt->{'_et'}; if (exists $__aku->{'_m'}) { $__aks .= " style=\"text-align:" . $__aku->{'_m'} . ";\""; } } } $__aks .= ">\n"; return $__aks; } sub _vl { return "</div>\n"; } sub _vm { my ($__akw) = @_; return $__akw->_vn('_er', "footer"); } sub _vn { my ($__alb, $__alc, $__ald) = @_; my $__akx = ""; my $__aky = $__alb->{'_uf'}; if (exists($__aky->{$__alc})) { my $__akz = $__aky->{$__alc}; my $__ala = $__akz->{'_op'}; if ($__ala ne "") { $__akx .= "<div class=\"" . $__ald . "\"" . ciwlib9_14_2::_tk($__akz, 1, 0) . ">\n"; $__akx .= $__ala; $__akx .= "</div>\n"; } } return $__akx; } 1;  package onelistquestionlib9_14_2; our @ISA = qw(questionlib9_14_2); sub _ve { my ($__alh) = @_; $__alh->SUPER::_ve(); my $__ale = $__alh->{'_uf'}->{'_hj'}; my $__alf = authlib9_14_2::_acy($__ale); my $__alg = 0; if ($__alf) { $__alg = @{$__alf}; } if ($__alg == 0) { $__alh->{'_uk'} = 1; } else { $__alh->{'_uf'}->{'_vu'} = $__alf; } } sub _vq { my ($__all, $__alm, $__aln) = @_; my @__ali = @{$__aln}; my $__alj = ""; if (@__ali > 0) { $__alj .= "<otherindices>"; foreach my $__alk (@__ali) { $__alj .= "<otherspecify><index>" . $__alm->[$__alk]->{'_pt'} . "</index>"; $__alj .= "<min>" . $__alm->[$__alk]->{'_jg'}->{'_hx'} . "</min>"; $__alj .= "<max>" . $__alm->[$__alk]->{'_jg'}->{'_ho'} . "</max>"; if (exists $__alm->[$__alk]->{'_jg'}->{'_ic'}) { $__alj .= "<multiline>" . $__alm->[$__alk]->{'_jg'}->{'_ic'} . "</multiline>"; } $__alj .= "</otherspecify>"; } $__alj .= "</otherindices>"; } return $__alj; } 1;  package numericlib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__alo) = @_; $__alo->{'_vo'} = "numeric"; $__alo->{'_vp'} = 1; bless($__alo); return $__alo; } sub _vr { my ($__alv, $__alw, $__alx, $__aly, $__alz) = @_; my $__alp = ""; my $__alq = $__alv->{'_if'}; my $__alr = ""; my $__als = $__alv->{'_uf'}; if (exists $__als->{'_bc'}) { $__alr = "<span class=\"question_text\""; $__alr .= ciwlib9_14_2::_tk($__als->{'_bc'}, 1, 0); $__alr .= ">" . $__als->{'_bc'}->{'_op'} . "</span>"; } if ($__alr && $__als->{'_gs'} ne "right") { $__alp .= $__alr; } my $__alt = authlib9_14_2::_abi($__als->{'_ge'}); my $__alu = "tel"; if (exists $__als->{'_dq'}) { $__alu = "text"; } $__alp .= "<input type=\"" . $__alu . "\" class=\"numeric_input\" name=\"" . $__alq . "\" aria-labelledby=\"" . $__alq . "_div\""; if (exists $__als->{'_ug'}) { $__alp .= " value=\"" . $__als->{'_ug'}->{$__alq} . "\""; } $__alp .= " size=\"" . $__alt . "\" id=\"" . $__alq . "\">"; if ($__alr && $__als->{'_gs'} eq "right") { $__alp .= $__alr; } if ($authlib9_14_2::_ajg) { $__alp .= "<!--LoadTestMode: <question><name>" . $__alq . "</name><type>numeric</type><min>" . $__als->{'_hx'} . "</min><max>" . $__als->{'_ho'} . "</max>"; $__alp .= "<required>" . (exists $__als->{'_ml'} ? "true" : "false") . "</required>"; $__alp .= "<decimal>" . (exists $__als->{'_dq'} ? "true" : "false") . "</decimal>"; if (exists $__als->{'_ie'}) { $__alp .= "<na>" . $__als->{'_ie'} . "</na>"; } $__alp .= "</question>-->"; } return $__alp; } sub _vs { my ($__amd, $__ame, $__amf, $__amg) = @_; my $__ama = ""; my $__amb = $__amd->{'_uf'}; $__ama = "SSI_NumCheck(\"" . $__amd->{'_if'} . "\", \"" . $__amd->{'_if'} . "\",\"" . ciwlib9_14_2::_sx($__amb->{'_ek'}) . "\", " . $__amg; if (exists($__amb->{'_ml'})) { $__ama .= ", true, "; } else { $__ama .= ", false, "; } my $__amc = ""; if (exists $__amb->{'_ie'}) { $__amc = $__amb->{'_ie'}; } $__amb->{'_hx'} =~ s/,/\./; $__amb->{'_ho'} =~ s/,/\./; $__amc =~ s/,/\./; authlib9_14_2::_adt($__amb); $__ama .= $__amb->{'_hx'} . ", " . $__amb->{'_ho'} . ", \"" . $__amc . "\""; if (exists $__amb->{'_dq'}) { $__ama .= ", true)"; } else { $__ama .= ", false)"; } push @{$__ame}, ($__ama); $__amf->{'_uw'} = 1; } 1;  package openendlib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__amh) = @_; $__amh->{'_vo'} = "openend"; $__amh->{'_vp'} = 1; bless($__amh); return $__amh; } sub _vr { my ($__amo, $__amp, $__amq, $__amr, $__ams) = @_; my $__ami = ""; my $__amj = $__amo->{'_if'}; my $__amk = $__amo->{'_uf'}; my $__aml = $__amk->{'_ho'}; my $__amm = 0; if ($__amk->{'_pj'} eq "free") { $__amm = 1; } if (exists($__amk->{'_bc'})) { if ($__amm) { $__ami .= "<div"; } else { $__ami .= "<span"; } $__ami .= " class=\"question_text\""; $__ami .= ciwlib9_14_2::_tk($__amk->{'_bc'}, 1, 0); $__ami .= ">" . $__amk->{'_bc'}->{'_op'}; if ($__amm) { $__ami .= "</div>"; } else { $__ami .= "</span>"; } } if ($__amm) { $__ami .= "<textarea wrap=\"virtual\" name=\"" . $__amj . "\" id=\"" . $__amj . "\" aria-labelledby=\"" . $__amj . "_div\""; if (exists $__amk->{'_ge'} || exists $__amk->{'_gc'}) { $__ami .= " style=\""; if (exists $__amk->{'_ge'}) { $__ami .= "width:" . $__amk->{'_ge'} . "px;"; } if (exists $__amk->{'_gc'}) { $__ami .= "height:" . $__amk->{'_gc'} . "px;"; } $__ami .= "\""; } $__ami .= ">"; if (exists $__amk->{'_ug'}) { my $__amn = $__amk->{'_ug'}->{$__amj}; $__amn =~ s/\r\n/\n/g; $__ami .= $__amn; } $__ami .= "</textarea>\n"; } else { $__ami .= "<input type=\"text\" name=\"" . $__amj . "\" class=\"open_end_text_box text_input\" aria-labelledby=\"" . $__amj . "_div\""; if (exists $__amk->{'_ge'}) { $__ami .= " style=\"width: " . $__amk->{'_ge'} . "px;\""; } if (exists $__amk->{'_ug'}) { $__ami .= " value=\"" . $__amk->{'_ug'}->{$__amj} . "\""; } $__ami .= " maxlength=\"" . $__aml . "\" id=\"" . $__amj . "\">\n"; } if ($authlib9_14_2::_ajg) { $__ami .= "<!--LoadTestMode: <question><name>" . $__amj . "</name><type>openend</type><min>" . $__amo->{'_uf'}->{'_hx'} . "</min><max>" . $__amo->{'_uf'}->{'_ho'} . "</max>"; $__ami .= "<subtype>" . $__amo->{'_uf'}->{'_pj'} . "</subtype>"; $__ami .= "</question>-->"; } return $__ami; } sub _vs { my ($__amu, $__amv, $__amw, $__amx) = @_; my $__amt = ""; if ($__amu->{'_uf'}->{'_ho'} >= 0) { $__amt = "SSI_TxtCheck(\"" . $__amu->{'_if'} . "\",\"" . $__amu->{'_if'} . "\",\"" . ciwlib9_14_2::_sx($__amu->{'_uf'}->{'_ek'}) . "\", " . $__amx; $__amt .= ", " . $__amu->{'_uf'}->{'_hx'} . ", " . $__amu->{'_uf'}->{'_ho'} . ")"; push(@{$__amv}, $__amt); $__amw->{'_uy'} = 1; } } 1;  package passwordlib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__amy) = @_; $__amy->{'_vo'} = "password"; $__amy->{'_vp'} = 1; bless($__amy); return $__amy; } sub _vf { my ($__anc) = @_; my $__amz = ""; my $__ana = ""; my $__anb = $__anc->{'_uf'}; if (exists $__anb->{'_bd'}) { $__amz .= "\n#" . $__anc->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__anb->{'_bd'}) . "}\n"; } if (exists $__anb->{'_ju'}) { $__ana = ciwlib9_14_2::_tk($__anb->{'_ju'}, 0, 0); if ($__ana) { $__amz .= "\n.password .question_text {" . $__ana . "}\n"; } } return $__amz; } sub _vr { my ($__ank, $__anl, $__anm, $__ann, $__ano) = @_; my $__and = ""; if ($ciwlib9_14_2::_tz eq "") { authlib9_14_2::_yo(); $authlib9_14_2::_ajf = 1; if (exists $authlib9_14_2::_aky->{'_ju'}) { my $__ane = $authlib9_14_2::_aky->{'_ju'}; if (exists $__ane->{'_jt'}) { my $__anf = $__ane->{'_jt'}; my $__ang = 0; $__and .= "<table role=\"table\" class=\"inner_table\">\n"; foreach $__ang (@{$__anf}) { $__and .= "<tr><td role=\"rowheader\" class=\"row_label_cell\">"; $__and .= "<span class=\"question_text\">" . $__ang->{'_gr'} . "</span>"; $__and .= "</td><td class=\"input_cell\">"; $__and .= "<input type=\""; if (exists $__ang->{'_hn'}) { $__and .= "password"; } else { $__and .= "text"; } $__and .= "\" class=\"text_input password_input\" name=\"" . $__ang->{'_if'} . "\" id=\"" . $__ang->{'_if'} . "\" autocomplete=\"off\">"; $__and .= "</td></tr>"; } $__and .= "</table>\n"; } } if (exists $authlib9_14_2::_akn{"hid_test_mode"} && exists $authlib9_14_2::_aky->{'_jr'}) { my $__anh = $authlib9_14_2::_aky->{'_jr'}; my $__ani = 0; my $__anj = "Your survey contains link variables. They are displayed below for testing purposes only. This message and the fields below will not appear in the regular survey."; $__anj .= "<div id=\"passin_title\">Link Variables:</div>"; $__anj .= "<div id=\"passin_fields\">"; foreach $__ani (@{$__anh}) { $__anj .= "<div class=\"passin_name\">" . $__ani->{'_if'} . "</div>"; $__anj .= "<div><input type=\"text\" name=\"" . $__ani->{'_if'} . "\" class=\"text_input\"></div>"; } $__anj .= "</div>"; $__and .= ciwlib9_14_2::_rx($__anj); } } return $__and; } sub _vs { } 1;  package textlib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__anp) = @_; $__anp->{'_vo'} = "text"; $__anp->{'_vp'} = 1; bless($__anp); return $__anp; } sub _vr { my ($__anr, $__ans, $__ant, $__anu, $__anv) = @_; my $__anq = ""; if (exists $__anr->{'_uf'}->{'_bc'}) { $__anq .= "<span class=\"question_text\""; $__anq .= ciwlib9_14_2::_tk($__anr->{'_uf'}->{'_bc'}, 1, 0); $__anq .= ">" . $__anr->{'_uf'}->{'_bc'}->{'_op'} . "</span>"; } if ($authlib9_14_2::_ajg) { $__anq .= "<!--LoadTestMode: <question><name>" . $__anr->{'_if'} . "</name><type>text/filler</type></question>-->"; } return $__anq; } sub _vs { } 1;  package freeformatlib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__anw) = @_; $__anw->{'_vo'} = "freeformat"; bless($__anw); return $__anw; } sub _vr { my ($__aon, $__aoo, $__aop, $__aoq, $__aor) = @_; my $__anx = ""; if (exists($__aon->{'_uf'}->{'_fv'})) { my $__any = $__aon->{'_uf'}->{'_fv'}; my $__anz = $__aon->{'_uf'}->{'_pv'}; my $__aoa = 0; my $__aob = ""; my $__aoc = ""; my $__aod = 0; my $__aoe = 0; my $__aof = @{$__anz}; my $__aog = ""; my $__aoh = ""; for ($__aod = 0; $__aod < $__aof; $__aod++) { $__aoa = $__anz->[$__aod]; $__aob = ref($__aoa); $__aoc = $__aoa->{'_if'}; if ($__aob eq "RadioVar") { if ($__any !~ m/<input(.*?)name="$__aoc"(.*?)>/isg) { $__aoh .= "<input name=\"hid_" . $__aoc . "_missing\" value=\"1\" type=\"hidden\">"; } } elsif ($__aob eq "CheckVar") { my $__aoi = ""; my $__aoj = 0; for ($__aoe = 1; $__aoe <= $__aoa->{'_iy'}; $__aoe++) { $__aoi = $__aoc . "_" . $__aoe; if ($__any =~ m/<input(.*?)name="$__aoi"(.*?)>/isg) { $__aoj++; } } $__aoh .= "<input name=\"hid_" . $__aoc . "_count\" value=\"" . $__aoj . "\" type=\"hidden\">"; } } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { for ($__aod = 0; $__aod < $__aof; $__aod++) { $__aoa = $__anz->[$__aod]; $__aob = ref($__aoa); $__aoc = $__aoa->{'_if'}; if ($__aob eq "RadioVar") { $__aog = ciwlib9_14_2::_td($__aoc, 0, 1); $__any =~ s/(<input name="$__aoc")/$__aog$1/isg; } elsif ($__aob eq "CheckVar") { my $__aoi = ""; for ($__aoe = 1; $__aoe <= $__aoa->{'_iy'}; $__aoe++) { $__aoi = $__aoc . "_" . $__aoe; $__aog = ciwlib9_14_2::_td($__aoi, 0, 1); $__any =~ s/(<input name="$__aoi")/$__aog$1/isg; } } elsif ($__aob eq "ComboVar") { $__aog = ciwlib9_14_2::_td($__aoc, 0, 1); $__any =~ s/(<select name="$__aoc")/$__aog$1/isg; } elsif ($__aob eq "NumericVar") { $__aog = ciwlib9_14_2::_td($__aoc, 0, 1); $__any =~ s/(<input name="$__aoc")/$__aog$1/isg; } elsif ($__aob eq "OpenEndVar") { $__aog = ciwlib9_14_2::_td($__aoc, 0, 1); $__any =~ s/(<input name="$__aoc")/$__aog$1/isg; $__any =~ s/(<textarea name="$__aoc")/$__aog$1/isg; } elsif ($__aob eq "HiddenVar") { $__aog = ciwlib9_14_2::_td($__aoc . "(hidden)", 0, 1); $__any =~ s/(<input name="$__aoc")/$__aog$1/isg; } } } $__anx .= "\n\n<!-- Begin custom HTML for " . $__aon->{'_if'} . " Free Format Question -->\n"; $__anx .= $__any; if ($__aoh) { $__anx .= $__aoh; } $__anx .= "\n<!-- End custom HTML for " . $__aon->{'_if'} . " Free Format Question -->\n\n"; if (exists $__aon->{'_uf'}->{'_ug'}) { $__aon->_vt(\$__anx); } if ($authlib9_14_2::_ajg) { $__anx .= "<!--LoadTestMode: <question><name>$__aon->{'_if'}</name><type>freeformat</type>"; my $__anz = $__aon->{'_uf'}->{'_pv'}; my $__aoa = 0; my $__aob = ""; my $__aoc = ""; my $__aod = 0; my $__aof = @{$__anz}; $__anx .= "<vars>"; for ($__aod = 0; $__aod < $__aof; $__aod++) { $__anx .= "<var>"; $__aoa = $__anz->[$__aod]; $__aob = ref($__aoa); $__aoc = $__aoa->{'_if'}; $__anx .= "<type>$__aob</type><name>" . $__aoc . "</name>"; if ($__aob eq "RadioVar") { $__anx .= "<indices>"; pos($__any) = 0; while ($__any =~ m/\<input\s+([^>]*name\s*=\s*["']\s*\Q$__aoc\E\s*["'][^>]*)>/gsi) { my $__aok = $1; if ($__aok =~ m/value=["']([^"']*?)["']/io) { $__anx .= "<index>" . $1 . "</index>"; } } $__anx .= "</indices>"; $__anx .= "<required>" . (exists $__aoa->{'_ml'} ? "true" : "false") . "</required>"; } elsif ($__aob eq "CheckVar") { if (exists $__aoa->{'_hx'}) { $__anx .= "<min>" . $__aoa->{'_hx'} . "</min>"; } if (exists $__aoa->{'_ho'}) { $__anx .= "<max>" . $__aoa->{'_ho'} . "</max>"; } $__anx .= "<numopts>" . $__aoa->{'_iy'} . "</numopts>"; } elsif ($__aob eq "ComboVar") { pos($__any) = 0; if ($__any =~ m/\<select\s*[^>]*(?>id|name)\s*=\s*["']\Q$__aoc\E["'][^>]*>(.*?)<\/select>/si) { $__anx .= "<indices>"; my $__aol = $1; while ($__aol =~ m/<option\s*[^>]*value\s*=\s*["']([^"']*)["']/gio) { if ($1 ne "") { $__anx .= "<index>" . $1 . "</index>"; } } $__anx .= "</indices>"; $__anx .= "<required>" . (exists $__aoa->{'_ml'} ? "true" : "false") . "</required>"; } } elsif ($__aob eq "NumericVar") { $__anx .= "<min>" . $__aoa->{'_hx'} . "</min><max>" . $__aoa->{'_ho'} . "</max>"; $__anx .= "<required>" . (exists $__aoa->{'_ml'} ? "true" : "false") . "</required>"; $__anx .= "<decimal>" . (exists $__aoa->{'_dq'} ? "true" : "false") . "</decimal>"; if (exists $__aoa->{'_ie'}) { $__anx .= "<na>" . $__aoa->{'_ie'} . "</na>"; } } elsif ($__aob eq "OpenEndVar") { $__anx .= "<min>" . $__aoa->{'_hx'} . "</min><max>" . $__aoa->{'_ho'} . "</max>"; } elsif ($__aob eq "HiddenVar") { my $__aom = ""; if ($__any =~ m/<input name="$__aoc" type="hidden"(.*?)>/si) { $__aom = $1; if ($__aom =~ m/value="(.*?)"/i) { $__anx .= "<value>" . $1 . "</value>"; } } } $__anx .= "</var>"; } $__anx .= "</vars></question>-->"; } } return $__anx; } sub _vs { my ($__aot, $__aou, $__aov, $__aow) = @_; my $__aos = $__aot->{'_uf'}; ciwlib9_14_2::_st($__aot->{'_if'}, $__aos->{'_pv'}, $__aov, $__aou, $__aow, "", 1); } sub _vt { my ($__apm, $__apn) = @_; my $__aox = $__apm->{'_uf'}->{'_pv'}; my $__aoy = ""; my $__aoz = ""; my $__apa = $__apm->{'_if'}; my $__apb = ""; my $__apc = $__apm->{'_uf'}->{'_ug'}; foreach my $__apd (@{$__aox}) { $__aoy = ref($__apd); $__aoz = $__apd->{'_if'}; if ($__aoy eq "RadioVar") { $__apb = $__apc->{$__aoz}; my $__ape = ""; while (${$__apn} =~ m/\<input[^\>]*?name\s*=\s*["']$__aoz["'].*?\/?\>/si) { $__ape .= $`; my $__apf = $&; my $__apg = $'; if ($__apf =~ m/type\s*=\s*["']radio["']/soi) { $__apf =~ s/(value\s*=\s*["']$__apb["'])/$1 checked /si; } $__ape .= $__apf; ${$__apn} = $__apg; } ${$__apn} = $__ape . ${$__apn}; } elsif ($__aoy eq "CheckVar") { my $__ape = ""; while (${$__apn} =~ m/\<input[^\>]*?name\s*=\s*["']($__aoz.*?)["'].*?\/?\>/si) { $__ape .= $`; my $__apf = $&; my $__apg = $'; my $__aph = $1; if (exists $__apc->{$__aph} && $__apf =~ m/type\s*=\s*["']checkbox["']/soi) { $__apb = $__apc->{$__aph}; $__apf =~ s/(value\s*=\s*["']$__apb["'])/$1 checked /si; } $__ape .= $__apf; ${$__apn} = $__apg; } ${$__apn} = $__ape . ${$__apn}; } elsif ($__aoy eq "ComboVar") { $__apb = $__apc->{$__aoz}; if (${$__apn} =~ m/(\<select[^\>]*?(?>id|name)\s*=\s*["']$__aoz["'].*?\>)(.*?)(\<\/select\>)/si) { my $__api = $`; my $__apj = $1; my $__apk = $2; my $__apl = $3; my $__apg = $'; $__apk =~ s/(\<option.*?)\s+selected\b(.*?\>)/$1 $2/si; $__apk =~ s/(\<option\s*value\s*=\s*["']$__apb["'].*?)(\>)/$1 selected $2/si; ${$__apn} = $__api . $__apj . $__apk . $__apl . $__apg; } } elsif ($__aoy eq "NumericVar" || $__aoy eq "OpenEndVar" || $__aoy eq "HiddenVar") { $__apb = $__apc->{$__aoz}; if (${$__apn} =~ m/\<input[^\>]*?name\s*=\s*["']$__aoz["'].*?\>/si) { my $__api = $`; my $__apf = $&; my $__apg = $'; if ($__apf =~ m/(value\s*=\s*")[^"]*"/si) { $__apf = $` . $1 . $__apb . "\"" . $'; } elsif ($__apf =~ m/(value\s*=\s*')[^']*'/si) { $__apf = $` . $1 . $__apb . "'" . $'; } elsif ($__apf =~ m/\>/s) { $__apf = $` . " value=\"" . $__apb . "\"" . $& . $'; } ${$__apn} = $__api . $__apf . $__apg; } elsif (${$__apn} =~ m/(\<textarea.*?name\s*=\s*["']$__aoz["'].*?\>).*?(\<\/textarea\>)/si) { ${$__apn} = $` . $1 . $__apb . $2 . $'; } } } } 1;  package terminatelinklib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__apo) = @_; $__apo->{'_vo'} = "terminatelink"; $__apo->{'_vp'} = 1; bless($__apo); return $__apo; } sub _vr { my ($__apu, $__apv, $__apw, $__apx, $__apy) = @_; my $__app = ""; if (exists $__apu->{'_uf'}->{'_bc'}) { $__app .= "<span class=\"question_text\""; $__app .= ciwlib9_14_2::_tk($__apu->{'_uf'}->{'_bc'}, 1, 0); $__app .= ">" . $__apu->{'_uf'}->{'_bc'}->{'_op'} . "</span>"; } if ($authlib9_14_2::_ajg) { if (exists($__apu->{'_uf'}->{'_oo'})) { $__app .= "<!--LoadTestMode: <question><name>" . $__apu->{'_if'} . "</name><type>terminate</type></question>-->"; } } if (exists $__apu->{'_uf'}->{'_ma'} && $__apu->{'_uf'}->{'_ma'} ne "donotredirect") { my $__apq = $__apu->{'_uf'}->{'_ma'}; my $__apr = ""; my $__aps = $__apu->{'_uf'}->{'_mb'}; if ($__apq eq "immediately") { $__apr = "When respondents take the survey in regular mode this page will not be displayed. Respondents will be redirected to the url below:<br><br>"; } elsif ($__apq eq "afterclick") { $__apr = "When respondents take the survey in regular mode they will be redirected to the url below after clicking the button:<br><br>"; } elsif ($__apq eq "afterdelay") { $__apr = "When respondents take the survey in regular mode they will be redirected to the url below after " . $__apu->{'_uf'}->{'_lz'} . " seconds:<br><br>"; if (!$authlib9_14_2::_amg) { my $__apt = $__apu->{'_uf'}->{'_lz'} * 1000; $__app .= "<script>"; $__app .= "setTimeout(function(){window.location.href = \"" . $__aps . "\";}, " . $__apt . ");"; $__app .= "</script>"; } } if ($authlib9_14_2::_amg && $__apr) { $__app .= ciwlib9_14_2::_rx($__apr . " <b><a href=\"" . $__aps . "\" target=\"link\">" . $__aps . "</a></b>"); } } return $__app; } sub _vs { } 1;  package quotalib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__apz) = @_; bless($__apz); return $__apz; } sub _vr { my ($__aqb, $__aqc, $__aqd, $__aqe, $__aqf) = @_; my $__aqa = "<input type=\"hidden\" name=\"" . $__aqb->{'_if'} . "\" value=\"\">"; if ($authlib9_14_2::_amg) { $__aqa .= "<br><span class=\"quota_preview\">[QUOTA: " . $__aqb->{'_if'} . "]</span><br>"; } return $__aqa; } sub _vs { } 1;  package selectlib9_14_2; our @ISA = qw(onelistquestionlib9_14_2); sub new { my ($__aqg) = @_; $__aqg->{'_vo'} = "select"; $__aqg->{'_vp'} = 1; bless($__aqg); return $__aqg; } sub _ve { my ($__aqr) = @_; $__aqr->SUPER::_ve(); if (!$authlib9_14_2::_amg) { unless ($__aqr->{'_uk'}) { my $__aqh = $__aqr->{'_uf'}; my $__aqi = $__aqh->{'_pj'}; my $__aqj = $__aqh->{'_vu'}; my $__aqk = authlib9_14_2::_acx($__aqh->{'_hj'}); my $__aql = @{$__aqj}; my $__aqm = 0; my $__aqn = 0; my $__aqo = ""; if ($__aql == 1 && $__aqk && exists($__aqk->{'_jq'})) { if ($__aqi eq "combo" || $__aqi eq "radio") { $__aqm = $__aqh->{'_ml'}; } else { $__aqm = $__aqh->{'_hx'}; } if ($__aqm) { if ($__aqj->[0]->{'_jg'}) { my $__aqp = $__aqj->[0]->{'_jg'}; if ($__aqp->{'_op'}) { $__aqo = $__aqp->{'_op'}; $__aqn = 1; } } else { $__aqn = 1; } if ($__aqn) { my @__aqq = (); if ($__aqi eq "combo" || $__aqi eq "radio") { push (@__aqq, [$__aqr->{'_if'}, $__aqj->[0]->{'_pt'}]); } else { push (@__aqq, [$__aqr->{'_if'} . "_" . $__aqj->[0]->{'_pt'}, 1]); } if ($__aqo) { push (@__aqq, [$__aqr->{'_if'} . "_" . $__aqj->[0]->{'_pt'} . "_other", $__aqo]); } $__aqr->{'_um'} = \@__aqq; } } } } } } sub _vf { my ($__aqz) = @_; my $__aqs = ""; my $__aqt = ""; my $__aqu = $__aqz->{'_uf'}; my $__aqv = "#" . $__aqz->{'_if'} . "_div"; if (exists $__aqu->{'_jd'}) { $__aqt = ciwlib9_14_2::_tk($__aqu->{'_jd'}, 0, 1); if ($__aqt) { $__aqs .= "\n$__aqv .options {" . $__aqt . "}\n"; } } if (exists $__aqu->{'_co'}) { my $__aqw = $__aqu->{'_co'}; my $__aqx = 100 / $__aqw; my $__aqy = $__aqv . ".response_column { max-width:" . $__aqx . "%; }"; if (authlib9_14_2::_aet()) { $__aqs .= "\n \@media only screen and (min-width: 801px){" . $__aqy . "}"; } else { $__aqs .= $__aqy; } } return $__aqs; } sub _vr { my ($__ask, $__asl, $__asm, $__asn, $__aso) = @_; my $__ara = $__ask->{'_uf'}; my $__arb = 0; my $__arc = ""; my $__ard = 0; my $__are = $__ask->{'_if'}; my ($__asp, $__asq, $__asr, $__ass) = (0) x 4; my $__arf = 0; my @__arg = (); my $__arh = ""; my $__ari = $__ara->{'_pj'}; my $__arj = 1; my $__ark = $__ara->{'_vu'}; my $__arl = @{$__ark}; my $__arm = 0; my $__arn = ""; my @__aro = (); my $__arp = 0; my $__arq = 0; my $__arr = ""; my $__ars = ""; my $__art = 0; my @__aru = (); my @__arv = (); my @__arw = (); my $__arx = ""; my @__ary = (); my @__arz = (); my $__asa = ""; my $__asb = 0; my $__asc = ""; if (exists $__ara->{'_co'}) { $__arj = $__ara->{'_co'}; $__ass = int ((($__arl - 1) / $__arj) + 1.001); } if (exists($__ara->{'_ln'})) { my $__asd = 1; my $__ase = 0; $__ase = authlib9_14_2::_acl($__ark); $__arf = authlib9_14_2::_acm($__asm, $__arl, $__asl, $__asd, $__ase); } else { @__arg = (0..($__arl - 1)); $__arf = \@__arg; } if ($__ari eq "combo") { if (exists $__ara->{'_bc'}) { if (exists($__ara->{'_bc'}->{'_op'})) { $__asc .= "<span class=\"question_text\""; $__asc .= ciwlib9_14_2::_tk($__ara->{'_bc'}, 1, 0); $__asc .= ">" . $__ara->{'_bc'}->{'_op'} . "</span>"; } } $__asc .= "\n<select name=\"" . $__are . "\" id=\"" . $__are . "\">\n"; $__asc .= "<option value=\"\">"; if (exists($__ara->{'_dt'})) { $__asc .= $__ara->{'_dt'}; } $__asc .= "</option>\n"; $__asa = ""; for ($__asp = 0; $__asp < $__arl; $__asp++) { $__asb = $__ark->[$__arf->[$__asp]]; $__arm = $__asb->{'_pt'}; if (exists ($__asb->{'_jg'})) { if (exists($__asb->{'_jg'}->{'_op'})) { $__asa .= "\n<input type=\"hidden\" name=\"" . $__are . "_" . $__arm . "_other" . "\" value=\"" . $__asb->{'_jg'}->{'_op'} . "\">\n"; } push(@__arv, $__arf->[$__asp]); } push @__aro, $__arm; $__asc .= "<option value=\"" . $__arm . "\""; if (exists $__ara->{'_ug'}) { my $__asf = $__ara->{'_ug'}->{$__are}; if ($__asf == $__arm) { $__asc .= " selected"; } } $__asc .= " id=\"" . $__are . "_" . $__arm . "\">" . $__asb->{'_op'} . "</option>\n"; } $__asc .= "</select>\n" . $__asa . "\n"; } else { if (exists($__ara->{'_bc'})) { if (exists($__ara->{'_bc'}->{'_op'})) { $__asc .= "<div class=\"question_text\""; $__asc .= ciwlib9_14_2::_tk($__ara->{'_bc'}, 1, 0); $__asc .= ">" . $__ara->{'_bc'}->{'_op'} . "</div>\n"; } } my $__asg = ""; my $__ash = ""; $__asa = ""; $__asc .= "<div class=\"response_body\""; if ($__ari eq "radio") { $__asc .= " role=\"radiogroup\""; } if (exists $__ara->{'_jd'}) { if (exists $__ara->{'_jd'}->{'_et'}) { if (exists $__ara->{'_jd'}->{'_et'}->{'_m'}) { $__asc .= " style=\"" . ciwlib9_14_2::_tl($__ara->{'_jd'}->{'_et'}->{'_m'}) . "\""; } } } $__asc .= ">"; for ($__asp = 0; $__asp < $__arj; $__asp++) { $__asc .= "<div class=\"response_column\" valign=\"top\" align=\"left\">\n"; for ($__asq = 0; $__asq < $__ass; $__asq++) { $__asr = $__asq + ($__asp * $__ass); if ($__asr < $__arl) { $__ash = "clickable response_row"; if (authlib9_14_2::_aes()) { $__ash .= " mobile_select"; } $__asc .= "<div class=\"$__ash\">"; $__asr = $__arf->[$__asr]; $__arm = $__ark->[$__asr]->{'_pt'}; push @__aro, $__arm; if (exists $__ark->[$__asr]->{'_in'}) { push @__arw, $__arm; push @__aru, $__arm; } $__asc .= "<div class=\"input_cell option_column\">\n"; if ($__ari eq "radio") { $__asc .= ciwlib9_14_2::_tm($__are, $__arm, 1, $__ara); } else { $__asc .= ciwlib9_14_2::_tm($__are . "_" . $__arm, 1, 0, $__ara); } $__arq = 0; if (exists($__ark->[$__asr]->{'_jg'})) { $__art = $__ark->[$__asr]->{'_jg'}; $__arr = $__are . "_" . $__arm . "_other"; if (exists($__art->{'_op'})) { $__asc .= "<input type=\"hidden\" name=\"" . $__arr . "\" value=\"" . $__art->{'_op'} . "\">"; } else { $__arp = 1; $__arq = 1; } push(@__arv, $__asr); } $__asc .= "</div><div class=\"option_cell option_column"; if ($__art) { if (exists $__art->{'_ic'}) { $__asc .= " multiline_other_cell"; } } $__asc .= "\">"; $__asc .= "<div class=\"options\">"; $__arx = $__ark->[$__asr]->{'_op'}; if ($__arq) { $__asc .= ciwlib9_14_2::_ri($__arr, $__art, $__ara, $__arx); } else { my $__asi = $__are . "_" . $__arm; $__asc .= "<label for=\"" . $__asi . "\" id=\"" . $__asi . "_label\">" . $__arx . "</label>"; } $__asc .= "</div></div></div>"; } } $__asc .= "</div>\n"; } $__asc .= "</div>\n"; } $__arn = join(",", @__aro); $__asc .= "\n<input type=\"hidden\" name=\"hid_list_" . $__are . "\" value=\"" . $__arn . "\">\n"; my $__arc = ""; if (@__aru > 0) { $__arc = join(",", @__aru); $__asc .= "\n<input type=\"hidden\" name=\"hid_noneabove_" . $__are . "\" value=\"" . $__arc . "\">\n"; } if ($__ari ne "combo" && $__asn) { ciwlib9_14_2::_sj("SSI_List_EventSetup(\"" . $__are . "_*\", [" . $__arn . "], [" . $__arc . "]);"); } if (@__ary) { $__asc .= "\n\n"; $__asc .= "<script type=\"text/javascript\">\n"; $__asc .= join("", @__ary); $__asc .= "\n</script>\n"; $__asc .= "\n\n"; } if ($authlib9_14_2::_ajg) { $__asc .= "<!--LoadTestMode: <question>"; $__asc .= "<name>$__are</name>"; $__asc .= "<type>select</type>"; $__asc .= "<subtype>$__ari</subtype>"; $__asc .= "<indices>$__arn</indices>"; $__asc .= $__ask->SUPER::_vq($__ark, \@__arv); $__asc .= "<exclusiveindices>" . join(',', @__arw) . "</exclusiveindices>"; $__asc .= "<required>" . (exists $__ara->{'_ml'} ? "true" : "false") . "</required>"; $__asc .= "<min>" . (($__ara->{'_hx'} ne "") ? $__ara->{'_hx'} : 0) . "</min>"; $__asc .= "<max>" . (($__ara->{'_ho'} ne "") ? $__ara->{'_ho'} : $__arl) . "</max>"; $__asc .= "</question>-->"; } my %__asj = (); $__asj{'_vv'} = $__arn; $__asj{'_vw'} = $__arp; $__asj{'_vx'} = $__arc; $__ask->{'_vy'} = \%__asj; return $__asc; } sub _vs { my ($__ata, $__atb, $__atc, $__atd) = @_; if (exists $__ata->{'_vy'}) { my $__ast = $__ata->{'_vy'}; my $__asu = ""; my $__asv = 0; my $__asw = ""; if (exists $__ast->{'_vv'}) { $__asu = $__ast->{'_vv'}; } if (exists $__ast->{'_vw'}) { $__asv = $__ast->{'_vw'}; } if (exists $__ast->{'_vx'}) { $__asw = $__ast->{'_vx'}; } if ($__asu) { my $__asx = ""; my $__asy = $__ata->{'_uf'}; my $__asz = $__ata->{'_if'}; if (($__asy->{'_pj'} eq "radio") && exists($__asy->{'_ml'})) { $__asx = "SSI_RadCheck(\"" . $__asz . "\",\"" . $__asz . "\", \"" . ciwlib9_14_2::_sx($__asy->{'_ek'}) . "\", " . $__atd; $__asx .= ", true)"; push @{$__atb}, ($__asx); $__atc->{'_uu'} = 1; } elsif ($__asy->{'_pj'} eq "check") { $__asx = "SSI_CheckBoxCheck(\"" . $__asz . "\",\"" . $__asz . "\",\"" . ciwlib9_14_2::_sx($__asy->{'_ek'}) . "\", " . $__atd; if (!exists($__asy->{'_hx'}) && !exists($__asy->{'_ho'})) { $__asy->{'_hx'} = -1; $__asy->{'_ho'} = -1; } $__asx .= ", [" . $__asu . "], " . $__asy->{'_hx'} . ", " . $__asy->{'_ho'}; $__asx .= ", [" . $__asw . "])"; push @{$__atb}, ($__asx); $__atc->{'_uv'} = 1; } elsif ($__asy->{'_pj'} eq "combo") { $__asx = "SSI_ComboCheck(\"" . $__asz . "\",\"" . $__asz . "\",\"" . ciwlib9_14_2::_sx($__asy->{'_ek'}) . "\", " . $__atd; if (exists($__asy->{'_ml'})) { $__asx .= ", true)"; } else { $__asx .= ", false)"; } push @{$__atb}, ($__asx); $__atc->{'_ux'} = 1; } if ($__asv) { $__asx = "SSI_OtherVerify(\"" . $__asz . "\"," . $__atd; $__asx .= ", [" . $__asu . "], \"" . $__asy->{'_pj'} . "\")"; push @{$__atb}, ($__asx); $__atc->{'_vz'} = 1; $__atc->{'_uy'} = 1; if ($__asy->{'_pj'} eq "radio") { $__atc->{'_wa'} = 1; } } } } } 1;  package constantsumlib9_14_2; our @ISA = qw(onelistquestionlib9_14_2); sub new { my ($__ate) = @_; $__ate->{'_vo'} = "constantsum"; $__ate->{'_vp'} = 1; bless($__ate); return $__ate; } sub _ve { my ($__atn) = @_; $__atn->SUPER::_ve(); unless ($__atn->{'_uk'}) { my $__atf = $__atn->{'_uf'}; my $__atg = $__atf->{'_vu'}; my $__ath = authlib9_14_2::_acx($__atf->{'_hj'}); my $__ati = @{$__atg}; my $__atj = 0; my $__atk = ""; if ($__ati == 1 && $__ath && exists($__ath->{'_jq'})) { if ($__atf->{'_ml'}) { if ($__atg->[0]->{'_jg'}) { my $__atl = $__atg->[0]->{'_jg'}; if ($__atl->{'_op'}) { $__atk = $__atl->{'_op'}; $__atj = 1; } } else { $__atj = 1; } if ($__atj) { my @__atm = (); push(@__atm, [$__atn->{'_if'} . "_" . $__atg->[0]->{'_pt'}, $__atf->{'_dg'}]); if ($__atk) { push(@__atm, [$__atn->{'_if'} . "_" . $__atg->[0]->{'_pt'} . "_other", $__atk]); } $__atn->{'_um'} = \@__atm; } } } } } sub _vf { my ($__atr) = @_; my $__ato = ""; my $__atp = ""; my $__atq = $__atr->{'_uf'}; if (exists $__atq->{'_jd'}) { $__atp = ciwlib9_14_2::_tk($__atq->{'_jd'}, 0, 1); if ($__atp) { $__ato .= "\n#" . $__atr->{'_if'} . "_div .options {" . $__atp . "}\n"; } } return $__ato; } sub _vr { my ($__avd, $__ave, $__avf, $__avg, $__avh) = @_; my $__ats = $__avd->{'_if'}; my $__att = $__avd->{'_uf'}; my $__atu = 0; my $__atv = 0; my $__atw = $__att->{'_vu'}; my $__atx = @{$__atw}; my $__aty = 0; my $__atz = 0; my $__aua = 0; my $__aub = 0; my $__auc = 0; my $__aud = ""; my $__aue = 0; my $__auf = ""; my $__aug = 0; my $__auh = ""; $__aue = authlib9_14_2::_abi($__att->{'_ge'}); if (exists $__att->{'_pg'}) { $__auc = 1; $__aud .= "<tr><td class=\"input_cell\">" . ciwlib9_14_2::_sk($__ats . "_total", $__aue) . "</td>"; if (exists $__att->{'_ug'}) { my $__aui = $__att->{'_ug'}->{$__ats . "_total"}; $__aud =~ s/(id\s*=\s*"$__ats\_total")/$1 value="$__aui"/mi; } $__aud .= "<td class=\"option_cell\"><div class=\"options\"><label for=\"" . $__ats . "_total\">"; $__aud .= $__att->{'_pg'}; $__aud .= "</label></div></td></tr>"; } if (exists($__att->{'_ln'})) { my $__auj = 1; my $__auk = 0; $__auk = authlib9_14_2::_acl($__atw); $__aty = authlib9_14_2::_acm($__avf, $__atx, $__ave, $__auj, $__auk); } else { my @__aul = (0..($__atx - 1)); $__aty = \@__aul; } my $__aum = 0; my $__aun = 0; my $__auo = 0; my @__aup = (); my $__auq = 0; my $__aur = ""; my $__atu = 0; my $__aus = ""; my $__aut = $__att->{'_co'}; my $__auu = 0; my $__auv = 0; my $__auw = 0; my $__aux = ""; my @__auy = (); if ($__aut == 1) { $__aut = 1; $__aum = $__atx; } else { $__aum = int ((($__atx - 1) / $__aut) + 1.001); } if (exists($__att->{'_bc'})) { if (exists($__att->{'_bc'}->{'_op'})) { $__auf .= "<div class=\"question_text\""; $__auf .= ciwlib9_14_2::_tk($__att->{'_bc'}, 1, 0); $__auf .= ">" . $__att->{'_bc'}->{'_op'} . "</div>\n"; } } $__auf .= "<table class=\"inner_table\""; if (exists $__att->{'_jd'}) { if (exists $__att->{'_jd'}->{'_et'}) { if (exists $__att->{'_jd'}->{'_et'}->{'_m'}) { $__auf .= " style=\"" . ciwlib9_14_2::_tl($__att->{'_jd'}->{'_et'}->{'_m'}) . "\""; } } } $__auf .= "><tr>"; for ($__atz = 0; $__atz < $__aut; $__atz++) { $__auu++; $__auf .= "<td valign=\"top\" align=\"left\">\n"; $__auf .= "<table>\n"; for ($__aua = 0; $__aua < $__aum; $__aua++) { $__aub = $__aua + ($__atz * $__aum); $__auf .= "<tr>"; if ($__aub < $__atx) { $__aun = $__aty->[$__aub]; $__auo = $__atw->[$__aun]->{'_pt'}; push @__aup, $__auo; $__aux = $__ats . "_" . $__auo; $__auf .= "<td class=\"input_cell\">"; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__auf .= ciwlib9_14_2::_td($__aux, 0, 1); } my $__auz = "tel"; if (exists $__att->{'_dq'}) { $__auz = "text"; } $__auf .= "<input type=\"" . $__auz . "\" class=\"numeric_input\" name=\"" . $__aux . "\" size=\"" . $__aue ."\" "; if (exists $__att->{'_ug'}) { $__auf .= " value=\"" . $__att->{'_ug'}->{$__aux} . "\""; } $__auf .= " id=\"" . $__aux . "\">\n"; $__auf .= "</td><td class=\"option_cell\">"; $__auf .= "<div class=\"options\">"; $__auh = $__atw->[$__aun]->{'_op'}; $__aug = 0; if (exists($__atw->[$__aun]->{'_jg'})) { $__auq = $__atw->[$__aun]->{'_jg'}; $__aur = $__aux . "_other"; if (exists($__auq->{'_op'})) { $__auf .= "<input type=\"hidden\" name=\"" . $__aur . "\" value=\"" . $__auq->{'_op'} . "\">"; } else { $__atu = 1; $__aug = 1; } push (@__auy, $__aun); } if ($__aug) { $__auf .= ciwlib9_14_2::_ri($__aur, $__auq, $__att, $__auh); } else { $__auf .= "<label for=\"$__aux\">" . $__auh . "</label>"; } $__auf .= "</div></td>\n"; } else { $__auf .= "<td></td><td></td>\n"; } $__auf .= "</tr>"; } if ($__aut == 1) { if ($__auc) { $__auf .= $__aud; } } $__auf .= "</table></td>\n"; if ($__aut > 1 && ($__atz + 1) < $__aut) { $__auu++; $__auf .= "<td class=\"select_column_spacing\"></td>"; } } if ($__aut > 1) { if ($__auc) { $__auf .= "<tr><td colspan=\"" . $__auu . "\"><div class=\"consum_total_row\"><table>" . $__aud . "</table></div></td></tr>"; } } $__auf .= "</tr></table>\n"; if ($__auc) { my %__ava = (); $__ava{$__avd->{'_if'} . "_*"} = 1; $__auf .= ciwlib9_14_2::_si($__ats, \@__aup, \%__ava, "total"); } my $__avb = join(",", @__aup); $__att->{'_uh'} = \@__aup; $__att->{'_uz'} = $__avd->{'_if'} . "_*"; $__auf .= "\n<input type=\"hidden\" name=\"hid_list_" . $__ats . "\" value=\"" . $__avb . "\">\n"; if ($authlib9_14_2::_ajg) { $__auf .= "<!--LoadTestMode: <question><name>$__ats</name>"; $__auf .= "<type>consum</type><consum>" . $__att->{'_dg'} . "</consum>"; $__auf .= "<indices>$__avb</indices>"; $__auf .= $__avd->SUPER::_vq($__atw, \@__auy); $__auf .= "<required>" . (exists $__avd->{'_uf'}->{'_ml'} ? "true" : "false") . "</required>"; $__auf .= "<decimal>" . (exists $__avd->{'_uf'}->{'_dq'} ? "true" : "false") . "</decimal>"; $__auf .= "<wholereq>" . (exists $__avd->{'_uf'}->{'_pw'} ? "true" : "false") . "</wholereq>"; $__auf .= "</question>-->"; } my %__avc = (); $__avc{'_vw'} = $__atu; $__avc{'_vv'} = $__avb; $__avd->{'_vy'} = \%__avc; return $__auf; } sub _vs { my ($__avm, $__avn, $__avo, $__avp) = @_; if (exists $__avm->{'_vy'}) { my $__avi = $__avm->{'_vy'}; my $__avj = ""; my $__avk = 0; if (exists $__avi->{'_vv'}) { $__avj = $__avi->{'_vv'}; } if (exists $__avi->{'_vw'}) { $__avk = $__avi->{'_vw'}; } ciwlib9_14_2::_sv($__avm->{'_uf'}, $__avm->{'_if'}, $__avn, $__avo, $__avp); if ($__avk) { my $__avl = "SSI_OtherVerify(\"" . $__avm->{'_if'} . "\"," . $__avp; $__avl .= ", [" . $__avj . "], \""; $__avl .= "numeric"; $__avl .= "\")"; push @{$__avn}, $__avl; $__avo->{'_vz'} = 1; $__avo->{'_uy'} = 1; } } } 1;  package rankinglib9_14_2; our @ISA = qw(onelistquestionlib9_14_2); sub new { my ($__avq) = @_; $__avq->{'_vo'} = "ranking"; $__avq->{'_vp'} = 1; bless($__avq); return $__avq; } sub _ve { my ($__avz) = @_; $__avz->SUPER::_ve(); if (!$authlib9_14_2::_amg) { unless ($__avz->{'_uk'}) { my $__avr = $__avz->{'_uf'}; my $__avs = $__avr->{'_vu'}; my $__avt = authlib9_14_2::_acx($__avr->{'_hj'}); my $__avu = @{$__avs}; my $__avv = 0; my $__avw = ""; if ($__avu == 1 && $__avt && exists($__avt->{'_jq'})) { if ($__avr->{'_ml'}) { if ($__avs->[0]->{'_jg'}) { my $__avx = $__avs->[0]->{'_jg'}; if ($__avx->{'_op'}) { $__avw = $__avx->{'_op'}; $__avv = 1; } } else { $__avv = 1; } if ($__avv) { my @__avy = (); push(@__avy, [$__avz->{'_if'} . "_" . $__avs->[0]->{'_pt'}, 1]); if ($__avw) { push (@__avy, [$__avz->{'_if'} . "_" . $__avs->[0]->{'_pt'} . "_other", $__avw]); } $__avz->{'_um'} = \@__avy; } } } } } } sub _vf { my ($__aws) = @_; my $__awa ="#" . $__aws->{'_if'} . "_div "; my $__awb = ""; my $__awc = ""; my $__awd = $__aws->{'_uf'}; if (exists $__awd->{'_jd'}) { $__awc = ciwlib9_14_2::_tk($__awd->{'_jd'}, 0, 1); if ($__awc) { $__awb .= "\n" . $__awa . ".options {" . $__awc . "}\n"; } } my $__awe = $__awa . ".draggable_button{\n"; my $__awf = ""; my $__awg = ""; my $__awh = ""; if (exists $__awd->{'_bm'}) { my $__awi = $__awd->{'_bm'}; if (exists $__awi->{'_al'}) { $__awe .= "background-color: #" . $__awi->{'_al'} . ";\n"; } if (exists $__awi->{'_bi'}) { $__awe .= "border-width: " . $__awi->{'_bi'} . "px;\n"; } if (exists $__awi->{'_bh'}) { $__awe .= "border-color: #" . $__awi->{'_bh'} . ";\n"; } } else { $__awe .= "background-color: transparent;\nborder-width: 0px;\n" } if (exists $__awd->{'_ea'}) { $__awe .= "height: " . $__awd->{'_ea'} . "px;\n"; } if (exists $__awd->{'_ed'}) { $__awe .= "width: " . $__awd->{'_ed'} . "px;\n"; } if (exists $__awd->{'_eb'}) { $__awf .= $__awa . ".button_content{\ntext-align: " . $__awd->{'_eb'} . ";\n}\n"; } if (exists $__awd->{'_ec'}) { $__awe .= "padding: " . $__awd->{'_ec'} . "px;\n"; } if (exists $__awd->{'_pl'}) { $__awh = $__awa . ".unanswered{\nopacity: " . ($__awd->{'_pl'} / 100.00) . ";\n}\n"; } if (exists $__awd->{'_lu'} && !exists $__awd->{'_fs'}) { my $__awj = $__awd->{'_lu'}; $__awg .= $__awa . ".rank_number{\n"; if (exists $__awj->{'_al'}) { $__awg .= "background-color: #" . $__awj->{'_al'} . ";\n"; } if (exists $__awj->{'_bi'}) { $__awg .= "border-width: " . $__awj->{'_bi'} . "px;\n"; } if (exists $__awj->{'_bh'}) { $__awg .= "border-color: #" . $__awj->{'_bh'} . ";\n"; } if (exists $__awj->{'_oq'}) { $__awg .= "color: #" . $__awj->{'_oq'} . ";\n"; } $__awg .= "}\n"; }; $__awe .= "}\n"; if ($__awe eq $__awa . ".draggable_button{\n}\n") { $__awe = ""; } $__awb .= "\n" . $__awe . "\n" . $__awf . "\n" . $__awg . "\n" . $__awh . "\n"; my $__awk = ""; my $__awl = ""; my $__awm = 0; my $__awn = 0; my $__awo = 0; my $__awp = 0; my $__awq = 0; my $__awr = ""; if (exists $__awd->{'_pn'}) { $__awk = $__awa . ".unranked_container{\n"; $__awm = $__awd->{'_pn'}; if (exists $__awm->{'_gr'}) { $__awn = $__awm->{'_gr'}; } if (!exists $__awm->{'_fr'}) { if (exists $__awm->{'_bi'}) { $__awk .= "border-width: " . $__awm->{'_bi'} . "px;\n"; $__awk .= "border-style: solid;\n"; } if (exists $__awm->{'_bh'}) { $__awk .= "border-color: #" . $__awm->{'_bh'}. ";\n"; } if (exists $__awm->{'_al'}) { $__awk .= "background-color: #" . $__awm->{'_al'} . ";\n"; } } else { $__awk .= "border: none;\nbackground: none;\n"; } if (exists $__awn->{'_al'}) { $__awk .= "background-color: #" . $__awn->{'_al'} . ";\n"; } $__awk .= "}\n\n"; if ($__awk eq $__awa . ".unranked_container{\n}\n\n") { $__awk = ""; } } $__awb .= $__awk; if ($__awn) { $__awl = ciwlib9_14_2::_tk($__awn, 0, 0); if ($__awl ne "") { $__awb .= $__awa . ".unranked_label{\n" . $__awl . "\n}\n\n"; } $__awl = ""; } if (exists $__awd->{'_lw'}) { $__awo = $__awd->{'_lw'}; $__awr = $__awa . ".ranked_container{\n"; if (exists $__awo->{'_oz'}) { $__awp = $__awo->{'_oz'}; } if (exists $__awo->{'_bk'}) { $__awq = $__awo->{'_bk'}; } if (!exists $__awo->{'_fr'}) { if (exists $__awo->{'_bi'}) { $__awr .= "border-width: " . $__awo->{'_bi'} . "px;\n"; } if (exists $__awo->{'_bh'}) { $__awr .= "border-color: #" . $__awo->{'_bh'} . ";\n"; } if (exists $__awo->{'_al'}) { $__awr .= "background-color: #" . $__awo->{'_al'} . ";\n"; } } else { $__awr .= " border: none;\nbackground: none;\n"; } $__awr .= "}\n\n"; if ($__awr eq $__awa . ".ranked_container{\n}\n\n") { $__awr = ""; } } $__awb .= $__awr; if (exists $__awd->{'_dh'}) { $__awb .= $__awa . ".rank_drag_container{\nwidth: " . $__awd->{'_dh'} . "px;\n}\n\n"; } if ($__awp) { $__awl = ciwlib9_14_2::_tk($__awp, 0, 0); if ($__awl ne "") { $__awb .= $__awa . ".ranked_top_label{\n" . $__awl . "\n}\n\n"; $__awl = ""; } if (exists $__awp->{'_al'}) { $__awk .= "background-color: #" . $__awp->{'_al'} . ";\n"; } } if ($__awq) { $__awl = ciwlib9_14_2::_tk($__awq, 0, 0); if ($__awl ne "") { $__awb .= $__awa . ".ranked_bottom_label{\n" . $__awl . "\n}\n\n"; $__awl = ""; } if (exists $__awq->{'_al'}) { $__awl .= "background-color: #" . $__awq->{'_al'} . ";\n"; } } if ($__awb =~ /^\s*$/) { $__awb = ""; } return $__awb; } sub _wb { my ($__aww, $__awx) = @_; my $__awt = @{$__aww}; my $__awu = 0; my $__awv = 0; for ($__awu = 0; $__awu < $__awt; $__awu++) { if ($__aww->[$__awu]->{'_pt'} == $__awx) { $__awv = 1; last; } } if (!$__awv) { $__awu = -1; } return $__awu; } sub _vr { my ($__ayt, $__ayu, $__ayv, $__ayw, $__ayx) = @_; my $__awy = $__ayt->{'_if'}; my $__awz = $__ayt->{'_uf'}; my $__axa = 0; my $__axb = 0; my $__axc = $__awz->{'_vu'}; my $__axd = @{$__axc}; my $__axe = 0; my $__axf = 0; my $__axg = 0; my $__axh = 0; my $__axi = 0; my $__axj = 0; my $__axk = 0; my $__axl = ""; my $__axm = ""; my $__axn = 0; my $__axk = 0; my @__axo = (); if (exists $__awz->{'_ho'}) { authlib9_14_2::_adt($__awz); $__axk = int($__awz->{'_ho'}); if ($__axk > $__axd) { $__axk = $__axd; } } else { $__axk = $__axd; } $__axi = length($__axk); if ($__awz->{'_pj'} eq "combo") { $__axj = 1; } if (exists($__awz->{'_ln'})) { my $__axp = 1; my $__axq = 0; $__axq = authlib9_14_2::_acl($__axc); $__axe = authlib9_14_2::_acm($__ayv, $__axd, $__ayu, $__axp, $__axq); } else { my @__axr = (); for ($__axf = 0; $__axf < $__axd; $__axf++) { push @__axr, $__axf; } $__axe = \@__axr; } my $__axs = 0; my $__axt = 0; my $__axu = 0; my @__axv = (); my $__axw = 0; my $__axx = ""; my $__axa = 0; my $__axy = ""; my $__axz = $__awz->{'_co'}; my $__aya = 0; my $__ayb = 0; my $__ayc = ""; if (exists($__awz->{'_bc'})) { if (exists($__awz->{'_bc'}->{'_op'})) { $__axl .= "<div class=\"question_text\"" . ciwlib9_14_2::_tk($__awz->{'_bc'}, 1, 0) . ">"; $__axl .= $__awz->{'_bc'}->{'_op'}; $__axl .= "</div>\n"; } } $__axl .= "<div class=\"response_body " . $__awz->{'_pj'} . "\""; if (exists $__awz->{'_jd'}) { if (exists $__awz->{'_jd'}->{'_et'}) { if (exists $__awz->{'_jd'}->{'_et'}->{'_m'}) { $__axl .= " style=\"" . ciwlib9_14_2::_tl($__awz->{'_jd'}->{'_et'}->{'_m'}) . "\""; } } } $__axl .= ">\n"; if ($__awz->{'_pj'} eq "containers") { my $__ayd = "data-max_rank=\"" . $__axk . "\""; my $__aye = ""; my $__ayf = ""; my $__ayg = 0; for ($__axf = 0; $__axf < $__axd; $__axf++) { $__axt = $__axe->[$__axf]; $__axu = $__axc->[$__axt]->{'_pt'}; $__ayc = $__awy . "_" . $__axu; $__axm = $__axc->[$__axt]->{'_op'}; push @__axv, $__axu; $__ayf .= "<div id=\"" . $__ayc . "_button\" class=\"draggable_button\">\n"; if (!exists $__awz->{'_fs'}) { $__ayf .= "<div class=\"rank_display\"><div class=\"rank_number font_primary_color\">"; if ($__axf < $__axk) { $__ayf .= ($__axf + 1); } else { $__ayf .= "<span style=\"visibility:hidden\">8</span>"; } $__ayf .= "</div></div>"; } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__ayf .= ciwlib9_14_2::_td($__ayc, 0, 1); } $__ayf .= "<div class=\"button_content options\""; if (exists $__awz->{'_fs'}) { $__ayf .= " style=\"display: block\""; } $__ayf .= ">" . $__axm . "</div>\n"; $__ayf .= "<input type=\"text\" class=\"hidden_input\" id=\"" . $__ayc . "\" name=\"" . $__ayc . "\" value=\""; if (exists $__awz->{'_ug'}) { $__ayf .= $__awz->{'_ug'}->{$__ayc}; } $__ayf .= "\">"; $__ayf .= "\n<div style=\"clear:both\"></div>"; $__ayf .= "</div>\n"; } $__axl .= "<div class=\"sort_containers hide_for_processing\">\n"; my $__ayh = 0; my $__ayi = ""; $__axl .= "<div class=\"rank_drag_container unranked_container\">\n"; if (exists $__awz->{'_pn'}) { $__ayh = $__awz->{'_pn'}; if (exists $__ayh->{'_gr'}) { $__ayi = $__ayh->{'_gr'}->{'_op'}; } } if ($__ayi ne "") { $__axl .= "<div class=\"rank_drag_container_label unranked_label top_label\">" . $__ayi . "</div>\n"; } $__axl .= "<div class=\"container_sort_area unranked_sort_area\">\n " . $__ayf . "\n</div>\n"; $__axl .= "</div>\n"; my $__ayj = 0; my $__ayk = ""; my $__ayl = ""; if (exists $__awz->{'_lw'}) { $__ayj = $__awz->{'_lw'}; if (exists $__ayj->{'_oz'}) { $__ayk = $__ayj->{'_oz'}->{'_op'}; } if (exists $__ayj->{'_bk'}) { $__ayl = $__ayj->{'_bk'}->{'_op'}; } } $__axl .= "<div class=\"rank_drag_container ranked_container\">\n"; if ($__ayk) { $__axl .= "<div class=\"rank_drag_container_label ranked_top_label top_label\">" . $__ayk . "</div>\n"; } $__axl .= "<div class=\"container_sort_area ranked_sort_area max_rank\" data-max_rank=\"" . $__axk . "\">\n" . $__aye . "</div>\n"; if ($__ayl) { $__axl .= "<div class=\"rank_drag_container_label ranked_bottom_label bottom_label\">" . $__ayl . "</div>"; } $__axl .= "</div>"; $__axl .= "</div>\n<div style=\"clear:both\"></div>\n"; } elsif ($__awz->{'_pj'} eq "dragAndDrop") { my $__aym = "vertical_rank"; my $__ayd = "data-max_rank=\"" . $__axk . "\""; my $__ayn = {}; my $__ayo = {}; my $__ayg = 0; my $__ayp = 0; if (exists $__awz->{'_dz'}) { $__aym = "horizontal_rank"; } $__axl .= "<div class=\"sort_container unsorted max_rank hide_for_processing " . $__aym; if (exists $__awz->{'_jb'}) { $__axl .= " one_click_rank"; } $__axl .= "\" " . $__ayd . ">\n"; for ($__axf = 0; $__axf < $__axd; $__axf++) { $__axt = $__axe->[$__axf]; $__axu = $__axc->[$__axt]->{'_pt'}; push @__axv, $__axu; $__ayc = $__awy . "_" . $__axu; $__axm = $__axc->[$__axt]->{'_op'}; $__axl .= "<div id=\"" . $__ayc . "_button\" class=\"draggable_button "; my $__ayq = 0; if (exists $__awz->{'_ug'}) { if ((!exists $__awz->{'_ug'}->{$__ayc} || $__awz->{'_ug'}->{$__ayc} eq "") && !exists $__awz->{'_jb'}) { $__ayq = 1; } } if ((!exists $__awz->{'_ug'}) || $__ayq) { $__axl .= " unanswered"; } $__axl .= "\">\n"; if (!exists $__awz->{'_fs'}) { $__axl .= "<div class=\"rank_display\"><div class=\"rank_number font_primary_color\">"; if ($__axf < $__axk) { $__axl .= ($__axf + 1); } else { $__axl .= "<span style=\"visibility:hidden\">8</span>"; } $__axl .= "</div></div>"; } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__axl .= ciwlib9_14_2::_td($__ayc, 0, 1); } $__axl .= "<div class=\"button_content options\""; if (exists $__awz->{'_fs'}) { $__axl .= " style=\"display: block\""; } $__axl .= ">" . $__axm . "</div>\n"; $__axl .= "<input type=\"text\" class=\"hidden_input\" id=\"" . $__ayc . "\" name=\"" . $__ayc . "\" value=\""; if (exists $__awz->{'_ug'}) { $__axl .= $__awz->{'_ug'}->{$__ayc}; } $__axl .= "\">"; $__axl .= "\n<div style=\"clear:both\"></div>"; $__axl .= "</div>\n"; } $__axl .= "</div>\n"; } else { if ($__axz == 1) { $__axz = 1; $__axs = $__axd; } else { $__axs = int ((($__axd - 1) / $__axz) + 1.001); } for ($__axf = 0; $__axf < $__axz; $__axf++) { $__axl .= "<div class=\"response_column\" valign=\"top\" align=\"left\">\n"; for ($__axg = 0; $__axg < $__axs; $__axg++) { $__axh = $__axg + ($__axf * $__axs); $__axl .= "<div class=\"response_row\">"; if ($__axh < $__axd) { $__axt = $__axe->[$__axh]; $__axu = $__axc->[$__axt]->{'_pt'}; push @__axv, $__axu; $__axl .= "<div class=\"input_cell option_column\">"; $__ayc = $__awy . "_" . $__axu; if ($__axj) { if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__axl .= ciwlib9_14_2::_td($__ayc, 0, 1); } $__axl .= "<select name=\"" . $__ayc . "\" id=\"" . $__ayc . "\">\n"; if (exists $__awz->{'_ug'}) { $__ayb = $__awz->{'_ug'}->{$__ayc}; $__axl .= ciwlib9_14_2::_sl($__awz, $__ayb, $__axk, $__ayc); } else { $__axl .= ciwlib9_14_2::_sl($__awz, 0, $__axk, $__ayc); } $__axl .= "</select>"; } else { if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__axl .= ciwlib9_14_2::_td($__ayc, 0, 1); } $__axl .= "<input type=\"tel\" class=\"numeric_input\" name=\"" . $__ayc . "\" size=\"" . $__axi ."\" "; if (exists $__awz->{'_ug'}) { $__axl .= " value=\"" . $__awz->{'_ug'}->{$__ayc} . "\""; } $__axl .= " id=\"" . $__ayc . "\">\n"; } $__axl .= "</div><div class=\"option_cell option_column\"><div class=\"options\">"; $__axm = $__axc->[$__axt]->{'_op'}; $__axn = 0; if (exists($__axc->[$__axt]->{'_jg'})) { $__axw = $__axc->[$__axt]->{'_jg'}; $__axx = $__ayc . "_other"; if (exists($__axw->{'_op'})) { $__axl .= "<input type=\"hidden\" name=\"" . $__axx . "\" value=\"" . $__axw->{'_op'} . "\">"; } else { $__axa = 1; $__axn = 1; } push (@__axo, $__axt); } if ($__axn) { $__axl .= ciwlib9_14_2::_ri($__axx, $__axw, $__awz, $__axm); } else { $__axl .= "<label for=\"$__ayc\">" . $__axm . "</label>"; } $__axl .= "</div></div>\n"; } $__axl .= "</div>"; } $__axl .= "</div>\n"; } } $__axl .= "</div>\n"; my $__ayr = join(",", @__axv); $__awz->{'_uh'} = \@__axv; $__awz->{'_uz'} = $__awy . "_*"; $__axl .= "\n<input type=\"hidden\" name=\"hid_list_" . $__awy . "\" value=\"" . $__ayr . "\">\n"; if ($authlib9_14_2::_ajg) { $__axl .= "<!--LoadTestMode: <question><name>" . $__awy . "</name>"; $__axl .= "<type>rank</type><numranks>" . $__axk . "</numranks>"; $__axl .= "<indices>$__ayr</indices>"; $__axl .= "<subtype>" . $__ayt->{'_uf'}->{'_pj'} . "</subtype>"; $__axl .= $__ayt->SUPER::_vq($__axc, \@__axo); if (exists $__ayt->{'_uf'}->{'_hx'}) { $__axl .= "<min>" . $__ayt->{'_uf'}->{'_hx'} . "</min>"; } if (exists $__ayt->{'_uf'}->{'_ho'}) { $__axl .= "<max>" . $__ayt->{'_uf'}->{'_ho'} . "</max>"; } $__axl .= "<required>" . (exists $__ayt->{'_uf'}->{'_ml'} ? "true" : "false") . "</required>"; $__axl .= "</question>-->"; } my %__ays = (); $__ays{'_vw'} = $__axa; $__ays{'_vv'} = $__ayr; $__ayt->{'_vy'} = \%__ays; return $__axl; } sub _vs { my ($__azc, $__azd, $__aze, $__azf, $__azg) = @_; if (exists $__azc->{'_vy'}) { my $__ayy = $__azc->{'_vy'}; my $__ayz = ""; my $__aza = 0; if (exists $__ayy->{'_vv'}) { $__ayz = $__ayy->{'_vv'}; } if (exists $__ayy->{'_vw'}) { $__aza = $__ayy->{'_vw'}; } ciwlib9_14_2::_su($__azc->{'_uf'}, $__azc->{'_if'}, $__azd, $__aze, $__azf); if ($__aza) { my $__azb = "SSI_OtherVerify(\"" . $__azc->{'_if'} . "\"," . $__azf; $__azb .= ", [" . $__ayz . "], \""; if ($__azc->{'_uf'}->{'_pj'} eq "combo") { $__azb .= "combo"; } else { $__azb .= "numeric"; } $__azb .= "\")"; push @{$__azd}, $__azb; $__aze->{'_vz'} = 1; $__aze->{'_uy'} = 1; } } } 1;  package semanticdifflib9_14_2; our @ISA = qw(onelistquestionlib9_14_2); sub new { my ($__azh) = @_; $__azh->{'_vo'} = "semanticdiff"; bless($__azh); return $__azh; } sub _vf { my ($__azn) = @_; my $__azi = ""; my $__azj = ""; my $__azk = $__azn->{'_uf'}; if (exists $__azk->{'_gz'}) { $__azj = ciwlib9_14_2::_tk($__azk->{'_gz'}, 0, 0); if ($__azj) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .left_label_cell {" . $__azj . "}\n"; } } if (exists $__azk->{'_mr'}) { $__azj = ciwlib9_14_2::_tk($__azk->{'_mr'}, 0, 0); if ($__azj) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .right_label_cell {" . $__azj . "}\n"; } } if (exists $__azk->{'_t'}) { $__azj = ciwlib9_14_2::_tk($__azk->{'_t'}, 0, 0); if ($__azj) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .col_label_cell {" . $__azj . "}\n"; } my $__azl = $__azk->{'_t'}->{'_et'}; if ($__azl->{'_m'} eq "left - right") { $__azi .= "\n#" . $__azn->{'_if'} . "_div .col_left_label_cell {text-align: left}\n"; $__azi .= "\n#" . $__azn->{'_if'} . "_div .col_right_label_cell {text-align: right}\n"; } } if (exists $__azk->{'_bg'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .inner_table td {border-width: " . $__azk->{'_bg'} . "px; border-style: solid;}\n"; } if (exists $__azk->{'_cc'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .inner_table td {padding: " . $__azk->{'_cc'} . "px;}\n"; } if (exists $__azk->{'_q'}) { if (exists $__azk->{'_q'}->{'_ay'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .alt_color1 {background-color: #" . $__azk->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__azk->{'_q'}->{'_az'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .alt_color2 {background-color: #" . $__azk->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__azk->{'_nx'}) { my $__azm = $__azk->{'_nx'}; if (exists $__azm->{'_fi'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .ui-slider-handle {"; $__azi .= "background:url(\"" . $__azm->{'_fi'} . "\") no-repeat center;"; $__azi .= "border-width: 0px;"; $__azi .= "margin-top: 1px;"; $__azi .= "}\n"; } elsif (exists $__azm->{'_fg'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .ui-slider-handle {"; $__azi .= "background-color: #" . $__azm->{'_fg'} . ";"; $__azi .= "background-image: none;"; $__azi .= "border-width: 0px;"; $__azi .= "margin-top: 1px;"; $__azi .= "}\n"; } if (exists $__azm->{'_an'}) { $__azi .= "\n#" . $__azn->{'_if'} . "_div .slider_control {"; $__azi .= "background-color: #" . $__azm->{'_an'} . ";"; $__azi .= "background-image: none;"; $__azi .= "border-width: 0px;"; $__azi .= "}\n"; } } return $__azi; } sub _vr { my ($__bbg, $__bbh, $__bbi, $__bbj, $__bbk) = @_; my $__azo = $__bbg->{'_uf'}; my $__azp = ""; my $__azq = 0; my $__azr = $__azo->{'_vu'}; my $__azs = authlib9_14_2::_acy($__azo->{'_hz'}); my $__azt = @{$__azr}; my $__azu = 0; my $__azv = 0; $__azp .= "<table role=\"table\" class=\"inner_table"; if ($__azo->{'_pj'} eq "slider" && !$__bbj) { $__azv = 1; $__azo->{'_pj'} = "radio"; $__azp .= " radio_slider"; } $__azp .= "\" width=\"100%\" border=0 cellpadding=0 cellspacing=0 "; if ($__azo->{'_lc'}) { $__azp .= " style=\"width: " . $__azo->{'_lc'} . "px\""; } $__azp .= ">"; my $__azw = 20; if (exists $__azo->{'_gv'}) { $__azw = $__azo->{'_gv'}; } my $__azx = 0; my @__azy = (); my $__azz = 0; if (exists $__azo->{'_hb'}) { if (exists $__azo->{'_mt'}) { my $__baa = $__azo->{'_hb'}; my $__bab = $__azo->{'_mt'}; if ($__baa < $__bab) { for ($__azu = $__baa; $__azu <= $__bab; $__azu++) { push @__azy, $__azu; } } else { for ($__azu = $__baa; $__azu >= $__bab; $__azu--) { push @__azy, $__azu; } } } } my $__bac = @__azy; my $__bad = 0; if (exists $__azo->{'_u'}) { my $__bae = 0; my $__baf = authlib9_14_2::_acy($__azo->{'_u'}); my $__bag = 0; my $__bah = 0; if ($__baf) { $__bad = @{$__baf}; } if ($__bad) { if ($__bac == 0) { $__azz = 1; } $__azx = int((100 - ($__azw * 2)) / $__bad); if ($__azx > int($__azx)) { $__azx = authlib9_14_2::_abj($__azx, 1); } $__azp .= "<tr class=\"column_header_row alt_color1\"><td class=\"left_label_header\" width=\"" . $__azw . "%\">&nbsp;</td>"; if (!$__azz && ($__bad != $__bac) && ($__azo->{'_pj'} eq "radio")) { $__bag = 1; $__azp .= "<td colspan=\"" . $__bac . "\" style=\"padding: 0px;\">\n"; $__azp .= "<table class=\"anchor_table\" width=\"100%\"><tr>"; $__bah = 100 / $__bad; } for ($__azu = 0; $__azu < @{$__baf}; $__azu++) { $__bae = $__baf->[$__azu]; $__azp .= "<td role=\"columnheader\" id=\"col_" . ($__azu + 1) . "\" class=\"col_label_cell"; if ($__azu == 0) { $__azp .= " col_left_label_cell"; } elsif ($__azu == @{$__baf} - 1) { $__azp .= " col_right_label_cell"; } $__azp .= "\" width=\""; if ($__bag) { $__azp .= $__bah; } else { $__azp .= $__azx; } $__azp .= "%\">" . $__bae->{'_op'} . "</td>"; if ($__azz) { push @__azy, $__bae->{'_pt'}; } } if ($__bag) { $__azp .= "</tr></table>"; } $__azp .= "<td class=\"right_label_header\" width=\"" . $__azw . "%\">&nbsp;</td></tr>"; } } if (!$__azz && $__bac) { $__azx = (100 - ($__azw * 2)) / $__bac; if ($__azx > int($__azx)) { $__azx = authlib9_14_2::_abj($__azx, 1); } } if (exists $__azo->{'_ln'}) { my $__bai = 1; my $__baj = 0; $__baj = authlib9_14_2::_acl($__azr); $__azq = authlib9_14_2::_acm($__bbi, $__azt, $__bbh, $__bai, $__baj); } else { my @__bak = (0..($__azt - 1)); $__azq = \@__bak; } my $__bal = 0; my $__bam = 0; my @__ban = (); my $__bao = ""; my $__bap = ""; my $__baq = ""; my $__bar = ""; my $__bas = ""; my $__bat = 0; my @__bau = (); my $__bav = 0; my $__baw = 0; if (exists $__azo->{'_lm'} || exists $__azo->{'_ll'}) { @__bau = reverse(@__azy); } if (exists $__azo->{'_lm'}) { my $__bax = authlib9_14_2::_acm($__bbi, 2, $__bbh * 17, 1, 2); if ($__bax->[0]) { $__bat = 1; } } for ($__azu = 0; $__azu < $__azt; $__azu++) { $__bam = $__azr->[$__azq->[$__azu]]->{'_pt'}; $__bao = $__bbg->{'_if'} . "_" . $__bam; push @__ban, $__bam; $__azp .= "<tr id=\"" . $__bao . "_row\" class=\""; if ($__azu & 1) { $__azp .= "alt_color1"; } else { $__azp .= "alt_color2"; } $__azp .= " body_row\""; if ($__azo->{'_pj'} eq "radio") { $__azp .= " role=\"radiogroup\""; } $__azp .= ">"; if (exists $__azo->{'_ll'}) { $__bav = authlib9_14_2::_acm($__bbi, 2, ($__bbh * 23) + $__azu, 1, 2); if ($__bav->[0] % 2) { $__bat = 1; } else { $__bat = 0; } } $__bar = $__azr->[$__azq->[$__azu]]->{'_op'}; if ($__azs) { $__bas = $__azs->[$__bam - 1]->{'_op'}; } if ($__azo->{'_ee'} eq "left") { if ($__bat) { $__bap = $__bas; $__baq = $__bar; } else { $__bap = $__bar; $__baq = $__bas; } } else { if ($__bat) { $__bap = $__bar; $__baq = $__bas; } else { $__bap = $__bas; $__baq = $__bar; } } $__azp .= "<td class=\"row_label_cell left_label_cell " . $__bao . "\" width=\"" . $__azw . "%\">"; $__azp .= "<div class=\"options\">" . $__bap . "</div>"; $__azp .= "</td>"; if ($__azo->{'_pj'} eq "radio") { if ($__bat) { $__baw = \@__bau; } else { $__baw = \@__azy; } foreach $__bal (@{$__baw}) { $__azp .= "<td class=\"input_cell clickable " . $__bao . "\""; if (!$__azv) { $__azp .= " width=\"" . $__azx . "%\""; } $__azp .= ">"; $__azp .= ciwlib9_14_2::_tm($__bao, $__bal, 1, $__azo); $__azp .= "</td>"; } } else { $__azp .= "<td class=\"" . $__bao . "\""; if ($__bad > 1) { $__azp .= " colspan=\"" . $__bad . "\""; } $__azp .= ">"; $__azp .= "<div id=\"" . $__bao . "\" class=\"slider_container"; if (!$__azz) { $__azp .= " slider_continuous_scale"; } $__azp .= "\">\n"; $__azp .= "<div class=\"slider_control"; if ($__bat) { $__azp .= " flip_scale"; } $__azp .= "\">\n"; $__azp .= "<input name=\"" . $__bao . "\" type=\"text\" class=\"hidden_input\" value=\"\">\n"; $__azp .= "</div>\n"; $__azp .= "</div>\n"; $__azp .= "</td>"; } $__azp .= "<td class=\"row_label_cell right_label_cell " . $__bao . "\" width=\"" . $__azw . "%\">"; $__azp .= "<div class=\"options\">" . $__baq . "</div>"; $__azp .= "</td></tr>"; } $__azp .= "</table>"; $__azp .= "\n<input type=\"hidden\" name=\"hid_list_" . $__bbg->{'_if'} . "\" value=\"" . join(",", @__ban) . "\">\n"; if ($__azo->{'_pj'} eq "slider") { my $__bay = ""; $__bay .= "GlobalDocumentReadyArray.push(function() {\n"; $__bay .= "SSI_SliderSetup(\"" . $__bbg->{'_if'} . "\","; if ($__azz) { $__bay .= "0, 0, true, false, [" . join(",", @__azy) . "]"; } else { my $__baa = 0; my $__bab = 0; if (exists $__azo->{'_hb'}) { $__baa = $__azo->{'_hb'}; if ($__baa eq "") { $__baa = 0; } } if (exists $__azo->{'_mt'}) { $__bab = $__azo->{'_mt'}; if ($__bab eq "") { $__bab = 0; } } if ($__baa < 0 || ($__baa > $__bab)) { $__baa = 1; $__bab = $__bac; $__bay .= $__baa . ","; $__bay .= $__bab . ","; $__bay .= "false, true, [" . join(",", @__azy) . "]"; } else { $__bay .= $__baa . ","; $__bay .= $__bab . ","; $__bay .= "false, false, []"; } } $__bay .= ", false,"; if (exists $__azo->{'_ug'}) { my $__baz = $__azo->{'_ug'}; my $__bba = ""; my @__bbb = (); my $__bbc = 0; foreach $__bba (sort keys %{$__baz}) { if ($__bba =~ m/.*?_(\d+)/) { $__bbc = $1; } if ($__baz->{$__bba} ne "") { push @__bbb, "[" . $__bbc . "," . $__baz->{$__bba} . "]"; } } $__bay .= "[" . join(",", @__bbb) . "],"; } else { $__bay .= "[],"; } if (exists $__azo->{'_nx'}) { my $__bbd = $__azo->{'_nx'}; if (exists $__bbd->{'_fj'}) { $__bay .= "\"" . $__bbd->{'_fj'} . "\","; if ($__bbd->{'_fj'} eq "custom") { $__bay .= $__bbd->{'_fh'} . ","; } else { $__bay .= "0,"; } } else { $__bay .= "\"center\", 0,"; } } else { $__bay .= "\"center\", 0,"; } if (exists $__azo->{'_lm'} || exists $__azo->{'_ll'}) { $__bay .= "true"; } else { $__bay .= "false"; } $__bay .= ");\n});"; $__azp .= authlib9_14_2::_xh($__bay); } my %__bbe = (); $__bbe{'_vv'} = join(",", @__ban); $__bbg->{'_vy'} = \%__bbe; if ($authlib9_14_2::_ajg) { my $__bbf = $__bbg->{'_if'}; $__azp .= "<!--LoadTestMode: <question><name>" . $__bbf . "</name><type>semanticdiff</type><options>" . join(",", @__azy) . "</options>"; $__azp .= "<indices>" . join(",", @__ban) . "</indices>"; $__azp .= "<subtype>" . $__azo->{'_pj'} . "</subtype>"; if ($__azo->{'_pj'} eq "slider") { if (exists $__azo->{'_nx'}) { my $__bbd = $__azo->{'_nx'}; if (exists $__bbd->{'_fj'}) { $__azp .= "<handleposition>" . $__bbd->{'_fj'} . "</handleposition>"; } else { $__azp .= "<handleposition>center</handleposition>"; } } else { $__azp .= "<handleposition>center</handleposition>"; } } $__azp .= "<required>" . (exists $__bbg->{'_uf'}->{'_ml'} ? "true" : "false") . "</required>"; $__azp .= "</question> -->"; } return $__azp; } sub _vs { my ($__bbs, $__bbt, $__bbu, $__bbv) = @_; if (exists $__bbs->{'_vy'}) { my $__bbl = $__bbs->{'_vy'}; my $__bbm = ""; if (exists $__bbl->{'_vv'}) { $__bbm = $__bbl->{'_vv'}; if ($__bbm) { my $__bbn = ""; my $__bbo = $__bbs->{'_uf'}; my $__bbp = $__bbs->{'_if'}; my $__bbq = 0; my @__bbr = split(",", $__bbm); if (($__bbo->{'_pj'} eq "radio") && exists($__bbo->{'_ml'})) { for ($__bbq = 0; $__bbq < @__bbr; $__bbq++) { $__bbn = "SSI_RadCheck(\"" . $__bbp . "_" . $__bbr[$__bbq] . "\",\"" . $__bbp . "\", \"" . ciwlib9_14_2::_sx($__bbo->{'_ek'}) . "\", " . $__bbv . ", true)"; push @{$__bbt}, ($__bbn); } $__bbu->{'_uu'} = 1; } elsif (($__bbo->{'_pj'} eq "slider") && exists($__bbo->{'_ml'})) { my $__bbq = 0; my @__bbr = split(",", $__bbm); for ($__bbq = 0; $__bbq < @__bbr; $__bbq++) { $__bbn = "SSI_SliderCheck(\"" . $__bbp . "_" . $__bbr[$__bbq] . "\",\"" . $__bbp . "\", \"" . ciwlib9_14_2::_sx($__bbo->{'_ek'}) . "\", " . $__bbv . ", true)"; push @{$__bbt}, ($__bbn); } $__bbu->{'_vd'} = 1; } } } } } 1; 
