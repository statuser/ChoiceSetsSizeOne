# ---------------------------------------------------------------------------
#     ACBCLIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package acbclib9_14_2; our @ISA = qw(questionlib9_14_2); $acbclib9_14_2::_bky = {}; $acbclib9_14_2::_blb = 0; $acbclib9_14_2::_bla = {}; sub _bhi { $acbclib9_14_2::_bky = {}; $acbclib9_14_2::_blb = 0; $acbclib9_14_2::_bla = {}; } sub _ve { my ($__irf) = @_; my $__ira = $__irf->{'_if'}; $__ira =~ s/_(.*?)$//; my $__irb = authlib9_14_2::_aao($__ira); my $__irc = $__irb->{'_ac'}; my $__ird = authlib9_14_2::_acy($__irc); my $__ire = 0; if ($__ird) { $__ire = @{$__ird}; } $__irf->_bhj($__irb, $__ird, $__ire); if (!exists $__irf->{'_uk'}) { $__irf->SUPER::_ve(); $__irf->{'_uf'}->{'_ae'} = $__ird; $__irf->{'_uf'}->{'_blr'} = $__ira; $__irf->{'_uf'}->{'_bld'} = $__irb; } } sub _bhj { my ($__irg, $__irh, $__iri, $__irj) = @_; if ($__irj == 0) { $__irg->{'_uk'} = 1; } } sub _vf { my ($__irq) = @_; my $__irk = ""; my $__irl = -1; my $__irm = 0; my $__irn = 0; my $__iro = $__irq->{'_vo'}; my $__irp = 0; if (exists $__irq->{'_uf'}->{'_cs'}) { $__irn = $__irq->{'_uf'}->{'_cs'}; $__irl = $__irn; } if (exists $__irq->{'_uf'}->{'_bw'}) { $__irm = $__irq->{'_uf'}->{'_bw'}; $__irk .= "." . $__iro . " .inner_table td{border-bottom-width:" . $__irm . "px; border-bottom-style: solid;}\n"; if ($__irm > 0) { $__irl = $__irm; } } if ($__irl > -1) { if ($__irm) { $__irp = $__irl; } else { $__irp = $__irl * 2; } $__irk .= "." . $__iro . " .inner_table td{border-left-width:" . $__irl . "px; border-left-style: solid;}\n"; $__irk .= "." . $__iro . " .inner_table{border-right-width:" . $__irl . "px; border-right-style: solid;}\n"; $__irk .= "." . $__iro . " .acbc_task_top_row td{border-top-width:" . $__irl . "px; border-top-style: solid;}\n"; $__irk .= "." . $__iro . " .acbc_task_bottom_row td{border-top-width:" . $__irp . "px; border-top-style: solid;}\n"; $__irk .= "." . $__iro . " .inner_table{border-bottom-width:" . $__irl . "px; border-bottom-style: solid;}\n"; } return $__irk; } sub _bhk { } sub _bhl { my ($__irt) = @_; if (!exists($acbclib9_14_2::_bky->{$__irt})) { if ($authlib9_14_2::_aii) { seek $authlib9_14_2::_ajm, $authlib9_14_2::_aii, 0; my $__irr = authlib9_14_2::_zi(1); if (exists $__irr->{$__irt}) { my $__irs = $__irr->{$__irt}; seek $authlib9_14_2::_ajm, $__irs, 0; $acbclib9_14_2::_bky->{$__irt} = authlib9_14_2::_zi(1); } else { authlib9_14_2::_zq(161, "Cannot find ACBC exercise.", "Cannot find ACBC exercise: " . $__irt . " in lookup table.", ""); } } } } sub _bhm { my ($__iry) = @_; my $__iru = authlib9_14_2::_acy($__iry); my $__irv = authlib9_14_2::_acx($__iry); if ($__iru && $__irv && exists($__irv->{'_jq'})) { my %__irw = (); my $__irx = 0; foreach $__irx (@{$__iru}) { $__irw{$__irx->{'_pt'}} = authlib9_14_2::_acv($__irx); } $__iru = \%__irw; } return $__iru; } sub _bhn { my ($__isa, $__isb) = @_; my $__irz = 0; if (ref($__isa) eq "ARRAY") { $__irz = $__isa->[$__isb - 1]; } else { $__irz = $__isa->{$__isb}; } return $__irz; } sub _bho { my ($__ise, $__isf, $__isg, $__ish, $__isi) = @_; my $__isc = "<div id=\"" . $__ise . "_rel_" . $__isg . "\" "; my $__isd = ""; if (exists $__isf->{'_px'}) { if ($__isf->{'_px'} > 0) { $__isd .= " width: " . $__isf->{'_px'} . "px;"; } } if (exists $__isf->{'_fq'}) { if ($__isf->{'_fq'} > 0) { $__isd .= " height: " . $__isf->{'_fq'} . "px;"; } } if (!$__isi) { $__isd .= "margin: 10px; padding: 5px;"; } if ($__ish) { $__isd .= $__ish; } if ($authlib9_14_2::_amg) { $__isd .= " border: 4px dashed #99CC00;"; } if ($__isd) { $__isc .= " style=\"" . $__isd . "\" \n"; } $__isc .= ">"; if (exists $__isf->{'_ds'}) { $__isc .= $__isf->{'_ds'}; } elsif ($authlib9_14_2::_amg) { $__isc .= "Conditional Display text for relationship #" . $__isg . " will be shown here."; } $__isc .= "</div>"; return $__isc; } sub _bhp { my ($__iss) = @_; my $__isj = ""; my $__isk = 0; $__isj .= authlib9_14_2::_zb(); if ($authlib9_14_2::_akn{"sys_acbc_cond_rel"}) { $__isk = $authlib9_14_2::_akn{"sys_acbc_cond_rel"}; $__isj .= $__isk . ","; if (exists $__iss->{'_dd'}) { my $__isl = $__iss->{'_dd'}; my $__ism = $__isl->{'_md'}->[$__isk - 1]; my $__isn = $__ism->{'_ae'}; my $__iso = 0; my @__isp = (); my $__isq = $authlib9_14_2::_akn{"sys_acbc_byo_request"}; my $__isr = 0; if ($__isq) { foreach $__iso (@{$__isn}) { if ($__isq =~ m/A-$__iso\s*L-(\d+)/i) { push @__isp, [$__iso, $1]; } } if (@__isp) { $__isj .= _bhq($__ism, \@__isp, $__iss); $__isr = 1; } } else { if (exists $__ism->{'_bn'}) { if (exists $__ism->{'_bn'}->{'_ds'}) { $__isj .= $__ism->{'_bn'}->{'_ds'}; $__isr = 1; } } } if ($__isr) { $__isj .= "<script type=\"text/javascript\">\n"; $__isj .= "SSI_SetupToolTips();\n"; $__isj .= "\n</script>\n"; } } } return $__isj; } sub _bhq { my ($__itf, $__itg, $__ith) = @_; my $__ist = ""; my $__isu = 0; my $__isv = 0; my $__isw = @{$__itg}; my $__isx = $__ith->{'_ad'}; my $__isy = 0; my $__isz = 0; my $__ita = 0; my $__itb = 0; my $__itc = 0; for ($__isu = 0; $__isu < $__isw; $__isu++) { $__isz = 0; $__itb = $__itg->[$__isu]->[0]; $__ita = $__itg->[$__isu]->[1]; if (exists $__isx->{$__itb} && exists $__isx->{$__itb}->{'_kp'}) { $__isz = $__ita; } else { $__isz = $__ita - 1; } for ($__isv = $__isu + 1; $__isv < $__isw; $__isv++) { $__itb = $__itg->[$__isv]->[0]; $__itc = _bhr($__itb, $__isx); $__isz *= $__itc; } $__isy += $__isz; } my $__itd = $__itf->{'_ja'}; my $__ite = $__itd->[$__isy]; if ($__ite) { seek $authlib9_14_2::_ajm, $__ite, 0; $__ist = authlib9_14_2::_zi(1); } return $__ist; } sub _bhr { my ($__itm, $__itn) = @_; my $__iti = 0; my $__itj = 0; my $__itk = $__itn->{$__itm}->{'_he'}; $__iti = authlib9_14_2::_acx($__itk); if ($__iti && exists($__iti->{'_jq'})) { $__itk = $__iti->{'_jq'}; } my $__itl = 0; $__itj = authlib9_14_2::_acy($__itk); if ($__itj) { $__itl = @{$__itj}; if (exists $__itn->{$__itm}->{'_kp'}) { $__itl++; } } return $__itl; } sub _bhs { my ($__its, $__itt, $__itu, $__itv) = @_; my $__ito = ""; if (exists $__its->{'_jy'} || exists $__its->{'_ih'} || exists $__its->{'_ig'}) { my $__itp = $__itu->{'_ko'}->[$__itt->{'_pt'} - 1]; my $__itq = _bhw($__itp, $__itv); my $__itr = 0; if (exists $__itv->{'_kf'}) { if (exists $__itv->{'_kf'}->{'_ix'}) { $__itr = $__itv->{'_kf'}->{'_ix'}; } } if ($__itr > 0) { $__itp = authlib9_14_2::_abj($__itp, $__itr); } if ($__itp > 0) { if (exists $__its->{'_jy'}) { $__ito = $__its->{'_jy'}; } } elsif ($__itp == 0) { if (exists $__its->{'_ih'}) { $__ito = $__its->{'_ih'}; } } elsif ($__itp < 0) { if (exists $__its->{'_ig'}) { $__ito = $__its->{'_ig'}; $__itq =~ s/-//; } } $__ito = authlib9_14_2::_acq($__ito); $__ito =~ s/\[%ACBCPRICELEVELTEXT\(\)%\]/$__itq/gi; } return $__ito; } sub _bht { my ($__ivy, $__ivz, $__iwa, $__iwb, $__iwc) = @_; my $__itw = @{$__ivy}; my $__itx = 0; my $__ity = 0; my $__itz = 0; my $__iua = 0; my @__iub = (); my $__iuc = 0; my $__iud = 0; my $__iue = 0; my $__iuf = $__iwc->{'_ad'}; my $__iug = @{$__iwa}; my $__iuh = 0; my $__iui = ""; my $__iuj = 0; my $__iuk = []; my $__iul = {}; my $__ium = {}; my $__iun = 0; my $__iuo = 0; my $__iup = 0; my %__iuq = (); my %__iur = (); my $__ius = 0; my %__iut = (); my $__iuu = 0; my $__iuv = 0; my $__iuw = "<!--#Empty Level#-->"; if (exists $__iwc->{'_dd'}) { $__iun = $__iwc->{'_dd'}; if (exists $__iun->{'_gg'}) { $__iul = $__iun->{'_gg'}; } $__iuo = $__iun->{'_md'}; $__iup = 0; for ($__itz = 0; $__itz < $__iug; $__itz++) { $__iut{$__iwa->[$__itz]} = 1; } foreach $__iup (@{$__iuo}) { $__iuu = 1; if (exists $__iup->{'_l'}) { foreach $__iud (@{$__iup->{'_ae'}}) { if (!exists $__iut{$__iud}) { $__iuu = 0; $__iup->{'_uk'} = 1; last; } } if ($__iuu) { $__iuv = $__iup->{'_l'}->{'_jx'}; if ($__iuv > 0) { $__ium->{$__iuv} = 1; } } } } } for ($__itz = 0; $__itz < $__itw; $__itz++) { push @__iub, {'_blo'=>$__ivy->[$__itz]->[0], '_blc'=>[]}; } if (exists $__iwc->{'_kf'}) { $__iuc = $__iwc->{'_kf'}->{'_kg'}; } for ($__itz = 0; $__itz < $__iug; $__itz++) { $__iuh = 0; $__iud = $__iwa->[$__itz]; $__iuq{$__iud} = $__itz + 1; if (exists $__iul->{$__iud}) { next; } if ($__iud != $__iuc) { if (exists $__iuf->{$__iud}) { if (!exists $__ium->{$__iud}) { $__iuh = _bhm($__iuf->{$__iud}->{'_he'}); } } else { next; } } if ($__iwb) { push @{$__iuk}, $__ivz->[$__itz]->{'_op'}; } for ($__iua = 0; $__iua < $__itw; $__iua++) { $__iui = ""; $__iue = $__ivy->[$__iua]->[$__itz + 1]; if ($__iud == $__iuc) { $__iui = _bhw($__iue, $__iwc); } else { if (exists $__ium->{$__iud}) { $__iui = ""; } elsif ($__iue == 0) { if (exists $__iuf->{$__iud} && exists $__iuf->{$__iud}->{'_ib'}) { $__iui = $__iuf->{$__iud}->{'_ib'}; } else { $__iui = $__iuw; } } else { $__iuj = _bhn($__iuh, $__iue); $__iui = $__iuj->{'_op'}; } } if (authlib9_14_2::_zo($__iui) eq "") { $__iui = $__iuw; } push @{$__iub[$__iua]->{'_blc'}}, $__iui; } $__iur{$__iud} = $__ius; $__ius++; } if ($__iuo) { my @__iux = (); my $__iuy = 0; my $__iuz = 0; my $__iva = 0; my $__ivb = ""; my $__ivc = 0; my $__ivd = ""; my $__ive = 0; foreach $__iup (@{$__iuo}) { if (exists $__iup->{'_l'} && !exists $__iup->{'_uk'}) { $__ive = $__iup->{'_l'}; if (exists $__ive->{'_gr'}) { $__ivd = $__ive->{'_gr'}; } else { $__ivd = ""; } if (authlib9_14_2::_zo($__ivd) eq "") { $__ivd = "&nbsp;"; } $__iuy = $__iup->{'_ae'}; $__iuv = $__ive->{'_jx'}; for ($__iua = 0; $__iua < $__itw; $__iua++) { @__iux = (); foreach $__iuz (@{$__iuy}) { $__iva = $__ivy->[$__iua]->[$__iuq{$__iuz}]; push @__iux, [$__iuz, $__iva]; } $__ivb = _bhq($__iup, \@__iux, $__iwc); if (authlib9_14_2::_zo($__ivb) eq "") { $__ivb = $__iuw; } if ($__iuv > 0) { $__iub[$__iua]->{'_blc'}->[$__iur{$__iuv}] = $__ivb; } elsif ($__iuv == -1) { _bhu($__iub[$__iua]->{'_blc'}, $__ivb, $__ivc); } elsif ($__iuv == -2) { push @{$__iub[$__iua]->{'_blc'}}, $__ivb; } } if ($__iuv == -1) { if ($__iwb) { _bhu($__iuk, $__ivd, $__ivc); } my $__ivf = 0; foreach $__ivf (sort {$a <=> $b} keys %__iur) { $__iur{$__ivf}++; } $__ivc++; } elsif ($__iuv == -2) { if ($__iwb) { push @{$__iuk}, $__ivd; } } } } } my $__ivg = 0; my %__ivh = (); if (exists $__iwc->{'_hv'}) { my $__ivi = $__iwc->{'_hv'}; my $__ivj = 0; my $__ivk = ""; my $__ivl = 0; my @__ivm = (); my @__ivn = (); my $__ivo = ""; my $__ivp = 0; my $__ivq = 0; my $__ivr = 0; foreach $__ivj (@{$__ivi}) { @__ivm = (); $__ivr = 0; if (exists $__iur{$__ivj->{'_mk'}}) { $__ivr = $__iur{$__ivj->{'_mk'}}; } else { my $__ivs = 0; foreach $__ivl (@{$__ivj->{'_ae'}}) { if (exists $__iur{$__ivl}) { $__ivr = $__iur{$__ivl}; $__ivj->{'_mk'} = $__ivl; $__ivs = 1; last; } } if (!$__ivs) { next; } } if (exists $__ivj->{'_gr'}) { $__iuk->[$__ivr] = $__ivj->{'_gr'}; } foreach $__ivl (@{$__ivj->{'_ae'}}) { if (exists $__iur{$__ivl}) { push @__ivm, $__iur{$__ivl}; } if ($__ivl != $__ivj->{'_mk'}) { $__ivh{$__iur{$__ivl}} = 1; } } foreach $__ivg (@__iub) { @__ivn = (); $__ivp = 0; $__ivo = ""; foreach $__ivq (@__ivm) { $__ivk = $__ivg->{'_blc'}->[$__ivq]; if ($__ivk) { if ($__ivk eq $__iuw) { $__ivp = 1; } else { push @__ivn, $__ivk; } } } if (@__ivn == 0 && $__ivp) { $__ivo = $__iuw; } else { if (exists $__ivj->{'_es'}) { if ($__ivj->{'_es'} eq "bullets") { $__ivo = "<div class=\"acbc_merged_list\"><ul><li>" . join("</li><li>", @__ivn) . "</li></ul></div>"; } elsif ($__ivj->{'_es'} eq "numbers") { $__ivo = "<div class=\"acbc_merged_list\"><ol><li>" . join("</li><li>", @__ivn) . "</li></ol></div>"; } } else { $__ivo = "<div class=\"acbc_merged_level\">" . join("</div><div class=\"acbc_merged_level\">", @__ivn) . "</div>"; } } $__ivg->{'_blc'}->[$__ivr] = $__ivo; } } } if (@__iub) { my $__ivt = @{$__iub[0]->{'_blc'}}; my $__itz = 0; my $__ivu = 1; for ($__itz = 0; $__itz < $__ivt; $__itz++) { $__ivu = 1; foreach $__ivg (@__iub) { if ($__ivg->{'_blc'}->[$__itz] eq $__iuw) { $__ivg->{'_blc'}->[$__itz] = "&nbsp;"; } else { $__ivu = 0; } } if ($__ivu) { $__ivh{$__itz} = 1; } } } if (keys %__ivh) { foreach $__ivg (@__iub) { my @__ivv = (); my $__ivt = @{$__ivg->{'_blc'}}; for ($__itz = 0; $__itz < $__ivt; $__itz++) { if (!exists $__ivh{$__itz}) { push @__ivv, $__ivg->{'_blc'}->[$__itz]; } } $__ivg->{'_blc'} = \@__ivv; } my @__ivw = (); my $__ivx = @{$__iuk}; for ($__itz = 0; $__itz < $__ivx; $__itz++) { if (!exists $__ivh{$__itz}) { push @__ivw, $__iuk->[$__itz]; } } $__iuk = \@__ivw; } return (\@__iub, $__iuk); } sub _bhu { my ($__iwf, $__iwg, $__iwh) = @_; my @__iwd = (); if ($__iwh) { my $__iwe = @{$__iwf}; @__iwd = @{$__iwf}[0..($__iwh - 1)]; @{$__iwf} = @{$__iwf}[$__iwh..($__iwe - 1)]; } unshift @{$__iwf}, $__iwg; if (@__iwd) { unshift @{$__iwf}, @__iwd; } } sub _bhv { my ($__iwu, $__iwv) = @_; my $__iwi = @{$__iwu}; my $__iwj = 0; my $__iwk = 0; my %__iwl = (); my $__iwm = 0; for ($__iwj = 0; $__iwj < $__iwi; $__iwj++) { $__iwk = $__iwu->[$__iwj]->[0]; if (exists $__iwl{$__iwk}) { $__iwm = $__iwl{$__iwk}; } else { $__iwm = []; } push @{$__iwm}, $__iwu->[$__iwj]; $__iwl{$__iwk} = $__iwm; } my $__iwn = $authlib9_14_2::_akn{"hid_respnum"}; my @__iwo = sort {$a <=> $b} keys %__iwl; my $__iwp = @__iwo; my $__iwq = 0; if ($__iwv =~ m/_MustHave(\d+)/i) { $__iwq = 1000 + $1; } elsif ($__iwv =~ m/_Unacceptable(\d+)/i) { $__iwq = 2000 + $1; } my $__iwr = authlib9_14_2::_acm($__iwn, $__iwp, $__iwq, 1, $__iwp); my @__iws = (); my $__iwt = 0; for ($__iwj = 0; $__iwj < $__iwp; $__iwj++) { $__iwm = $__iwl{$__iwo[$__iwr->[$__iwj]]}; foreach $__iwt (@{$__iwm}) { push @__iws, $__iwt; } } return \@__iws; } sub _bhw { my ($__ixd, $__ixe) = @_; my $__iww = ""; my $__iwx = ""; my $__iwy = ""; my $__iwz = 0; my $__ixa = ""; my $__ixb = "left"; if (exists $__ixe->{'_kf'}) { my $__ixc = $__ixe->{'_kf'}; if (exists $__ixc->{'_dm'}) { $__ixa = $__ixc->{'_dm'}; } if (exists $__ixc->{'_dl'}) { $__ixb = $__ixc->{'_dl'}; } if (exists $__ixc->{'_ix'}) { $__iwz = $__ixc->{'_ix'}; } if (exists $__ixc->{'_ot'}) { $__iwx = $__ixc->{'_ot'}; } if (exists $__ixc->{'_dr'}) { $__iwy = $__ixc->{'_dr'}; } $__iww = authlib9_14_2::_abl($__ixd, $__iwx, $__iwy, $__iwz); if ($__ixa && $__ixb eq "left") { $__iww = $__ixa . $__iww; } elsif ($__ixa && $__ixb eq "right") { $__iww .= $__ixa; } } return $__iww; } sub _bhx { my ($__ixw, $__ixx, $__ixy) = @_; my $__ixf = $__ixw->{'_uf'}; my $__ixg = $__ixf->{'_bld'}; my $__ixh = $__ixg->{'_ad'}; my $__ixi = 0; my $__ixj = 0; my $__ixk = 0; my $__ixl = 0; my $__ixm = 0; my $__ixn = ""; my $__ixo = ""; if (exists $__ixf->{'_nq'}) { $__ixl = 1; my $__ixp = $__ixg->{'_ac'}; $__ixm = acbclib9_14_2::_bhm($__ixp); } if (exists $__ixf->{'_ble'}) { my $__ixq = $__ixf->{'_ble'}; my $__ixr = 0; $__ixo .= "<div class=\"acbc_previous_rules\">\n"; $__ixo .= "<ul class=\"acbc_rules\">"; foreach $__ixr (@{$__ixq}) { $__ixi = $__ixr->[0]; $__ixj = $__ixr->[1]; $__ixk = $__ixr->[2]; $__ixn = acbclib9_14_2::_bia($__ixi, $__ixj, $__ixk, $__ixf, $__ixl, $__ixm, $__ixh, $__ixg); $__ixo .= "<li>" . $__ixn . "</li>\n"; } $__ixo .= "</ul></div>\n"; } my @__ixs = ('_fn', '_fo', 'body_text', '_er'); my $__ixt = ""; my $__ixu = ""; foreach $__ixt (@__ixs) { if (exists $__ixf->{$__ixt}) { $__ixu = authlib9_14_2::_acq($__ixf->{$__ixt}->{'_op'}); my $__ixv = ""; if ($__ixo) { $__ixv = $__ixf->{'_mx'}; $__ixv = authlib9_14_2::_acq($__ixv); $__ixv =~ s/$__ixx/$__ixo/sgi; } else { $__ixv = $__ixf->{'_im'}; } $__ixu =~ s/$__ixy/$__ixv/sgi; $__ixf->{$__ixt}->{'_op'} = $__ixu; } } } sub _bhy { my ($__iyg, $__iyh, $__iyi, $__iyj, $__iyk) = @_; my $__ixz = 0; if ($__iyg >= 0) { my $__iya = 2; if ($__iyg == 0) { $__iya = 1; } my $__iyb = $__iyk->{'_iq'} - $__iya; my $__iyc = @{$__iyh}; my $__iyd = keys %{$__iyi}; my $__iye = keys %{$__iyj}; $__iyd-- if (exists $__iyi->{0}); $__iye-- if (exists $__iyj->{0}); my $__iyf = 0; $__iyf = $__iyc + $__iyd + $__iye; if ($__iyf < $__iyb) { $__ixz += $__iyf; $__ixz += $__iya; $__iyk->{'_iq'} = $__ixz; } else { $__ixz = $__iyk->{'_iq'}; } } if ($__ixz < 3) { $__ixz = 0; } return $__ixz; } sub _bhz { my ($__iyq, $__iyr) = @_; my $__iyl = 0; my $__iym = $__iyq; my $__iyn = 0; my $__iyo = 0; my $__iyp = $__iyr->{'_cw'}; if ($__iym > 1) { if ($__iym == $__iyp) { $__iyl = 1; } else { while ($__iym > $__iyp) { $__iyn = int($__iym / $__iyp); $__iyo = $__iym % $__iyp; $__iyl += $__iyn; $__iym = $__iyo + $__iyn; } if ($__iyl > 0) { $__iyl++; } } } return $__iyl; } sub _bia { my ($__izi, $__izj, $__izk, $__izl, $__izm, $__izn, $__izo, $__izp) = @_; my $__iys = ""; my $__iyt = ""; my $__iyu = ""; my $__iyv = ""; my $__iyw = ""; my $__iyx = ""; if ($__izm) { my $__iyy = _bhn($__izn, $__izi); $__iyw .= $__iyy->{'_op'}; if (exists $__izl->{'_gt'}) { $__iyw .= " " . $__izl->{'_gt'}; } $__iyw .= " "; } my $__iyz = ""; my $__iza = ""; my $__izb = "left"; if (exists $__izo->{$__izi}->{'_id'}) { my $__izc = $__izo->{$__izi}->{'_id'}; if (exists $__izc->{'_x'}) { $__iyz = $__izc->{'_x'}; } if (exists $__izc->{'_y'}) { $__iza = $__izc->{'_y'}; } if (exists $__izc->{'_jx'}) { $__izb = $__izc->{'_jx'}; } } if ($__izk == 1 && $__iyz) { $__iyv = $__iyz; } elsif ($__izk == 2 && $__iza) { $__iyv = $__iza; } my $__izd = 0; my $__ize = 0; my $__izf = ""; if (exists $__izp->{'_kf'}) { $__ize = $__izp->{'_kf'}; $__izd = $__ize->{'_kg'}; } if ($__izi == $__izd) { if (exists $__ize->{'_kl'}) { $__iyv = $__ize->{'_kl'}; } $__izf = _bhw($__izj, $__izp); } else { my $__izg = $__izo->{$__izi}->{'_he'}; my $__izh = _bhm($__izg); my $__iyy = _bhn($__izh, $__izj); $__izf = $__iyy->{'_op'}; } $__iyx .= $__iyw; if ($__izb eq "left") { $__iyx .= $__iyv . " " . $__izf; } else { $__iyx .= $__izf . " " . $__iyv; } return $__iyx; } sub _bib { my ($__jax, $__jay) = @_; my $__izq = 0; my $__izr = 0; my $__izs = 0; my $__izt = 0; my $__izu = 0; my @__izv = (); my $__izw = 0; my $__izx = 0; my $__izy = 0; my $__izz = $acbclib9_14_2::_bky->{$__jax}; my $__jaa = $__izz->{'_ad'}; my $__jab = 0; my $__jac = {}; my $__jad = {}; my $__jae = 0; if ($__jay =~ m/_MustHave(\d+)/i) { $__jae = $1; } if (exists $__izz->{'_kf'}) { $__jab = $__izz->{'_kf'}->{'_kg'}; } my $__jaf = _bil($__jax, $__izz); my ($__jaz, $__jba) = _bik($__jay, $__jax, $__jaf); my ($__jbb, $__jbc) = _bih($__jax, $__jae, $__izz); _bid($__jbb, $__jaa, $__jac, $__jad); my ($__jbd) = _bii($__jax, 0, $__izz, $__jac, $__jad); $__izq = @{$__jaz}; if ($authlib9_14_2::_amg) { $__izq = 1; } if ($__izq) { my $__jag = @{$__jaf}; my $__jah = 1; my $__jai = 0; my $__jaj = 0; my $__jak = 0; my $__jal = 0; my $__jam = 0; my $__jan = 0; my $__jao = 0; my $__jap = 0; my $__izy = 0; my $__jaq = 0; my $__jar = 0; my $__jas = ""; my $__jat = 0; my $__jau = 0; my $__jav = 0; my $__jaw = 0; for ($__izr = 1; $__izr <= $__jag; $__izr++) { $__jak = 0; $__izx = $__jaf->[$__izr - 1]; if (exists $__jaa->{$__izx} && ($__izx != $__jab)) { if (exists $__jaa->{$__izx}->{'_mi'}) { next; } $__jas = $__jaa->{$__izx}->{'_he'}; $__jat = authlib9_14_2::_acy($__jas); if ($__jat) { $__jan = @{$__jat}; } if ($__jan == 1) { next; } $__jaj = $__jaa->{$__izx}->{'_ni'}; $__jai = $__jaa->{$__izx}->{'_kb'}; ($__jau, $__jav, $__jaw) = _bif($__izx, $__jat, $__jbb, $__jbd, $__jaj); if ($__jau == 0) { next; } $__jah = 1; $__jal = 0; $__jam = 0; for ($__izs = 0; $__izs < $__izq; $__izs++) { $__izw = $__jaz->[$__izs]->[$__izr]; if ($__izw == 0 || ($__jaz->[$__izs]->[0] == 0 && $__jaa->{$__izx}->{'_me'})) { $__izw = $__jak; next; } if ($__jaj) { if ($__izs == 0) { $__jal = $__izw; $__jam = $__izw; } else { if ($__izw > $__jam) { $__jam = $__izw; } elsif ($__izw < $__jal) { $__jal = $__izw; } } } else { if ($__izs == 0) { $__jak = $__izw; } elsif ($__izw != $__jak) { $__jah = 0; last; } } } if ($__jaj) { $__jaq = 0; $__jar = 0; if ($__jai == 1) { $__jaq = 1; } elsif ($__jai == 2) { $__jar = 1; } else { $__jaq = 1; $__jar = 1; } if ($__jaq) { if ($authlib9_14_2::_amg) { if ($__jan > 1) { $__jal = 2; } } if ($__jal > $__jav) { $__izy = $__jaj; if ($__jal == $__jam && exists $__jbc->{$__izx . "," . $__jal . ",0"}) { } elsif (!exists $__jbc->{$__izx . "," . $__jal . "," . $__izy}) { push @__izv, [$__izx, $__jal, $__izy]; } } } if ($__jar) { if ($authlib9_14_2::_amg) { $__jap = authlib9_14_2::_adc($__jaa->{$__izx}->{'_he'}); $__jao = @{$__jap}; $__jam = $__jao - 1; } if ($__jam > 0 && $__jam < $__jaw) { if ($__jaj == 1) { $__izy = 2; } else { $__izy = 1; } if ($__jal == $__jam && exists $__jbc->{$__izx . "," . $__jam . ",0"}) { } elsif (!exists $__jbc->{$__izx . "," . $__jam . "," . $__izy}) { push @__izv, [$__izx, $__jam, $__izy]; } if ($__jal == $__jam) { if (!exists $__jbc->{$__izx . "," . $__jam . ",0"} && $__jan > 2) { push @__izv, [$__izx, $__jam, 0]; } } } } } else { if ($__jah && $__izw > 0) { if (!exists $__jbc->{$__izx . "," . $__izw . ",0"}) { push @__izv, [$__izx, $__izw, 0]; } } } } } } return (\@__izv, $__jbb); } sub _bic { my ($__jcp, $__jcq) = @_; my $__jbe = $acbclib9_14_2::_bky->{$__jcp}; my $__jbf = $__jbe->{'_ad'}; my $__jbg = _bil($__jcp, $__jbe); my %__jbh = (); my $__jbi = 0; my $__jbj = 0; my $__jbk = 0; my $__jbl = 0; my $__jbm = 0; my @__jbn = (); my $__jbo = 0; my $__jbp = {}; my $__jbq = {}; if ($__jcq =~ m/_Unacceptable(\d+)/i) { $__jbo = $1; } my ($__jcr, $__jcs) = _bih($__jcp, 0, $__jbe); _bid($__jcr, $__jbf, $__jbp, $__jbq); my ($__jct) = _bii($__jcp, $__jbo, $__jbe, $__jbp, $__jbq); my ($__jcu, $__jcv) = _bik($__jcq, $__jcp, $__jbg); my $__jbr = @{$__jcu}; my $__jbs = @{$__jcv}; my @__jbt = (); if ($authlib9_14_2::_amg) { $__jbs = 1; } if ($__jbs) { my $__jbu = @{$__jbg}; my $__jbv = 0; my $__jbw = 0; my $__jbx = 0; my $__jby = 0; my $__jbz = 0; my $__jca = 0; my $__jcb = 0; my $__jcc = 0; my $__jcd = 0; my $__jce = 0; my $__jbm = 0; my $__jcf = 0; my $__jcg = 0; my $__jch = ""; my $__jci = 0; my %__jcj = (); for ($__jbi = 1; $__jbi <= $__jbu; $__jbi++) { $__jby = 0; $__jbz = 0; $__jca = 0; $__jcb = 0; $__jbk = $__jbg->[$__jbi - 1]; if (exists $__jbf->{$__jbk}) { if (exists $__jbf->{$__jbk}->{'_mi'}) { next; } $__jch = $__jbf->{$__jbk}->{'_he'}; $__jci = authlib9_14_2::_acy($__jch); if ($__jci) { $__jcd = @{$__jci}; } if ($__jcd == 1) { next; } elsif (!_bie($__jbk, $__jci, $__jbp)) { next; } $__jbw = $__jbf->{$__jbk}->{'_ni'}; $__jbv = $__jbf->{$__jbk}->{'_kb'}; %__jcj = (); for ($__jbj = 0; $__jbj < $__jbs; $__jbj++) { $__jcj{$__jcv->[$__jbj]->[$__jbi]} = 1; } for ($__jbj = 0; $__jbj < $__jbr; $__jbj++) { $__jbl = $__jcu->[$__jbj]->[$__jbi]; if ($__jbl == 0) { next; } unless (exists $__jbf->{$__jbk}->{'_me'} && $__jcu->[$__jbj]->[0] == 0) { delete $__jcj{$__jbl}; } if ($__jbl < $__jby || $__jby == 0) { $__jby = $__jbl; } if ($__jbl > $__jca || $__jca == 0) { $__jca = $__jbl; } } if ($__jbv) { if ($__jbv == 1) { foreach $__jbl (sort {$a <=> $b} keys %__jcj) { if ($__jbl < $__jbz || $__jbz == 0) { if (_big($__jbk, $__jbl, $__jbp)) { $__jbz = $__jbl; } } } if ($authlib9_14_2::_amg) { $__jbz = 1; } if ($__jbz) { if (($__jbz < $__jby) || ($__jby == 0) || $authlib9_14_2::_amg) { if ($__jbz < $__jcd) { push @__jbn, [$__jbk, $__jbz]; } } } } elsif ($__jbv == 2) { foreach $__jbl (sort {$a <=> $b} keys %__jcj) { if ($__jbl > $__jcb || $__jcb == 0) { if (_big($__jbk, $__jbl, $__jbp)) { $__jcb = $__jbl; } } } if ($authlib9_14_2::_amg) { $__jcb = $__jcd; } if ($__jcb) { if (($__jcb > $__jca) || ($__jca == 0) || $authlib9_14_2::_amg) { if ($__jcb > 1) { push @__jbn, [$__jbk, $__jcb]; } } } } } else { if ($__jbw) { foreach $__jbl (sort {$a <=> $b} keys %__jcj) { if (!_big($__jbk, $__jbl, $__jbp)) { delete $__jcj{$__jbl}; } } @__jbt = sort {$a <=> $b} keys %__jcj; for ($__jbj = 1; $__jbj < @__jbt - 1; $__jbj++) { delete $__jcj{$__jbt[$__jbj]}; } if (@__jbt == 2) { if ($__jby > 0 && $__jby < $__jbt[0]) { delete $__jcj{$__jbt[0]}; } if ($__jca > 0 && $__jca > $__jbt[1]) { delete $__jcj{$__jbt[1]}; } } } if ($authlib9_14_2::_amg) { $__jcj{"1"} = 1; } foreach $__jbl (sort {$a <=> $b} keys %__jcj) { if ($__jbl) { if (_big($__jbk, $__jbl, $__jbp)) { push @__jbn, [$__jbk, $__jbl]; } } } } } else { if (exists $__jbe->{'_kf'}) { my $__jck = $__jbe->{'_kf'}; my $__jcl = $__jck->{'_kg'}; my $__jcm = $__jcp . "_BYO_" . $__jcl; if ($__jbk == $__jcl) { if (exists $__jck->{'_kk'}) { my $__jcn = $__jck->{'_kk'}; if ($__jcn <= $__jbo) { $__jca = 0; my $__jco = authlib9_14_2::_ws($__jcm); if ($__jco) { $__jca = $__jco; } for ($__jbj = 0; $__jbj < $__jbr; $__jbj++) { $__jbl = $__jcu->[$__jbj]->[$__jbi]; if ($__jbl == 0) { next; } if ($__jbl > $__jca || $__jca == 0) { $__jca = $__jbl; } } if ($__jca) { if (_big($__jbk, $__jca, $__jbp)) { push @__jbn, [$__jbk, $__jca]; } } } } } } } } } return (\@__jbn, $__jct); } sub _bid { my ($__jdi, $__jdj, $__jdk, $__jdl) = @_; my $__jcw = @{$__jdi}; my $__jcx = 0; my $__jcy = 0; my $__jcz = 0; my $__jda = ""; my $__jdb = 0; my $__jdc = 0; my $__jdd = 0; my $__jde = 0; my $__jdf = 0; my $__jdg = 0; my $__jdh = 0; for ($__jdc = 0; $__jdc < $__jcw; $__jdc++) { $__jcx = $__jdi->[$__jdc]; $__jde = $__jcx->[0]; $__jdf = $__jcx->[1]; $__jdg = $__jcx->[2]; if (exists $__jdj->{$__jde}) { $__jdh = $__jdj->{$__jde}; $__jda = $__jdh->{'_he'}; $__jdb = authlib9_14_2::_adc($__jda); $__jcz = @{$__jdb}; if ($__jdg) { $__jcy = $__jdh->{'_ni'}; if (($__jcy == 1 && $__jdg == 1) || $__jcy == 2 && $__jdg == 2) { for ($__jdd = $__jdf - 1; $__jdd > 0; $__jdd--) { $__jdk->{$__jde . "," . $__jdd} = 1; $__jdl->{$__jde . "," . $__jdd} = 1; } } elsif (($__jcy == 1 && $__jdg == 2) || $__jcy == 2 && $__jdg == 1) { for ($__jdd = $__jdf + 1; $__jdd <= $__jcz; $__jdd++) { $__jdk->{$__jde . "," . $__jdd} = 1; $__jdl->{$__jde . "," . $__jdd} = 1; } } } else { for ($__jdd = 1; $__jdd <= $__jcz; $__jdd++) { $__jdk->{$__jde . "," . $__jdd} = 1; $__jdl->{$__jde . "," . $__jdd} = 1; } delete $__jdl->{$__jde . "," . $__jdf}; } } } } sub _bie { my ($__jdw, $__jdx, $__jdy) = @_; my $__jdm = 1; my $__jdn = 1; my $__jdo = 0; my $__jdp = 0; my $__jdq = @{$__jdx}; my %__jdr = (); for ($__jdo = 0; $__jdo < $__jdq; $__jdo++) { $__jdr{$__jdx->[$__jdo]->{'_pt'}} = 1; } my $__jds = ""; my $__jdt = 0; my $__jdu = 0; foreach $__jds (sort keys %{$__jdy}) { if ($__jds =~ m/^(\d+),(.*?)$/) { $__jdt = $1; $__jdu = $2; if ($__jdt == $__jdw) { delete $__jdr{$__jdu}; } } } my @__jdv = keys %__jdr; if (@__jdv < 2) { $__jdn = 0; } return $__jdm; } sub _bif { my ($__jen, $__jeo, $__jep, $__jeq, $__jer) = @_; my $__jdz = 1; my $__jea = 0; my $__jeb = 0; my $__jec = @{$__jeo}; my $__jed = 1; my $__jee = $__jec; my %__jef = (); for ($__jea = 0; $__jea < $__jec; $__jea++) { $__jef{$__jeo->[$__jea]->{'_pt'}} = 1; } my $__jeg = @{$__jep}; my $__jeh = 0; my $__jei = 0; my $__jej = 0; my $__jek = 0; for ($__jea = 0; $__jea < $__jeg; $__jea++) { $__jeh = $__jep->[$__jea]; $__jei = $__jeh->[0]; if ($__jei == $__jen) { $__jej = $__jeh->[1]; $__jek = $__jeh->[2]; if ($__jer) { if (($__jer == 1 && $__jek == 1) || $__jer == 2 && $__jek == 2) { for ($__jeb = $__jej - 1; $__jeb > 0; $__jeb--) { delete $__jef{$__jeb}; } } elsif (($__jer == 1 && $__jek == 2) || $__jer == 2 && $__jek == 1) { for ($__jeb = $__jej + 1; $__jeb <= $__jec; $__jeb++) { delete $__jef{$__jeb}; } } } else { $__jdz = 0; } } } if ($__jdz) { my $__jel = @{$__jeq}; for ($__jea = 0; $__jea < $__jel; $__jea++) { $__jeh = $__jeq->[$__jea]; $__jei = $__jeh->[0]; if ($__jei == $__jen) { $__jej = $__jeh->[1]; delete $__jef{$__jej}; } } my @__jem = keys %__jef; if (@__jem < 2) { $__jdz = 0; } else { $__jed = $__jem[0]; $__jee = $__jem[@__jem - 1]; } } return ($__jdz, $__jed, $__jee); } sub _big { my ($__jet, $__jeu, $__jev) = @_; my $__jes = 0; if (!exists $__jev->{$__jet . "," . $__jeu}) { $__jes = 1; } return $__jes; } sub _bih { my ($__jft, $__jfu, $__jfv) = @_; my $__jew = 0; my $__jex = ""; my $__jey = ""; my $__jez = 0; my $__jfa = 0; my $__jfb = 0; my $__jfc = {}; my @__jfd = (); my %__jfe = (); my %__jff = (); my $__jfg = ""; my $__jfh = 0; my $__jfi = 0; my $__jfj = ""; my $__jfk = $__jfv->{'_is'}; my $__jfl = $__jfv->{'_ad'}; my $__jfm = authlib9_14_2::_aad(); my $__jfn = 0; if ($__jfk > 0) { for ($__jew = 1; $__jew <= $__jfk; $__jew++) { $__jex = $__jft . "_MustHave" . $__jew; $__jey = authlib9_14_2::_ws($__jex); if ($__jey ne "") { $__jfn = $authlib9_14_2::_ahp{$__jex}->{'_ji'}; if ($__jfn < $__jfm) { $__jex .= "_shown"; $__jfg = authlib9_14_2::_ws($__jex); $__jfh = eval($__jfg); if ($@) { authlib9_14_2::_zq(162, "", "ACBC Error. Error reading ACBC rules shown list.", $@); } if ($__jey > 0) { ($__jez, $__jfa, $__jfb) = @{$__jfh->[$__jey - 1]}; $__jfc->{$__jez}->{$__jfa} = $__jfb; push @__jfd, [$__jez, $__jfa, $__jfb]; $__jfj = $__jez . "," . $__jfa . "," . $__jfb; $__jfe{$__jfj} = 1; my $__jfo = $__jfl->{$__jez}->{'_he'}; my $__jfp = authlib9_14_2::_adc($__jfo); my $__jfq = @{$__jfp}; if ($__jfb) { my $__jfr = $__jfl->{$__jez}->{'_ni'}; if (($__jfr == 1 && $__jfb == 1) || $__jfr == 2 && $__jfb == 2) { for (my $__jfs = $__jfa - 1; $__jfs > 0; $__jfs--) { $__jff{$__jez . ',' . $__jfs} = 1; } } elsif (($__jfr == 1 && $__jfb == 2) || $__jfr == 2 && $__jfb == 1) { for (my $__jfs = $__jfa + 1; $__jfs <= $__jfq; $__jfs++) { $__jff{$__jez . ',' . $__jfs} = 1; } } } else { for (my $__jfs = 1; $__jfs <= $__jfq; $__jfs++) { $__jff{$__jez . "," . $__jfs} = 1; } delete $__jff{$__jez . "," . $__jfa}; } } else { foreach $__jfi (@{$__jfh}) { $__jez = $__jfi->[0]; $__jfa = $__jfi->[1]; $__jfb = $__jfi->[2]; $__jfe{$__jez . "," . $__jfa . "," . $__jfb} = 1; } } } } } _bij($__jft, $__jfv, \%__jfe, \%__jff, $__jfc, 1); } return (\@__jfd, \%__jfe); } sub _bii { my ($__jgm, $__jgn, $__jgo, $__jgp, $__jgq) = @_; my $__jfw = 0; my $__jfx = ""; my $__jfy = ""; my $__jfz = 0; my $__jga = 0; my $__jgb = 0; my @__jgc = (); my $__jgd = {}; my $__jge = ""; my $__jgf = 0; my $__jgg = 0; my %__jgh = %{$__jgq}; my $__jgi = ""; my $__jgj = $__jgo->{'_iw'}; my $__jgk = authlib9_14_2::_aad(); my $__jgl = 0; if ($__jgj > 1) { for ($__jfw = 1; $__jfw <= $__jgj; $__jfw++) { $__jfx = $__jgm . "_Unacceptable" . $__jfw; $__jfy = authlib9_14_2::_ws($__jfx); if ($__jfy ne "") { $__jgl = $authlib9_14_2::_ahp{$__jfx}->{'_ji'}; if ($__jgl < $__jgk) { $__jfx .= "_shown"; $__jge = authlib9_14_2::_ws($__jfx); $__jgf = eval($__jge); if ($@) { authlib9_14_2::_zq(163, "ACBC Error. Error reading ACBC rules shown list.", $@); } if ($__jfy > 0) { ($__jfz, $__jga) = @{$__jgf->[$__jfy - 1]}; push @__jgc, [$__jfz, $__jga]; $__jgd->{$__jfz}->{$__jga} = 1; $__jgi = $__jfz . "," . $__jga; $__jgp->{$__jgi} = 1; $__jgh{$__jgi} = 1; } else { foreach $__jgg (@{$__jgf}) { $__jfz = $__jgg->[0]; $__jga = $__jgg->[1]; $__jgp->{$__jfz . "," . $__jga} = 1; } } } } } _bij($__jgm, $__jgo, $__jgp, \%__jgh, $__jgd, 0); } return (\@__jgc); } sub _bij { my ($__jhm, $__jhn, $__jho, $__jhp, $__jhq, $__jhr) = @_; my $__jgr = 0; my $__jgs = 0; my $__jgt = ""; my $__jgu = _bil($__jhm, $__jhn); my $__jgv = @{$__jgu}; my $__jgw = $__jhn->{'_ad'}; my @__jgx = (); my %__jgy = (); my $__jgz = 0; my $__jgs = 0; my @__jha = (); my $__jhb = ""; my $__jhc = 0; my $__jhd = 0; my %__jhe = (); my $__jhf = 0; my $__jhg = 0; my $__jhh = 0; my $__jhi = 0; my $__jhj = 0; if (exists $__jhn->{'_kf'}) { $__jgz = $__jhn->{'_kf'}->{'_kg'}; } for ($__jgr = 0; $__jgr < $__jgv; $__jgr++) { $__jgs = $__jgu->[$__jgr]; $__jgy{$__jgs} = $__jgr; if ($__jgs != $__jgz) { if (exists $__jgw->{$__jgs} && exists $__jgw->{$__jgs}->{'_kp'}) { push(@__jgx, $__jgs); } } } foreach $__jhg (@__jgx) { @__jha = @{$__jgw->{$__jhg}->{'_kp'}}; %__jhe = map {$_ => 1} @__jha; foreach $__jhi (@__jha) { if (exists $__jgy{$__jhi}) { my $__jhk = $__jgw->{$__jhi}->{'_db'}->{$__jhg}; my $__jhl = keys %{$__jhk}; $__jhf = 0; foreach $__jhj (sort {$a <=> $b} keys %{$__jhk}) { $__jgt = $__jhi . ',' . $__jhj; if (exists $__jhp->{$__jgt}) { $__jhf++; } } if ($__jhf == $__jhl) { delete $__jhe{$__jhi}; } } } if (keys %__jhe == 0) { $__jgw->{$__jhg}->{'_mi'} = 1; if (exists $__jhq->{$__jhg}) { $__jhb = $__jgw->{$__jhg}->{'_he'}; $__jhc = authlib9_14_2::_acy($__jhb); $__jhd = 0; if ($__jhc) { $__jhd = @{$__jhc}; } if ($__jhd == 0) { authlib9_14_2::_zq(297, "ACBC Error.", "ACBC Error. Attribute #" . $__jhg . " has no levels.", $@); } foreach $__jhh (@{$__jhc}) { if (exists $__jhq->{$__jhg}->{$__jhh->{'_pt'}}) { $__jgt = $__jhg . ',' . $__jhh->{'_pt'}; if ($__jhr) { $__jgt .= ',' . $__jhq->{$__jhg}->{$__jhh->{'_pt'}}; } $__jho->{$__jgt} = 1; } } } } } } sub _bik { my ($__jit, $__jiu, $__jiv) = @_; my $__jhs = 1; my $__jht = 1; my $__jhu = ""; my $__jhv = $acbclib9_14_2::_bky->{$__jiu}; my $__jhw = $__jhv->{'_cy'}; my $__jhx = $__jhv->{'_ad'}; my $__jhy = 0; my $__jhz = 0; my $__jia = 0; my @__jib = (); my @__jic = (); my $__jid = ""; my $__jie = $authlib9_14_2::_ahp{$__jit}->{'_ji'}; my $__jif = 0; my $__jig = ""; while ($__jht) { $__jhu = $__jiu . "_Screener" . $__jhs; if (authlib9_14_2::_ws($__jhu . "_1") ne "") { $__jif = $authlib9_14_2::_ahp{$__jhu}->{'_ji'}; if ($__jif < $__jie) { my $__jih = authlib9_14_2::_ws($__jhu . '_shown'); my @__jii = (); if ($__jih) { @__jii = split(',', $__jih); } if (@__jii == 0) { next; } for($__jhy = 1; $__jhy <= $__jhw; $__jhy++) { $__jhz = 0; $__jia = 0; $__jid = $__jhu . "_" . $__jhy; $__jhz = authlib9_14_2::_ws($__jid); $__jia = $__jii[$__jhy - 1]; if ($__jhz) { push @__jib, $__jia; } else { push @__jic, $__jia; } } $__jhs++; } else { $__jht = 0; } } else { $__jht = 0; } } my $__jij = _bim(\@__jib, $__jiu, $__jhv); my $__jik = _bim(\@__jic, $__jiu, $__jhv); my $__jil = $__jhv->{'_ac'}; my $__jim = authlib9_14_2::_acy($__jil); if (!_bkj($__jhv, $__jim)) { my @__jin = (); push @__jin, 0; my $__jio = "sys_ACBC_" . $__jiu . "_byo"; my $__jip = authlib9_14_2::_ws($__jio); if ($__jip) { my @__jiq = split(',', $__jip); if (@__jiq == 0) { authlib9_14_2::_zq(288, "", "Reading ACBC BYO error.", ""); } push (@__jin, @__jiq); } else { my $__jir = ""; my $__jis = 0; foreach $__jis (@{$__jiv}) { if (exists $__jhx->{$__jis}) { if (exists $__jhx->{$__jis}->{'_me'}) { push @__jin, 0; } else { $__jir = $__jiu . "_BYO_" . $__jis; $__jig = authlib9_14_2::_ws($__jir); if ($__jig) { push @__jin, $__jig; } elsif ($authlib9_14_2::_amg) { push @__jin, 1; } } } else { push @__jin, 0; } } } if (@__jin > 1) { push @{$__jij}, \@__jin; } } return ($__jij, $__jik); } sub _bil { my ($__jjh, $__jji) = @_; my $__jiw = "sys_ACBC_" . $__jjh . "_atts"; my $__jix = 0; my $__jiy = authlib9_14_2::_ws($__jiw); if ($__jiy) { eval { my @__jiz = split(',', $__jiy); $__jix = \@__jiz; }; if ($@) { authlib9_14_2::_zq(164, "", "Reading ACBC saved attributes error.", $@); } } else { my $__jja = $__jji->{'_ac'}; my $__jjb = $__jji->{'_ad'}; my $__jjc = authlib9_14_2::_acy($__jja); my $__jjd = 0; my $__jje = 0; my @__jjf = (); my $__jjg = 0; if (exists $__jji->{'_kf'}) { $__jjg = $__jji->{'_kf'}->{'_kg'}; } if ($__jjc) { foreach $__jjd (@{$__jjc}) { $__jje = $__jjd->{'_pt'}; if (exists $__jjb->{$__jje} || $__jje == $__jjg) { push @__jjf, $__jje; } } } $__jix = \@__jjf; } return $__jix; } sub _bim { my ($__jjv, $__jjw, $__jjx, $__jjy) = @_; _bin($__jjw); my $__jjj = 0; my @__jjk = (); my $__jjl = 0; foreach $__jjj (@{$__jjv}) { if ($__jjj) { $__jjl = $acbclib9_14_2::_bla->{$__jjw}->[$__jjj - 1]; push @__jjk, $__jjl; } elsif ($__jjj == 0) { my $__jjm = _bil($__jjw, $__jjx); my $__jjn = 0; my $__jjo = ""; my @__jjp = (); push(@__jjp, 0); if ($__jjy) { push(@__jjp, @{$__jjy}); } else { my $__jjq = ""; my $__jjr = 0; my $__jjs = "sys_ACBC_" . $__jjw . "_byo"; my $__jjt = authlib9_14_2::_ws($__jjs); if ($__jjt) { my @__jju = split(',', $__jjt); if (@__jju == 0) { authlib9_14_2::_zq(286, "", "Reading ACBC BYO error.", ""); } push (@__jjp, @__jju); } else { foreach $__jjn (@{$__jjm}) { $__jjo = $__jjw . "_BYO_" . $__jjn; $__jjq = authlib9_14_2::_ws($__jjo); if ($__jjq) { push @__jjp, $__jjq; } elsif ($authlib9_14_2::_amg) { push @__jjp, 1; } else { push @__jjp, 0; } } } } push(@__jjk, \@__jjp); } } return \@__jjk; } sub _bin { my ($__jkg) = @_; if (!exists $acbclib9_14_2::_bla->{$__jkg}) { my $__jjz = 0; my @__jka = (); my $__jkb = 1; my $__jkc = "sys_ACBC_" . $__jkg . "_design"; my $__jkd = 0; my $__jke = authlib9_14_2::_ws($__jkc . $__jkb); if ($authlib9_14_2::_amg && !$__jke) { my $__jkf = authlib9_14_2::_aao($__jkg); my ($__jkh, $__jki) = _bio($__jkg . "_Screener1", $__jkf, $__jkg); $__jke = authlib9_14_2::_ws($__jkc . $__jkb); } while ($__jke) { if ($__jke ne "") { if ($__jke ne '[]') { $__jkd = eval($__jke); if ($@) { authlib9_14_2::_zq(165, "", "ACBC Error. Error reading design.", $@); } while ($__jkd->[0]->[0] <= @__jka) { splice(@__jka, $__jkd->[0]->[0] - 1, 1, $__jkd->[0]); shift(@{$__jkd}); } push @__jka, @{$__jkd}; } } $__jkb++; $__jke = authlib9_14_2::_ws($__jkc . $__jkb); } $acbclib9_14_2::_bla->{$__jkg} = \@__jka; } } sub _bio { my ($__jly, $__jlz, $__jma) = @_; my $__jkj = 0; my $__jkk = 0; my $__jkl = $__jlz->{'_iv'}; my $__jkm = $__jlz->{'_cy'}; my $__jkn = $__jkl * $__jkm; my $__jko = "sys_ACBC_" . $__jma . "_"; my $__jkp = ""; my @__jkq = (); my $__jkr = 0; my $__jks = _bil($__jma, $__jlz); my $__jkt = 0; if ($__jly =~ m/Screener(\d+)/i) { $__jkt = $1; } my $__jku = _biw($__jlz, $__jma, $__jkt - 1); $__jkr = keys %{$__jku}; my $__jkv = _bjd($__jlz, $__jma, $__jly); my $__jkw = 1; my $__jkx = 0; my $__jky = 0; my $__jkz = 0; my @__jla = (); my @__jlb = (); my @__jlc = (); my $__jld = ""; my $__jle = 0; my $__jlf = 0; my $__jlg = ""; my $__jlh = authlib9_14_2::_ws($__jko . "design" . $__jkw); while ($__jlh) { if ($__jlh ne '[]') { $__jkx = eval($__jlh); if ($@) { authlib9_14_2::_zq(166, "", "Reading ACBC saved design error.", $@); } if ($__jkw > 1) { while ($__jkx->[0]->[0] <= @__jlb) { splice(@__jlb, $__jkx->[0]->[0] - 1, 1, $__jkx->[0]); shift(@{$__jkx}); } } push @__jlb, @{$__jkx}; $__jky = @{$__jkx}; } else { $__jky = 0; } if ($__jkw == 1) { if ($__jky < $__jkn) { $__jkn = $__jky; } } $__jkz += $__jky; $__jlg = $__jko . "rejected" . ($__jkw + 1); $__jld = authlib9_14_2::_ws($__jlg); if ($__jld) { $__jle = eval($__jld); if ($@) { authlib9_14_2::_zq(167, "Reading ACBC rejected concepts error.", $@); } $__jlf = @{$__jle}; for ($__jkj = 0; $__jkj < $__jlf; $__jkj++) { $__jku->{$__jle->[$__jkj]} = 1; } } $__jkw++; $__jlh = authlib9_14_2::_ws($__jko . "design" . $__jkw); } my %__jli = (%{$__jku}); my $__jlj = 0; if (exists $__jlz->{'_kf'}) { $__jlj = $__jlz->{'_kf'}->{'_kg'}; } for ($__jkj = 0; $__jkj < $__jkz; $__jkj++) { if (!exists $__jku->{$__jlb[$__jkj]->[0]}) { if (_bjc($__jkv, $__jlb[$__jkj], $__jks, $__jlj)) { push @__jla, $__jlb[$__jkj]; } else { $__jli{$__jlb[$__jkj]->[0]} = 1; push @__jlc, $__jlb[$__jkj]->[0]; } } $__jkk++; } my $__jlk = $__jkn - $__jkr; my $__jll = 0; if ($__jlk > @__jla) { $__jll = $__jlk - @__jla; } my $__jlm = 0; my $__jln = $__jlz->{'_ac'}; my $__jlo = authlib9_14_2::_acy($__jln); my $__jlp = _bkj($__jlz, $__jlo); if ($__jkw == 1) { if ($__jlp) { ciwlib9_14_2::_rm(\@__jkq, $authlib9_14_2::_akn{"hid_respnum"}, $__jma . "_BYO", 1); my $__jlq = 'sys_ACBC_' . $__jma . '_byo'; foreach my $__jlr (@__jkq) { if ($__jlr->[0] eq $__jlq) { my @__jls = split(',', $__jlr->[1]); $__jlm = \@__jls; last; } } authlib9_14_2::_aao($__jly); } } if ($__jll > 0) { my ($__jmb, $__jmc, $__jmd, $__jme, $__jmf, $__jmg, $__jmh, $__jmi, $__jmj, $__jmk) = _azb($__jlz, $__jma, $__jll, $__jks, $__jkk, \@__jlb, $__jkv, ($__jkw - 1), \%__jli, $__jlm, $__jlp); push @__jkq, ["sys_ACBC_" . $__jma . "_dealWinner" . $__jkw, $__jmk]; push @__jkq, ["sys_ACBC_" . $__jma . "_dealCnt" . $__jkw, $__jmh]; push @__jkq, ["sys_ACBC_" . $__jma . "_bestDEff" . $__jkw, $__jmi]; push @__jkq, ["sys_ACBC_" . $__jma . "_byoIncluded" . $__jkw, $__jmj]; if ($__jmb) { if ($__jkk == 0) { $__jmb = _bja($__jmb, $__jlz, $__jks, $__jmf); } push @__jla, @{$__jmb}; my $__jlt = "sys_ACBC_" . $__jma . "_design" . $__jkw; if ($__jmg) { my @__jlu = (); for ($__jkj = 0; $__jkj < (@__jla - @{$__jmb}); $__jkj++) { if (exists $__jmg->{$__jla[$__jkj]->[0]}) { push (@__jlu, $__jla[$__jkj]); } } push @__jlu, @{$__jmb}; push @__jkq, [$__jlt, authlib9_14_2::_wz(\@__jlu)]; } else { push @__jkq, [$__jlt, authlib9_14_2::_wz($__jmb)]; } if ($authlib9_14_2::_amg) { authlib9_14_2::_wt($__jlt, authlib9_14_2::_wz($__jmb)); } push @__jkq, ["sys_ACBC_" . $__jma . "_levelCnt" . $__jkw, authlib9_14_2::_wz($__jmc)]; push @__jkq, ["sys_ACBC_" . $__jma . "_attCnt" . $__jkw, authlib9_14_2::_wz($__jmd)]; push @__jkq, ["sys_ACBC_" . $__jma . "_rndArray" . $__jkw, _bkk($__jme)]; if ($__jlj) { my $__jlv = 0; my $__jlw = @{$__jks}; for ($__jkj = 0; $__jkj < $__jlw && !$__jlv; $__jkj++) { $__jlv = $__jks->[$__jkj] == $__jlj; } if ($__jlv) { push @__jkq, ["sys_ACBC_" . $__jma . "_pricelevels" . $__jkw, authlib9_14_2::_wz($__jmf)]; } } } elsif ($__jmg) { push @__jkq, ['sys_ACBC_' . $__jma . '_design' . $__jkw, authlib9_14_2::_wz(\@__jla)]; } } if (@__jlc) { push @__jkq, ["sys_ACBC_" . $__jma . "_rejected" . $__jkw, authlib9_14_2::_wz(\@__jlc)]; } my @__jlx = (); if (@__jla > $__jkm) { @__jlx = @__jla[0 .. ($__jkm - 1)]; } else { @__jlx = @__jla; } if (@__jkq && !$authlib9_14_2::_amg) { authlib9_14_2::_xv(\@__jkq, $authlib9_14_2::_akn{"hid_respnum"}, 1, 1); authlib9_14_2::_xj(\@__jkq, $authlib9_14_2::_akn{"hid_respnum"}, 0); } return ($__jks, \@__jlx); } sub _bip { my ($__jno, $__jnp, $__jnq) = @_; my $__jml = "sys_ACBC_" . $__jnp . "_"; my $__jmm = 0; my $__jmn = 2; my $__jmo = 0; my $__jmp = $__jno->{'_iv'}; my $__jmq = $__jno->{'_cy'}; my $__jmr = $__jmp * $__jmq; while ($__jmn > 1) { my $__jms = $authlib9_14_2::_ahp{$__jnq}; $__jmn = $__jms->{'_ji'}; my $__jmt = $authlib9_14_2::_ako->[$__jmn - 2]; my $__jmu = $__jmt->{'_ld'}; my $__jmv = @{$__jmu}; for ($__jmo = 0; $__jmo < $__jmv; $__jmo++) { $__jms = $__jmu->[$__jmo]; if ($__jms->{'_if'} =~ m/^$__jnp\_Screener(\d+)$/i) { $__jmm = $1; last; } if ($__jmo == 0) { $__jnq = $__jms->{'_if'}; } } if ($__jmm != 0) { last; } } my $__jmw = _bil($__jnp, $__jno); my $__jmx = _biw($__jno, $__jnp, $__jmm); my $__jmy = _bjd($__jno, $__jnp, $__jnq); my $__jmz = 1; my $__jna = 0; my $__jnb = 0; my $__jnc = 0; my @__jnd = (); my @__jne = (); my @__jnf = (); my $__jng = ""; my $__jnh = 0; my $__jni = 0; my $__jnj = ""; my $__jnk = authlib9_14_2::_ws($__jml . "design" . $__jmz); while ($__jnk) { if ($__jnk ne '[]') { $__jna = eval($__jnk); if ($@) { authlib9_14_2::_zq(166, "", "Reading ACBC saved design error.", $@); } if ($__jmz > 1) { while ($__jna->[0]->[0] <= @__jne) { splice(@__jne, $__jna->[0]->[0] - 1, 1, $__jna->[0]); shift(@{$__jna}); } } push @__jne, @{$__jna}; $__jnb = @{$__jna}; } else { $__jnb = 0; } if ($__jmz == 1) { if ($__jnb < $__jmr) { $__jmr = $__jnb; } } $__jnc += $__jnb; $__jnj = $__jml . "rejected" . ($__jmz + 1); $__jng = authlib9_14_2::_ws($__jnj); if ($__jng) { $__jnh = eval($__jng); if ($@) { authlib9_14_2::_zq(167, "Reading ACBC rejected concepts error.", $@); } $__jni = @{$__jnh}; for ($__jmo = 0; $__jmo < $__jni; $__jmo++) { $__jmx->{$__jnh->[$__jmo]} = 1; } } $__jmz++; $__jnk = authlib9_14_2::_ws($__jml . "design" . $__jmz); } my %__jnl = (%{$__jmx}); my $__jnm = 0; if (exists $__jno->{'_kf'}) { $__jnm = $__jno->{'_kf'}->{'_kg'}; } for ($__jmo = 0; $__jmo < $__jnc; $__jmo++) { if (!exists $__jmx->{$__jne[$__jmo]->[0]}) { if (_bjc($__jmy, $__jne[$__jmo], $__jmw, $__jnm)) { push @__jnd, $__jne[$__jmo]; } } } my $__jnn = @__jnd; return $__jnn; } sub _biq { my ($__jpn, $__jpo, $__jpp) = @_; my $__jnr = 0; my $__jns = "sys_ACBC_" . $__jpo . "_"; my $__jnt = ""; my @__jnu = (); my $__jnv = 0; my $__jnw = _bil($__jpo, $__jpn); my $__jnx = $__jns . "selected"; my $__jny = authlib9_14_2::_ws($__jnx); if ($__jny) { eval { my @__jnz = split(',', $__jny); $__jnv = \@__jnz; }; if ($@) { authlib9_14_2::_zq(168, "", "Reading ACBC saved attributes error.", $@); } } elsif ($__jpn->{'_iv'} == 0) { my $__joa = $__jpn->{'_ac'}; my $__job = authlib9_14_2::_acy($__joa); my $__joc = 0; my $__jod = 0; if (_bkj($__jpn, $__job)) { $__jod = 1; ciwlib9_14_2::_rm(\@__jnu, $authlib9_14_2::_akn{"hid_respnum"}, $__jpo . "_BYO", 1); my $__joe = 'sys_ACBC_' . $__jpo . '_byo'; foreach my $__jof (@__jnu) { if ($__jof->[0] eq $__joe) { my @__jog = split(',', $__jof->[1]); $__joc = \@__jog; last; } } authlib9_14_2::_aao($__jpp); } my @__joh = (); my $__joi = $__jpn->{'_hr'}; if ($__jpn->{'_fx'}) { if (!$__jod) { $__joi--; push (@__joh, 0); } } if ($__joi) { my $__jnw = _bil($__jpo, $__jpn); my ($__jpq, $__jpr, $__jps, $__jpt, $__jpu, $__jpv, $__jpw, $__jpx, $__jpy, $__jpz) = _azb($__jpn, $__jpo, $__joi, $__jnw, 0, [], {}, 0, {}, $__joc, $__jod); push @__jnu, ["sys_ACBC_" . $__jpo . "_dealWinner1", $__jpz]; push @__jnu, ["sys_ACBC_" . $__jpo . "_dealCnt1", $__jpw]; push @__jnu, ["sys_ACBC_" . $__jpo . "_bestDEff1", $__jpx]; push @__jnu, ["sys_ACBC_" . $__jpo . "_byoIncluded1", $__jpy]; if ($__jpq) { my $__joj = "sys_ACBC_" . $__jpo . "_design1"; push @__jnu, [$__joj, authlib9_14_2::_wz($__jpq)]; if ($authlib9_14_2::_amg) { authlib9_14_2::_wt($__joj, authlib9_14_2::_wz($__jpq)); } push @__jnu, ["sys_ACBC_" . $__jpo . "_levelCnt1", authlib9_14_2::_wz($__jpr)]; push @__jnu, ["sys_ACBC_" . $__jpo . "_attCnt1", authlib9_14_2::_wz($__jps)]; push @__jnu, ["sys_ACBC_" . $__jpo . "_rndArray1", _bkk($__jpt)]; my $__jok = 0; if (exists $__jpn->{'_kf'}) { $__jok = $__jpn->{'_kf'}->{'_kg'}; } if ($__jok) { my $__jol = 0; my $__jom = @{$__jnw}; for ($__jnr = 0; $__jnr < $__jom && !$__jol; $__jnr++) { $__jol = $__jnw->[$__jnr] == $__jok; } if ($__jol) { push @__jnu, ["sys_ACBC_" . $__jpo . "_pricelevels1", authlib9_14_2::_wz($__jpu)]; } } push(@__joh, map { $_->[0] } @{$__jpq}); $acbclib9_14_2::_bla->{$__jpo} = $__jpq; $__jnv = _bir(\@__joh, $__jpo, $__jpn); if (!$authlib9_14_2::_amg) { push @__jnu, [$__jnx, join(',', @{$__jnv})]; authlib9_14_2::_xv(\@__jnu, $authlib9_14_2::_akn{"hid_respnum"}, 1, 1); authlib9_14_2::_xj(\@__jnu, $authlib9_14_2::_akn{"hid_respnum"}, 0); } } } } else { my $__jon = 0; if ($authlib9_14_2::_amg) { _bin($__jpo); my $__joo = @{$acbclib9_14_2::_bla->{$__jpo}}; my @__jop = (); for ($__jnr = 0; $__jnr < $__joo; $__jnr++) { push @__jop, ($__jnr + 1); } $__jon = \@__jop; } else { $__jon = _bix($__jpn, $__jpo); } my @__joq = reverse(@{$__jon}); if (exists $__jpn->{'_hr'}) { my $__jor = $__jpn->{'_hr'}; if ($__jpn->{'_fx'} && !$authlib9_14_2::_amg) { my $__joa = $__jpn->{'_ac'}; my $__job = authlib9_14_2::_acy($__joa); if (!_bkj($__jpn, $__job)) { unshift(@__joq, 0); } } if ($__jor > 0 && $__jor < @__joq) { splice @__joq, $__jor; } } $__jnv = _bir(\@__joq, $__jpo, $__jpn); if (!$authlib9_14_2::_amg) { push @__jnu, [$__jnx, join(',', @{$__jnv})]; authlib9_14_2::_xv(\@__jnu, $authlib9_14_2::_akn{"hid_respnum"}, 1, 1); authlib9_14_2::_xj(\@__jnu, $authlib9_14_2::_akn{"hid_respnum"}, 0); } } my $__jos = @{$__jnv}; my $__jot = 0; my $__jou = 0; if ($__jpp =~ m/^(.*?)(\d+)$/i) { $__jot = $2; } if ($__jot) { my $__jov = $__jpn->{'_cw'}; my $__jow = ($__jot - 1) * $__jov; my @__jox = (); my $__joy = 1; my @__joz = @{$__jnv}; my @__jpa = (); my $__jpb = 1; my $__jpc = 0; if ($authlib9_14_2::_amg) { $__jpc = $__jot - 1; } my $__jpd = ""; my @__jpe = (); my @__jpf = (); my $__jpg = ""; my @__jph = (); my $__jpi = 0; my $__jpj = 0; my $__jpk = 0; my $__jpl = 0; while ($__joy) { $__jpi = @__joz; $__jpk = ($__jpc + $__jov) - 1; $__jpd = $__jpo . "_ChoiceTask" . $__jpb; $__jpg = authlib9_14_2::_ws($__jpd); if ($__jpk < $__jpi && $__jot > $__jpb && $__jpg) { my $__jpm = authlib9_14_2::_ws($__jpd . '_shown'); @__jpf = split(',', $__jpm); $__jpl = splice(@__jpf, $__jpg - 1, 1); if (!_biv(\@__jpa, $__jpl)) { push @__jpa, $__jpl; } push @__jpe, @__jpf; $__jpc += $__jov; $__jpb++; } else { if ($__jpk < $__jpi) { for ($__jnr = $__jpc; $__jnr <= $__jpk; $__jnr++) { push @__jph, $__joz[$__jnr]; } last; } else { for ($__jnr = $__jpc; $__jnr < $__jpi; $__jnr++) { unshift @__jpa, $__joz[$__jnr]; } if (@__jpa == 1) { last; } else { while (@__jpa < $__jov) { if ($__jpj < @__jpe) { push @__jpa, $__jpe[$__jpj]; $__jpj++; } else { $__joy = 0; last; } } } @__joz = @__jpa; @__jpa = (); $__jpc = 0; } } } for ($__jnr = 0; $__jnr < @__jph; $__jnr++) { push @__jox, $__jph[$__jnr]; } $__jou = _bim(\@__jox, $__jpo, $__jpn); } return($__jnw, $__jou, $__jos); } sub _bir { my ($__jqt, $__jqu, $__jqv) = @_; my $__jqa = _bim($__jqt, $__jqu, $__jqv); my $__jqb = 1; my $__jqc = 0; my $__jqd = 0; my $__jqe = 0; my $__jqf = 0; my $__jqg = 0; my $__jqh = $__jqv->{'_cw'}; my $__jqi = 0; my $__jqj = 0; my $__jqk = 0; my $__jql = 0; my $__jqm = 0; my $__jqn = 0; my $__jqo = 0; my @__jqp = (); my $__jqq = 0; if (@{$__jqa}) { $__jqq = @{$__jqa->[0]}; } while (@{$__jqa} >= $__jqh) { $__jqn = 0; $__jqi = 0; $__jqd = @{$__jqa}; $__jqc = $__jqd - $__jqh + 1; for ($__jqe = 0; $__jqe < $__jqc; $__jqe++) { $__jqj = 0; for ($__jqf = 1; $__jqf < $__jqq; $__jqf++) { $__jqm = 0; $__jql = 0; for ($__jqg = 0; $__jqg < $__jqh; $__jqg++) { $__jqk = $__jqa->[$__jqe + $__jqg]->[$__jqf]; if ($__jqk != $__jql && $__jqg > 0) { $__jqm = 1; last; } else { $__jql = $__jqk; } } if (!$__jqm) { $__jqj++; } } if ($__jqj > $__jqi) { $__jqi = $__jqj; $__jqn = $__jqe; } } $__jqo = $__jqn + $__jqh; my @__jqr = (); for ($__jqe = 0; $__jqe < $__jqd; $__jqe++) { if ($__jqe >= $__jqn && $__jqe < $__jqo) { push @__jqp, $__jqa->[$__jqe]->[0]; } else { push @__jqr, $__jqa->[$__jqe]; } } $__jqa = \@__jqr; } my $__jqs = @{$__jqa}; for ($__jqe = 0; $__jqe < $__jqs; $__jqe++) { push @__jqp, $__jqa->[$__jqe]->[0]; } return \@__jqp; } sub _bis { my ($__jsf, $__jsg, $__jsh) = @_; my $__jqw = 0; my $__jqx = 0; my $__jqy = []; my $__jqz = _bil($__jsg, $__jsf); my $__jra = 0; my $__jrb = 0; my $__jrc = 0; my $__jrd = 0; my $__jre = 0; my $__jrf = 0; if ($authlib9_14_2::_amg) { my $__jrg = $__jsf->{'_iv'} * $__jsf->{'_cy'}; my %__jrh = (); my %__jri = (); my @__jrj = (); $__jra = 1; $__jrf = 1; for ($__jrd = 2; $__jrd <= $__jrg; $__jrd++) { if ($__jrf == 1) { push @__jrj, $__jrd; $__jrf = 2; } elsif ($__jrf == 2) { $__jrh{$__jrd} = 1; $__jrf = 3; } elsif ($__jrf == 3) { $__jri{$__jrd} = 1; $__jrf = 1; } } $__jre = \@__jrj; $__jrb = \%__jrh; $__jrc = \%__jri; } else { ($__jra, $__jrb, $__jrc) = _biu($__jsf, $__jsg); $__jre = _biy($__jsf, $__jsg); } my $__jrk = _bhy($__jra, $__jre, $__jrb, $__jrc, $__jsf); if ($__jsh =~ m/_Calibration(\d+)/i) { $__jqw = $1; } if ($__jqw <= $__jrk) { my $__jrl = $__jsf->{'_ac'}; my $__jrm = authlib9_14_2::_acy($__jrl); my $__jrn = acbclib9_14_2::_bkj($__jsf, $__jrm); if ($__jqw == 1 && !$authlib9_14_2::_amg) { if ($__jrn) { my $__jro = _bit($__jrb); $__jro = [reverse @{$__jro}]; my $__jrp = _bit($__jrc); my @__jrq = ($__jre, $__jro, $__jrp); my @__jrr = (); my $__jrd = 0; while (1) { if (@__jrq == 1) { if (@{$__jrq[0]} > 0) { push @__jrr, @{$__jrq[0]}; } last; } elsif (@{$__jrq[$__jrd]} > 0) { push(@__jrr, shift(@{$__jrq[$__jrd]})); } else { splice(@__jrq, $__jrd, 1); } $__jrd = ($__jrd + 1) % @__jrq; } if (@__jrr > 0) { $__jqx = $__jrr[0]; } if ($__jqx > 0) { $__jqy = _bim([$__jqx], $__jsg, $__jsf); } else { $__jqy = []; } } else { my $__jrs = 0; my $__jrt = ""; my @__jru = (); my $__jrv = ""; my $__jrw = 0; my $__jrx = ""; push @__jru, 0; my $__jry = "sys_ACBC_" . $__jsg . "_byo"; my $__jrz = authlib9_14_2::_ws($__jry); if ($__jrz) { my @__jsa = split(',', $__jrz); if (@__jsa == 0) { authlib9_14_2::_zq(287, "", "Reading ACBC BYO error.", ""); } push (@__jru, @__jsa); } else { if (exists $__jsf->{'_kf'}) { $__jrw = $__jsf->{'_kf'}->{'_kg'}; } foreach $__jrs (@{$__jqz}) { $__jrt = $__jsg . "_BYO_" . $__jrs; $__jrx = authlib9_14_2::_ws($__jrt); if ($__jrx) { push @__jru, $__jrx; } elsif ($__jrs == $__jrw) { $__jrv = $__jsg . "_BYO_" . $__jrw; $__jrx = authlib9_14_2::_ws($__jrv); if ($__jrx) { push @__jru, $__jrx; } } else { push @__jru, ""; } } } $__jqy = [\@__jru]; $__jqx = 0; } } else { if ($__jqw == $__jrk) { $__jqx = $__jra; if ($__jqx == 0) { my $__jsb = $__jsg . "_Calibration"; my $__jsc = 1; my $__jsd = $__jsb . $__jsc; $__jqx = authlib9_14_2::_ws($__jsd . '_shown'); delete $__jrb->{0}; while ($__jqx ne "" && $__jsc < $__jqw) { delete $__jrb->{$__jqx}; $__jsc++; $__jsd = $__jsb . $__jsc; $__jqx = authlib9_14_2::_ws($__jsd . '_shown'); } my $__jro = _bit($__jrb); if (@{$__jro} > 0) { $__jqx = $__jro->[-1]; } } } else { my %__jse = (); my $__jsb = $__jsg . "_Calibration"; my $__jsc = 1; my $__jsd = $__jsb . $__jsc; $__jqx = authlib9_14_2::_ws($__jsd . '_shown'); while ($__jqx ne "" && $__jsc < $__jqw) { $__jse{$__jqx} = 1; $__jsc++; $__jsd = $__jsb . $__jsc; $__jqx = authlib9_14_2::_ws($__jsd . '_shown'); } my $__jro = _bit($__jrb); $__jro = [reverse @{$__jro}]; my $__jrp = _bit($__jrc); my @__jrq = ($__jre, $__jro, $__jrp); my @__jrr = (); my $__jrd = 0; while (1) { if (@__jrq == 1) { if (@{$__jrq[0]} > 0) { push @__jrr, @{$__jrq[0]}; } last; } elsif (@{$__jrq[$__jrd]} > 0) { push(@__jrr, shift(@{$__jrq[$__jrd]})); } else { splice(@__jrq, $__jrd, 1); } $__jrd = ($__jrd + 1) % @__jrq; } foreach $__jrd (@__jrr) { if (!$__jse{$__jrd}) { $__jqx = $__jrd; last; } } } if ($__jqx > 0) { $__jqy = _bim([$__jqx], $__jsg, $__jsf); } else { $__jqy = []; } } } return ($__jqz, $__jqy, $__jqx, $__jrk); } sub _bit { my ($__jsl) = @_; my %__jsi = reverse %{$__jsl}; my @__jsj = (); foreach my $__jsk (sort {$a <=> $b } keys %__jsi) { push(@__jsj, $__jsi{$__jsk}); } return \@__jsj; } sub _biu { my ($__jtb, $__jtc) = @_; my $__jsm = 1; my $__jsn = $__jtc . "_ChoiceTask"; my $__jso = ""; my $__jsp = ""; my $__jsq = 0; my $__jsr = 0; my $__jss = -1; my %__jst = (); my %__jsu = (); my @__jsv = (); my $__jsw = 1; my $__jsx = 1; my $__jsy = 0; $__jsp = authlib9_14_2::_ws($__jsn . $__jsm . '_shown'); while ($__jsp) { $__jso = authlib9_14_2::_ws($__jsn . $__jsm); @__jsv = split(",", $__jsp); $__jsq = splice(@__jsv, $__jso - 1, 1); $__jst{$__jsq} = $__jsw; $__jsw++; $__jss = $__jsq; foreach $__jsr (@__jsv) { $__jsu{$__jsr} = $__jsx; $__jsx++; } $__jsm++; $__jsp = authlib9_14_2::_ws($__jsn . $__jsm . '_shown'); } if ($authlib9_14_2::_amg) { my $__jsz = authlib9_14_2::_aam($__jtc); my $__jta = $__jsz * $__jtb->{'_cw'}; $__jss = 1; for ($__jsy = 2; $__jsy < $__jta; $__jsy += $__jta) { $__jst{$__jsy} = $__jsw; $__jsw++; $__jsu{$__jsy + 1} = $__jsx; $__jsx++; if ($__jta == 3) { $__jsu{$__jsy + 2} = $__jsx; $__jsx++; } } } foreach $__jsq (%__jst) { if (exists $__jsu{$__jsq}) { delete $__jsu{$__jsq}; } } delete $__jst{$__jss}; return ($__jss, \%__jst, \%__jsu); } sub _biv { my ($__jtg, $__jth) = @_; my $__jtd = @{$__jtg}; my $__jte = 0; my $__jtf = 0; for ($__jtf = 0; $__jtf < $__jtd; $__jtf++) { if ($__jtg->[$__jtf] == $__jth) { $__jte = 1; } } return $__jte; } sub _biw { my ($__jtj, $__jtk, $__jtl) = @_; my $__jti = _biz($__jtj, $__jtk, 1, 0, 0, $__jtl); return $__jti; } sub _bix { my ($__jto, $__jtp) = @_; my $__jtm = $__jto->{'_iv'}; my $__jtn = _biz($__jto, $__jtp, 0, 1, 0, $__jtm); return $__jtn; } sub _biy { my ($__jts, $__jtt) = @_; my $__jtq = $__jts->{'_iv'}; my $__jtr = _biz($__jts, $__jtt, 0, 0, 1, $__jtq); return $__jtr; } sub _biz { my ($__jug, $__juh, $__jui, $__juj, $__juk, $__jul) = @_; my $__jtu = 0; my $__jtv = 0; my $__jtw = $__jug->{'_cy'}; my $__jtx = ""; my $__jty = 0; my $__jtz = 0; my %__jua = (); my @__jub = (); my @__juc = (); my $__jud = ""; for ($__jtu = 1; $__jtu <= $__jul; $__jtu++) { my $__jue = authlib9_14_2::_ws($__juh . '_Screener' . $__jtu . '_shown'); my @__juf = (); if ($__jue) { @__juf = split(',', $__jue); } if (@__juf == 0 && !$authlib9_14_2::_amg) { next; } for ($__jtv = 1; $__jtv <= $__jtw; $__jtv++) { $__jtx = $__juh . '_Screener' . $__jtu . '_' . $__jtv; $__jud = authlib9_14_2::_ws($__jtx); if ($__jud ne "") { $__jty = $__jud; $__jtz = $__juf[$__jtv - 1]; if ($__jui) { $__jua{$__jtz} = 1; } elsif ($__juj) { if ($__jty) { push @__jub, $__jtz; } } elsif ($__juk) { if (!$__jty) { push @__juc, $__jtz; } } } elsif ($authlib9_14_2::_amg) { if ($__jtu < $__jul) { $__jtz = $__jtv + (($__jtu - 1) * $__jtw); if ($__jui) { $__jua{$__jtz} = 1; } elsif ($__juj) { push @__jub, $__jtz; } elsif ($__juk) { push @__juc, $__jtz; } } } } } if ($__jui) { return \%__jua; } elsif ($__juj) { return \@__jub; } elsif ($__juk) { return \@__juc; } } sub _bja { my ($__jvd, $__jve, $__jvf, $__jvg) = @_; my $__jum = $__jve->{'_cy'}; my $__jun = @{$__jvd}; my $__juo = 2; my $__jup = $__jun - ($__jum * $__juo); my $__juq = 0; if ($__jup) { my $__jur = 0; my @__jus = (); my $__jut = 0; my $__juu = 0; my $__juv = 0; if (exists $__jve->{'_kf'}) { $__juv = $__jve->{'_kf'}->{'_kg'}; } for ($__jur = 0; $__jur < $__jup; $__jur++) { $__jut = _bjb($__jur, $__jum, $__jvd, $__jvf, $__juv); $__juu = _bjb($__jur + $__jum, $__jum, $__jvd, $__jvf, $__juv); push @__jus, [$__jut * $__juu, $__jur]; } @__jus = sort{$b->[0] <=> $a->[0]} @__jus; my @__juw = (); my $__jux = $__jus[0]->[1]; my $__juy = $__jux + ($__jum * $__juo); my %__juz = (); my @__jva = (); if ($__jux) { my $__jvb = 1; my $__jvc = 0; if ($__juy > $__jun) { $__juy = $__jun; } for ($__jur = $__jux; $__jur < $__juy; $__jur++) { $__jvc = $__jvd->[$__jur]; if (defined $__jvg->[$__jvc->[0] - 1]) { push @__jva, $__jvg->[$__jvc->[0] - 1]; } $__juz{$__jvc->[0] - 1} = $__jvb - 1 if ($__jvc->[0] != $__jvb); $__jvc->[0] = $__jvb; $__jvb++; push @__juw, $__jvc; } for ($__jur = 0; $__jur < $__jux; $__jur++) { $__jvc = $__jvd->[$__jur]; if (defined $__jvg->[$__jvc->[0] - 1]) { push @__jva, $__jvg->[$__jvc->[0] - 1]; } $__juz{$__jvc->[0] - 1} = $__jvb - 1 if ($__jvc->[0] != $__jvb); $__jvc->[0] = $__jvb; $__jvb++; push @__juw, $__jvc; } for ($__jur = $__juy; $__jur < $__jun; $__jur++) { $__jvc = $__jvd->[$__jur]; if (defined $__jvg->[$__jvc->[0] - 1]) { push @__jva, $__jvg->[$__jvc->[0] - 1]; } $__juz{$__jvc->[0] - 1} = $__jvb - 1 if ($__jvc->[0] != $__jvb); $__jvc->[0] = $__jvb; $__jvb++; push @__juw, $__jvc; } $__juq = \@__juw; for ($__jur = 0; $__jur < @__jva; $__jur++) { $__jvg->[$__jur] = $__jva[$__jur]; } } else { $__juq = $__jvd; } } else { $__juq = $__jvd; } return $__juq; } sub _bjb { my ($__jvp, $__jvq, $__jvr, $__jvs, $__jvt) = @_; my $__jvh = 0; my $__jvi = 0; my $__jvj = 0; my %__jvk = (); my $__jvl = 0; my $__jvm = 1; my $__jvn = $__jvp + $__jvq; my $__jvo = @{$__jvs}; for ($__jvi = 0; $__jvi < $__jvo; $__jvi++) { if ($__jvs->[$__jvi] != $__jvt) { %__jvk = (); for ($__jvj = $__jvp; $__jvj < $__jvn; $__jvj++) { $__jvk{$__jvr->[$__jvj]->[$__jvi + 1]} = 1; } $__jvl = keys(%__jvk) - .9; if ($__jvl < 0) { $__jvl = 0; } $__jvm *= $__jvl; } } return $__jvm; } sub _bjc { my ($__jwa, $__jwb, $__jwc, $__jwd) = @_; my $__jvu = 1; if (keys %{$__jwa}) { my $__jvv = @{$__jwc}; my $__jvw = 0; my $__jvx = 0; my $__jvy = 0; my @__jvz = (); for ($__jvy = 0; $__jvy < $__jvv; $__jvy++) { $__jvw = $__jwc->[$__jvy]; $__jvx = $__jwb->[$__jvy + 1]; if (exists $__jwa->{$__jvw}) { if ($__jvw == $__jwd) { @__jvz = keys %{$__jwa->{$__jvw}}; if ($__jvx > $__jvz[0]) { $__jvu = 0; last; } } elsif (exists $__jwa->{$__jvw}->{$__jvx}) { $__jvu = 0; last; } } } } return $__jvu; } sub _bjd { my ($__jww, $__jwx, $__jwy) = @_; my %__jwe = (); my $__jwf = 0; my $__jwg = 0; my $__jwh = $__jww->{'_is'}; my $__jwi = ""; my $__jwj = ""; my $__jwk = 0; my $__jwl = 0; my $__jwm = 0; my $__jwn = 0; my $__jwo = 0; my $__jwp = 0; my $__jwq = 0; my $__jwr = ""; if (exists($authlib9_14_2::_ahp{$__jwy})) { $__jwn = $authlib9_14_2::_ahp{$__jwy}; $__jwo = $__jwn->{'_ji'}; } for ($__jwf = 1; $__jwf <= $__jwh; $__jwf++) { $__jwi = $__jwx . "_MustHave" . $__jwf; $__jwj = authlib9_14_2::_ws($__jwi); if ($__jwj ne "") { $__jwn = $authlib9_14_2::_ahp{$__jwi}; $__jwp = $__jwn->{'_ji'}; if ($__jwp < $__jwo) { $__jwi .= "_shown"; $__jwr = authlib9_14_2::_ws($__jwi); $__jwq = 0; if ($__jwr) { $__jwq = eval($__jwr); if ($@) { authlib9_14_2::_zq(292, "", "ACBC Error. Error reading ACBC rules shown list.", $@); } } if ($__jwj > 0 && $__jwq) { ($__jwk, $__jwl, $__jwm) = @{$__jwq->[$__jwj - 1]}; _bje(\%__jwe, $__jww, $__jwk, $__jwl, $__jwm); } } } } my $__jws = $__jww->{'_iw'}; my $__jwt = ""; my $__jwu = 0; my $__jwv = ""; for ($__jwf = 1; $__jwf <= $__jws; $__jwf++) { $__jwt = $__jwx . "_Unacceptable" . $__jwf; $__jwj = authlib9_14_2::_ws($__jwt); if ($__jwj ne "") { $__jwn = $authlib9_14_2::_ahp{$__jwt}; $__jwu = $__jwn->{'_ji'}; if ($__jwu < $__jwo) { $__jwt .= '_shown'; $__jwv = authlib9_14_2::_ws($__jwt); $__jwq = 0; if ($__jwv) { $__jwq = eval $__jwv; if ($@) { authlib9_14_2::_zq(293, "", "ACBC Error. Error reading ACBC rules shown list.", $@); } } if ($__jwj > 0 && $__jwq) { ($__jwk, $__jwl) = @{$__jwq->[$__jwj - 1]}; _bjf(\%__jwe, $__jww, $__jwk, $__jwl); } } } } return \%__jwe; } sub _bje { my ($__jxf, $__jxg, $__jxh, $__jxi, $__jxj) = @_; my $__jwz = 0; my $__jxa = $__jxg->{'_ad'}; my $__jxb = $__jxa->{$__jxh}->{'_ni'}; if (exists $__jxf->{$__jxh}) { $__jwz = $__jxf->{$__jxh}; } else { $__jwz = {}; } my $__jxc = authlib9_14_2::_adc($__jxa->{$__jxh}->{'_he'}); my $__jxd = @{$__jxc}; my $__jxe = 0; if (($__jxj == 1 && $__jxb == 1) || ($__jxj == 2 && $__jxb == 2)) { for ($__jxe = $__jxi - 1; $__jxe > 0; $__jxe--) { $__jwz->{$__jxe} = 1; } } elsif (($__jxj == 2 && $__jxb == 1) || ($__jxj == 1 && $__jxb == 2)) { for ($__jxe = ($__jxi + 1); $__jxe <= $__jxd; $__jxe++) { $__jwz->{$__jxe} = 1; } } else { for ($__jxe = 1; $__jxe <= $__jxd; $__jxe++) { if ($__jxe != $__jxi) { $__jwz->{$__jxe} = 1; } } } $__jxf->{$__jxh} = $__jwz; } sub _bjf { my ($__jxq, $__jxr, $__jxs, $__jxt) = @_; my $__jxk = 0; my $__jxl = $__jxr->{'_ad'}; if (exists $__jxq->{$__jxs}) { $__jxk = $__jxq->{$__jxs}; } else { $__jxk = {}; } if (exists $__jxl->{$__jxs}) { my $__jxm = $__jxl->{$__jxs}->{'_kb'}; my $__jxn = authlib9_14_2::_adc($__jxl->{$__jxs}->{'_he'}); my $__jxo = @{$__jxn}; my $__jxp = 0; if ($__jxm == 1) { for ($__jxp = $__jxt; $__jxp > 0; $__jxp--) { $__jxk->{$__jxp} = 1; } } elsif ($__jxm == 2) { for ($__jxp = $__jxt; $__jxp <= $__jxo; $__jxp++) { $__jxk->{$__jxp} = 1; } } else { $__jxk->{$__jxt} = 1; } } else { $__jxk->{$__jxt} = 1; } $__jxq->{$__jxs} = $__jxk; } sub _azb { my ($__kfg, $__kfh, $__kfi, $__kfj, $__kfk, $__kfl, $__kfm, $__kfn, $__kfo, $__kfp, $__kfq) = @_; my @__jxu = (); my @__jxv = (); my $__jxw = 1; my @__jxx = (); my $__jxy = $authlib9_14_2::_akn{"hid_respnum"}; my $__jxz = $__jxy + $__kfn * 47; $acbclib9_14_2::_blb = 1; my $__jya = @{$__kfj}; my $__jyb = 0; my $__jyc = 0; my %__jyd = (); my %__jye = (); my $__jyf = .5; my $__jyg = 2000; my $__jyh = 1000; my $__jyi = 20000; if ($authlib9_14_2::_amg) { $__jyh = 20; $__jyg = 100; $__jyi = 200; } my $__jyj = undef; my $__jyk = undef; my $__jyl = undef; my @__jym = (); my $__jyn = undef; if ($authlib9_14_2::_amg) { @__jym = (1) x @{$__kfj}; } else { $__jyl = 'sys_ACBC_' . $__kfh . '_byo'; my $__jyo = authlib9_14_2::_ws($__jyl); if ($__jyo) { @__jym = split(',', $__jyo); if (@__jym == 0) { authlib9_14_2::_zq(294, "", "Reading ACBC BYO Error.", ""); } } elsif ($__kfp) { @__jym = @{$__kfp}; } } my @__jyp = @__jym; my @__jyq = (0) x $__jya; my $__jyr = 0; my @__jys = (); my $__jyt = 0; my %__jyu = (); my @__jyv = (); my $__jyw = 0; my $__jyx = $__kfg->{'_ad'}; my $__jyy = ""; my $__jyz = 0; my $__jza = 0; my $__jzb = 0; my $__jzc = 4; my %__jzd = (); my $__jze = 0; my $__jzf = -1; my @__jzg = (); my %__jzh = (); my @__jzi = (); my $__jzj = 0; my $__jzk = 0; my @__jzl = (); my $__jzm = 0; my $__jzn = 0; my $__jzo = 0; my $__jzp = 0; my $__jzq = 0; if (exists $__kfg->{'_kf'}) { my $__jzr = $__kfg->{'_kf'}; $__jzb = $__jzr->{'_kg'}; $__jyd{$__jzb} = 1; my $__jzs = 0; if (exists $__jzr->{'_kn'}) { $__jzs = $__jzr->{'_kn'} / 100; } my $__jzt = 0; if (exists $__jzr->{'_km'}) { $__jzt = $__jzr->{'_km'} / 100; } if ($__jzs || $__jzt) { my $__jzu = $__jzt + $__jzs; my $__jzv = $__jzu / $__jzc; my $__jzw = $__jzs * -1; for ($__jyb = 0; $__jyb < $__jzc; $__jyb++) { push @__jzl, [$__jzw, $__jzw + $__jzv]; $__jzw = $__jzw + $__jzv; } } if (exists $__jzr->{'_ix'}) { $__jzm = $__jzr->{'_ix'}; } if (exists $__jzr->{'_mu'}) { $__jzn = $__jzr->{'_mu'}; } if (exists $__jzr->{'_h'}) { $__jzo = $__jzr->{'_h'}; } if (exists $__jzr->{'_aq'}) { $__jzp = $__jzr->{'_aq'}; } } my $__jzx = "sys_ACBC_" . $__kfh . "_levelCnt" . $__kfn; my $__jzy = 0; my $__jzz = authlib9_14_2::_ws($__jzx); if ($__jzz) { my $__kaa = eval($__jzz); if ($@) { authlib9_14_2::_zq(169, "", "Reading ACBC level count array error.", $@); } @__jzg = @{$__kaa}; $__jzy = 1; } my $__kab = "sys_ACBC_" . $__kfh . "_rndArray" . $__kfn; my $__kac = 0; my $__kad = authlib9_14_2::_ws($__kab); if ($__kad) { my $__kae = eval($__kad); if ($@) { authlib9_14_2::_zq(170, "", "Reading ACBC random array.", $@); } @__jyv = @{$__kae}; my $__kaf = @__jyv; $__jyw = $__jyv[$__kaf - 1]; $__kac = 1; } my $__kag = 0; my $__kah = 0; my $__kai = 0; for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { $__jza = 0; $__jyj = $__kfj->[$__jyb]; $__jzd{$__jyj} = $__jyb; if ($__jyj == $__jzb) { push(@__jxu, [$__jyb, 2]); $__jza = @__jzl; $__jze = 1; $__jzf = $__jyb; push @__jzi, 0; push(@__jys, $__jyr); $__jyq[$__jyb] = $__jza; $__jyt += $__jza; $__jyr += ($__jza - 1); if (not exists $__jyu{$__jza}) { $__jyu{$__jza} = acbclib9_14_2::_bks($__jza); } } else { if (exists $__jyx->{$__jyj}) { if ($__jyx->{$__jyj}->{'_kb'}) { push(@__jxu, [$__jyb, $__jyx->{$__jyj}->{'_kb'}]); } else { push(@__jxv, $__jyb); } if ($__jyx->{$__jyj}->{'_db'} || $__jyx->{$__jyj}->{'_kp'}) { $__kai = 1; } $__jyy = $__jyx->{$__jyj}->{'_he'}; $__jyz = authlib9_14_2::_acy($__jyy); $__jza = 0; if ($__jyz) { $__jza = @{$__jyz}; } if ($__jza == 0) { authlib9_14_2::_zq(171, "ACBC Error.", "ACBC Error. Attribute #" . $__jyj . " has no levels.", $@); } $__jzh{$__jyj} = $__jyz; push(@__jys, $__jyr); $__jyq[$__jyb] = $__jza; $__jyt += $__jza; $__jyr += ($__jza - 1); if (not exists $__jyu{$__jza}) { $__jyu{$__jza} = acbclib9_14_2::_bks($__jza); } $__jzj = authlib9_14_2::_acx($__jyy); if ($__jzj && exists($__jzj->{'_jq'})) { my %__kaj = (); for ($__jyc = 0; $__jyc < $__jza; $__jyc++) { $__jzk = $__jyz->[$__jyc]->{'_pt'}; $__kaj{$__jzk} = $__jyc; if (exists $__jyz->[$__jyc]->{'_in'}) { authlib9_14_2::_zq(172, "ACBC Error.", "ACBC Error. Attribute #" . $__jyj . " level #" . $__jzk . " is an Exclusive (\"None of the Above\") list member.", $@); } } push @__jzi, \%__kaj; } else { push @__jzi, 0; } if (exists $__jyx->{$__jyj}->{'_me'}) { $__jyd{$__jyj} = 1; $__jzq++; } } else { next; } } if ($__kac) { $__kah = $__jyv[$__jyb]; } else { $__kah = _bkf($__jza); push @__jyv, $__kah; } if (!$__jzy) { push @__jzg, [(0) x $__jza]; } if ($__jyj != $__jzb) { if (exists $__kfm->{$__jyj}) { if ((keys %{$__kfm->{$__jyj}}) >= ($__jza - 1)) { $__jyd{$__jyj} = 1; $__jye{$__jyj} = 1; } } if ($__jza <= 1) { $__jyd{$__jyj} = 1; $__jye{$__jyj} = 1; } $__kag = _bjo($__kfh, $__kfm, $__jyj, $__jyb, \@__jym, $__jyx->{$__jyj}, $__jyz, $__jxy, $__kah, $__jzb, $__jxz); if ($__kag) { return (0, 0, 0, 0, 0, 0); } } } if ($__kai) { if ($authlib9_14_2::_amg) { for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { $__jyj = $__kfj->[$__jyb]; if ($__jyj != $__jzb) { _bjj($__jyx, \%__jzd, \@__jzi, $__jyj, $__jzb, \@__jyp, \@__jyv, \%__jzh, \@__jzg, $__kfm, $__jxz, \@__jym, 0, 0); } } @__jyp = @__jym; } else { for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { $__jyj = $__kfj->[$__jyb]; if ($__jyj != $__jzb && $__jyp[$__jyb] != $__jym[$__jyb]) { _bjj($__jyx, \%__jzd, \@__jzi, $__jyj, $__jzb, \@__jyp, \@__jyv, \%__jzh, \@__jzg, $__kfm, $__jxz, \@__jym, 0, 0); } } } } if ($__jzy) { _bjm(\@__jzg, \@__jyp, $__kfj, $__jyx, \@__jzi, $__jyf, 1); } my @__kak = (); my $__kal = "sys_ACBC_" . $__kfh . "_attCnt" . $__kfn; my $__kam = authlib9_14_2::_ws($__kal); if ($__kam) { my $__kan = eval($__kam); if ($@) { authlib9_14_2::_zq(173, "", "Reading ACBC attribute count array error.", $@); } @__kak = @{$__kan}; } else { @__kak = (0) x $__jya; } if (exists $__kfg->{'_kf'} && !$__jze) { $__jzb = 0; authlib9_14_2::_zp($__kfh, "Your ACBC settings indicate that one of your attributes is price, but the price attribute cannot be found."); } my $__kao = 0; my $__kap = 0; my $__kaq = keys %__jyd; my $__kar = $__jya - $__kaq; if ($__kar < 1 && $__jzq == 0) { return (0, 0, 0, 0, 0, 0); } my $__kas = $__kfg->{'_hy'}; if ($__kas > $__kar) { $__kas = $__kar; } my $__kat = $__jya; if ($__jzb) { $__kat--; } if ($__jzq) { $__kat -= $__jzq; } $__kat = authlib9_14_2::_abi($__kat / 2); my $__kau = $__kfg->{'_hq'}; if ($__kau > $__kat) { $__kau = $__kat; } if ($__kau > $__kar) { $__kau = $__kar; } if ($__kar == 1 || $__kat == 1) { $__kas = 0; } if ($__kas > $__kau) { $__kas = $__kau; } my $__kav = _bkf((($__kau - $__kas) + 1)); if (!$__kac) { $__jyw = _bkf($__jya); push @__jyv, $__jyw; } my @__kaw = (); my $__kax = $__kfn; while ($__jzb && $__kax > 0) { my $__kay = "sys_ACBC_" . $__kfh . "_pricelevels" . $__kax; my $__kaz = authlib9_14_2::_ws($__kay); if ($__kaz) { my $__kba = eval($__kaz); if ($@) { authlib9_14_2::_zq(284, "", "Reading ACBC price level array error.", $@); } @__kaw = (@{$__kba}, @__kaw); } $__kax--; } my @__kbb = (); my $__kbc = exists $__kfg->{'_aj'} ? 1 : 0; if (@__jxu == 0) { $__kbc = 0; } my @__kbd = (); my @__kbe = (); foreach my $__kbf (@{$__kfl}) { my @__kbg = @{authlib9_14_2::_acv($__kbf)}; if ($__jzb) { push(@__kbd, $__kbg[$__jzf + 1]); if (defined $__kaw[$__kbg[0] - 1]) { $__kbg[$__jzf + 1] = $__kaw[$__kbg[0] - 1]; } else { $__kbg[$__jzf + 1] = 0; } } shift(@__kbg); push(@__kbb, \@__kbg); } my %__kbh = (); $__kbh{"original"} = { "AttTwiddleCntArray" => authlib9_14_2::_acv(\@__kak), "blnAvoidDominated" => $__kbc, "intConceptNumber" => $__kfk, "LevelCountArray" => authlib9_14_2::_acv(\@__jzg), "TaskPriceLevels" => authlib9_14_2::_acv(\@__kaw), "TaskPrices" => authlib9_14_2::_acv(\@__kbd), "Tasks" => authlib9_14_2::_acv(\@__kbb), }; $__kbh{"max"}->{"CurrentEfficiency"} = 0; $__kbh{"max"}->{"intRedealCnt"} = -1; my @__kbi = (); for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { push (@__kbi, _bjs($__jyp[$__jyb], $__jzi[$__jyb])); } my $__kbj = 0; if (exists $__kfg->{'_fx'}) { $__kbj = !$__kfq; } my @__kbk = (); my @__kbl = (); my $__kbm = 5; my $__kbn = undef; my $__kbo = 0; if (exists $__kfm->{$__jzb}) { my @__kbp = keys %{$__kfm->{$__jzb}}; $__kbo = $__kbp[0]; } if (exists $authlib9_14_2::_ajw->{$__kfh . "_design_deals"} && defined $authlib9_14_2::_ajw->{$__kfh . "_design_deals"}) { $__kbm = $authlib9_14_2::_ajw->{$__kfh . "_design_deals"}; } else { if (!$authlib9_14_2::_amg && $__kfn == 0) { $__kbm = 20; } eval { require("Time/HiRes.pm"); $__kbn = [Time::HiRes::gettimeofday()]; }; if ($@) { authlib9_14_2::_zq(0, "Unable to load Time/HiRes.pm<br/><br/>", $@, ""); } } my $__kbq = 0; my %__kbr = (); my @__kbs = (); my $__kbt = 0; my $__kbu = 0; my $__kbv = 0; my $__kbw = 0; my $__kbx = 0; my $__kby = 0; my $__kbz = 0; my $__kca = 0; my $__kcb = 1; my $__kcc = 0; my $__kcd = 0; my $__kce = 0; my $__kcf = 0; my $__kcg = 0; my $__kch = 0; my $__kci = 1; my $__kcj = 0; my $__kck = 0; my $__kcl = 0; my $__jzv = 0; my $__kcm = 0; my $__kcn = 0; my $__kco = 0; my $__kcp = 0; my $__kcq = 0; my $__kcr = $__kfg->{'_aa'}; my $__kcs = 0; my $__kct = 0; my $__kcu = 0; my $__kcv = {}; my $__kcw = 0; my $__kcx = 0; my $__kcy = 0; my $__kcz = 0; my $__kda = 0; my $__kdb = 0; my $__kdc = 0; my $__kdd = 0; for ($__kdc = 0; $__kdc < $__kbm && !$__kdd; $__kdc++) { @__kbk = (); $__kao = 0; @__kbl = (); $__kbq = 0; %__kbr = (); $__kbt = 0; $__kbu = 0; $__kbv = 0; $__kbw = 0; $__kbx = 0; $__kby = 0; $__kbz = 0; $__kca = 0; $__kcb = 1; $__kcc = 0; $__kcd = 0; $__kce = 0; $__kcf = 0; $__kcg = 0; $__kch = 0; $__kci = 1; $__kcj = 0; $__kck = 0; $__kcl = 0; $__jzv = 0; $__kcm = 0; $__kcn = 0; $__kco = 0; $__kcp = 0; $__kcq = 0; $__kcr = $__kfg->{'_aa'}; $__kcs = 0; $__kct = 0; $__kcu = 0; @__kak = @{authlib9_14_2::_acv($__kbh{"original"}->{"AttTwiddleCntArray"})}; $__kfk = $__kbh{"original"}->{"intConceptNumber"}; @__jzg = @{authlib9_14_2::_acv($__kbh{"original"}->{"LevelCountArray"})}; $__kcv = {}; @__kbd = @{authlib9_14_2::_acv($__kbh{"original"}->{"TaskPrices"})}; while ($__kao < $__kfi) { $__kcb = 1; $__kcp = 0; $__kcm = 0; while ($__kcb) { $__kcc = 0; if ($__kbc && $__kcp == $__jyh) { $__kbc = 0; authlib9_14_2::_zp($__kfh, "Cannot create a new concept after " . $__jyh . " iterations. Turning off avoid dominated concepts code."); } elsif ($__kcp == $__jyg) { $__kci = 0; authlib9_14_2::_zp($__kfh, "Cannot create a new concept after " . $__jyg . " iterations. Turning off balancing code."); } elsif ($__kcp >= $__jyi) { if ($authlib9_14_2::_amg && $__jxw) { $__kcp = 0; $__jxw = 0; } else { authlib9_14_2::_zp($__kfh, "Cannot create a new concept after " . $__jyi . " iterations. Proceeding with " . $__kao . " concepts."); $__kbu = 1; last; } } @__jxx = @__jym; $__kbx = _azm($__kav, $__jxz) + $__kas; if ($__kai && $__kbx == 0 && $__kar == 1) { my @__kde = (); for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { push(@__kde, $__kfj->[$__jyb]) if ($__jxx[$__jyb] != 0); } if (@__kde == 1 && !$__jyd{$__kde[0]}) { $__kbx = 1; } } elsif ($__kbx == 0 && $__jzq == 0 && $__kar > 0) { $__kbx = 1; } $__kbq = 0; %__kbr = (); @__kbs = (); $__kbt = 0; $__kcd = 0; $__kce = 0; $__kcf = 0; $__kcg = 0; $__kch = 0; while ($__kbq < $__kbx) { my $__kdf = _azm($__jyw, $__jxz); $__kbv = $__kfj->[$__kdf]; if (!exists $__jyd{$__kbv} && !exists $__kbr{$__kbv} && $__jym[$__jzd{$__kbv}] != 0) { $__kbr{$__kbv} = 1; push @__kbs, $__kbv; $__kbq++; } elsif ($__kbt > ($__jya * 2)) { if ($__kbq > 0) { if (!$__kcq) { authlib9_14_2::_zp($__kfh, "Could not create a new concept by altering " . $__kbx . " attributes. Proceeding with by modifying fewer attributes from the BYO selection (now is " . $__kbq . ")."); $__kcq = 1; } } elsif ($__jzq == 0) { authlib9_14_2::_zp($__kfh, "Was not able to alter any attributes in order to create a new concept. Proceeding with " . $__kao . " concepts."); $__kbu = 1; } last; } $__kbt++; } if ($__kbu) { last; } if (@__kbs) { if ($__kci) { _bju(\@__kak, \@__kbs, \%__jyd, $__kfj, \%__jzd, \@__jyp); } for ($__jyb = 0; $__jyb < @__kbs; $__jyb++) { $__kbv = $__kbs[$__jyb]; $__kbw = $__jzd{$__kbv}; $__kby = $__jxx[$__kbw]; $__jyz = $__jzh{$__kbv}; $__jza = @{$__jyz}; $__kca = _bjp($__kbv, $__jza, $__jyv[$__kbw], $__jyz, $__kby, $__kfm, $__jzb, $__jxz); if ($__kca) { $__jxx[$__kbw] = $__kca; } if ($__kci) { ($__kcd, $__kce) = _bjr($__jzg[$__kbw], $__jzh{$__kbv}, $__kby, $__kbv, $__kfm, $__jzb); if (($__kce > $__kcf) || ($__kcf == 0)) { $__kcf = $__kce; $__kcg = $__kcd; $__kch = $__kbw; } } } if ($__kci) { $__jxx[$__kch] = $__kcg; $__jyv[$__kch]->{"i"}--; } } foreach $__jyj (sort {$a <=> $b} keys %__jyd) { if (!exists $__jye{$__jyj} && $__jym[$__jzd{$__jyj}] != 0) { if ($__jyj != $__jzb) { if (exists $__jzd{$__jyj}) { $__kbw = $__jzd{$__jyj}; $__jyz = $__jzh{$__jyj}; $__jza = @{$__jyz}; $__kca = _bjp($__jyj, $__jza, $__jyv[$__kbw], $__jyz, 0, $__kfm, $__jzb, $__jxz); if ($__kca) { $__jxx[$__kbw] = $__kca; push(@__kbs, $__jyj); } } } } } if ($__kai) { foreach $__jyj (@__kbs) { _bjj($__jyx, \%__jzd, \@__jzi, $__jyj, $__jzb, \@__jym, \@__jyv, \%__jzh, \@__jzg, $__kfm, $__jxz, \@__jxx, 0, 0); } } if ($__jxw) { if (exists $__kfg->{'_ks'}) { $__kcc = _azq(\@__jxx, $__kfg->{'_ks'}, \%__jzd, 0); } if ($__kcc == 0) { $__kcc = _azs(\@__jxx, \@__kbk, $__kfl, $__jzf); } if ($__kcc == 0 && !$__kfq) { my @__kdg = (0, @__jyp); $__kcc = _bka(\@__jxx, [\@__kdg], $__jzf); } } if ($__kcc == 0) { my $__kdh = 1; for ($__jyb = 0; $__jyb < @__jxx && $__kdh; $__jyb++) { $__kdh &= $__jxx[$__jyb] == 0; } $__kcc = $__kdh; } if ($__kcc == 0) { if ($__jzb) { if (@__jzl > 0) { $__jxx[$__jzf] = _azm($__jyv[$__jzf], $__jxz) + 1; } else { $__jxx[$__jzf] = 0; } if (exists $__kfg->{'_dc'}) { $__kct = _bjl($__kfg->{'_dc'}, \%__jzd, \@__jxx); } $__kcm = 0; $__kcn = 0; for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { $__jyj = $__kfj->[$__jyb]; if ($__jyj == $__jzb) { if (@__jzl > 0) { push(@__kbl, $__jxx[$__jyb]); $__kcn = _bkh($__jzl[$__jxx[$__jyb] - 1], $__jxz + $__kfk); } } else { if (exists $__jyx->{$__jyj}) { $__kco = $__jyx->{$__jyj}->{'_ko'}; $__jyk = $__jxx[$__jyb]; next if ($__jyk == 0); $__kcu = $__kco->[$__jyk - 1]; if (exists $__kfg->{'_dc'}) { if (exists $__kct->{$__jyj . "," . $__jyk}) { $__kcu += $__kct->{$__jyj . "," . $__jyk}; } } $__kcm += $__kcu; } } } $__kcm += $__jzp; if ($__kcn) { $__kcm += $__kcm * $__kcn; } if ($__jzn) { $__kcm = authlib9_14_2::_abk($__kcm, $__jzn, -1); } if ($__jzo) { $__kcm += $__jzo; } $__kcm = authlib9_14_2::_abj($__kcm, $__jzm); } } if ($__jxw) { if ($__kcc == 0 && exists $__kfm->{$__jzb}) { if ($__kcm > $__kbo) { $__kcc = 1; } } } if ($__kcc == 0 && $__kbc) { my $__kdi = 0; if ($__jzb) { $__kdi = $__jxx[$__jzf]; $__jxx[$__jzf] = $__kcm; } $__kcc = _azp(\@__jxx, \@__kbk, $__kfl, \@__jxu, \@__jxv, $__kbj ? \@__jym : 0, \@__jzi, -1, $__jzf, \@__jyq); if ($__jzb) { $__jxx[$__jzf] = $__kdi; } } if ($__kcc == 0) { $__kcb = 0; } else { $__kcp++; } } if ($__kbu) { last; } for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { $__jzv = 1; next if ($__jxx[$__jyb] == 0); $__kck = _bjs($__jxx[$__jyb], $__jzi[$__jyb]); if ($__jyb != $__jzf) { $__kcj = $__kbi[$__jyb]; $__jyj = $__kfj->[$__jyb]; if (exists $__jyx->{$__jyj} && $__jym[$__jyb] != 0) { $__kcl = $__jyx->{$__jyj}->{'_ni'}; if ($__kcl) { if (($__kck == $__kcj + 1) || ($__kck == $__kcj - 1)) { $__jzv = $__jyf; } } } } $__jzg[$__jyb]->[$__kck] += $__jzv; } for ($__jyb = 0; $__jyb < @__jxx; $__jyb++) { if ($__jzf != $__jyb) { if ($__jxx[$__jyb] != 0 && $__jym[$__jyb] != $__jxx[$__jyb]) { if ($__kcr == 1) { $__kcs = 1; } else { $__jza = @{$__jzg[$__jyb]}; $__kcs = 1 / $__jza; $__kcs = sprintf("%.4f", $__kcs); } $__kak[$__jyb] += $__kcs; } } } if ($__jzb) { $__jxx[$__jzf] = $__kcm; } $__kfk++; unshift @__jxx, $__kfk; push @__kbk, authlib9_14_2::_acv(\@__jxx); $__kao++; } _bjm(\@__jzg, \@__jyp, $__kfj, $__jyx, \@__jzi, $__jyf, 0); $__kbc = $__kbh{"original"}->{"blnAvoidDominated"}; @__kbe = @{authlib9_14_2::_acv($__kfl)}; @__kbb = @{authlib9_14_2::_acv($__kbh{"original"}->{"Tasks"})}; @__kaw = (@{authlib9_14_2::_acv($__kbh{"original"}->{"TaskPriceLevels"})}, @__kbl); foreach my $__kbf (@__kbk) { my @__kbg = @{authlib9_14_2::_acv($__kbf)}; if ($__jzb) { push(@__kbd, $__kbg[$__jzf + 1]); if (defined $__kaw[$__kbg[0] - 1]) { $__kbg[$__jzf + 1] = $__kaw[$__kbg[0] - 1]; } else { $__kbg[$__jzf + 1] = 0; } } shift(@__kbg); push(@__kbb, \@__kbg); } my $__kdj = -1; $__kdj = @__kbb; for ($__jyb = 0; $__jyb < $__jya; $__jyb++) { if ($__jyb != $__jzf) { $__jyj = $__kfj->[$__jyb]; for ($__jyc = 1; $__jyc <= @__jyq; $__jyc++) { my @__kbg = (0) x $__jya; $__kbg[$__jyb] = $__jyc; push(@__kbb, \@__kbg); push(@__kbd, 0); } } } my $__kdk = $__kdj == -1 ? @__kbb : $__kdj; my $__kdl = _bkq(\@__kbb, \@__jyq, $__jyr, \%__jyu); my $__kdm = _bkn($__kdl, $__kdk, $__jyr + 1); my $__kdn = 0; $__kcw = _bkl(authlib9_14_2::_acv($__kdm), $__kdk, $__jyr + 1); if ($__kcw == 0) { $__kdn = 1; $__kdm = _bkn($__kdl, scalar @__kbb, $__jyr + 1); $__kcw = _bkl(authlib9_14_2::_acv($__kdm), $__kdk, $__jyr + 1); } my $__kdo = 0; my $__kdp = 0; my $__kdq = 0; my $__kdr = 0; my $__kds = 0; my @__kdt = (); my $__kdu = 0; my %__kdv = (); my @__kdw = grep { not exists $__kfo->{$_ + 1} } (0..($__kdk-1)); $__kdd = authlib9_14_2::_ww($__kbn, 0.99); for ($__jyb = 0; $__jyb < @__kdw - 1 && !$__kdd; $__jyb++) { my $__kdx = $__kdw[$__jyb]; $__kdq = $__kbb[$__kdx]; for ($__jyc = $__jyb + 1; $__jyc < @__kdw && !$__kdd; $__jyc++) { my $__kdy = $__kdw[$__jyc]; my $__kdz = $__kbb[$__kdy]; for ($__kdu = 0; $__kdu < $__jya && !$__kdd; $__kdu++) { if ($__kdu != $__jzf) { $__kcj = $__kbi[$__kdu]; my $__kea = _bjs($__kdq->[$__kdu], $__jzi[$__kdu]); my $__keb = _bjs($__kdz->[$__kdu], $__jzi[$__kdu]); if (_bji($__kcj, $__kea, $__keb)) { $__jyj = $__kfj->[$__kdu]; my $__kec = $__kdq->[$__kdu]; my $__ked = $__kdz->[$__kdu]; my @__kee = @{$__kdq}; my @__kef = @{$__kdz}; $__kdq->[$__kdu] = $__ked; $__kdz->[$__kdu] = $__kec; if ($__kai) { _bjk($__jyx, \%__jzd, $__jyj, $__kdq, $__kdz); } if (exists $__kfg->{'_ks'} && ( _azq($__kdq, $__kfg->{'_ks'}, \%__jzd, 0) || _azq($__kdz, $__kfg->{'_ks'}, \%__jzd, 0))) { $__kbb[$__kdx] = \@__kee; $__kbb[$__kdy] = \@__kef; $__kdq = $__kbb[$__kdx]; $__kdz = $__kbb[$__kdy]; next; } my @__keg = (); if ($__jzb) { my @__keh = ($__kdq, $__kdz); my @__kei = ($__kdx, $__kdy); my $__kej = 0; for (my $__kek = 0; $__kek < @__kei && !$__kej; $__kek++) { $__kcm = 0; my $__kel = $__keh[$__kek]; if (exists $__kfg->{'_dc'}) { $__kct = _bjl($__kfg->{'_dc'}, \%__jzd, $__kel); } for (my $__kem = 0; $__kem < $__jya; $__kem++) { $__jyj = $__kfj->[$__kem]; if ($__jyj == $__jzb) { if (@__jzl > 0) { $__kcn = _bkh($__jzl[$__kel->[$__kem] - 1], $__jxz + $__kei[$__kek] + 1); } } else { if (exists $__jyx->{$__jyj}) { $__kco = $__jyx->{$__jyj}->{'_ko'}; $__jyk = $__kel->[$__kem]; next if ($__jyk == 0); $__kcu = $__kco->[$__jyk - 1]; if (exists $__kfg->{'_dc'}) { if (exists $__kct->{$__jyj . "," . $__jyk}) { $__kcu += $__kct->{$__jyj . "," . $__jyk}; } } $__kcm += $__kcu; } } } $__kcm += $__jzp; if ($__kcn) { $__kcm += $__kcm * $__kcn; } if ($__jzn) { $__kcm = authlib9_14_2::_abk($__kcm, $__jzn, -1); } if ($__jzo) { $__kcm += $__jzo; } $__kcm = authlib9_14_2::_abj($__kcm, $__jzm); push (@__keg, $__kcm); if (exists $__kfm->{$__jzb}) { if ($__kcm > $__kbo) { $__kej = 1; } } } if ($__kej) { $__kbb[$__kdx] = \@__kee; $__kbb[$__kdy] = \@__kef; $__kdq = $__kbb[$__kdx]; $__kdz = $__kbb[$__kdy]; next; } } if (_bjz(\@__kbb, $__kdx, $__jzf, \@__jym, $__kfq) || _bjz(\@__kbb, $__kdy, $__jzf, \@__jym, $__kfq)) { $__kbb[$__kdx] = \@__kee; $__kbb[$__kdy] = \@__kef; $__kdq = $__kbb[$__kdx]; $__kdz = $__kbb[$__kdy]; next; } my $__ken = 0; my $__keo = 0; if ($__jzb) { $__ken = $__kbd[$__kdx]; $__keo = $__kbd[$__kdy]; $__kbd[$__kdx] = $__keg[0]; $__kbd[$__kdy] = $__keg[1]; } if ($__kbc) { my $__kep = _bjv(\@__kbb, \@__jxu, \@__jxv, $__kbj ? \@__jym : 0, \@__jzi, $__kdx, $__jzb, $__jzf, \@__kbd); if ($__kep) { if ($__jzb) { $__kbd[$__kdx] = $__ken; $__kbd[$__kdy] = $__keo; } $__kbb[$__kdx] = \@__kee; $__kbb[$__kdy] = \@__kef; $__kdq = $__kbb[$__kdx]; $__kdz = $__kbb[$__kdy]; next; } $__kep = _bjv(\@__kbb, \@__jxu, \@__jxv, $__kbj ? \@__jym : 0, \@__jzi, $__kdy, $__jzb, $__jzf, \@__kbd); if ($__kep) { if ($__jzb) { $__kbd[$__kdx] = $__ken; $__kbd[$__kdy] = $__keo; } $__kbb[$__kdx] = \@__kee; $__kbb[$__kdy] = \@__kef; $__kdq = $__kbb[$__kdx]; $__kdz = $__kbb[$__kdy]; next; } } my $__keq = authlib9_14_2::_acv($__kdm); _bko($__ked, $__jyq[$__kdu], $__jys[$__kdu], $__jyu{$__jyq[$__kdu]}, $__kdl->[$__kdx], $__keq, $__jyr + 1); _bko($__kec, $__jyq[$__kdu], $__jys[$__kdu], $__jyu{$__jyq[$__kdu]}, $__kdl->[$__kdy], $__keq, $__jyr + 1); if ($__kai) { for (my $__kem = 0; $__kem < $__jya; $__kem++) { next if ($__kem == $__kdu); if ($__kee[$__kem] != $__kdq->[$__kem]) { _bko($__kdq->[$__kem], $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__kdx], $__keq, $__jyr + 1); } if ($__kef[$__kem] != $__kdz->[$__kem]) { _bko($__kdz->[$__kem], $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__kdy], $__keq, $__jyr + 1); } } } $__kds = _bkl(authlib9_14_2::_acv($__keq), $__kdk, $__jyr + 1); if ($__kds > $__kcw) { $__kcw = $__kds; my $__ker = []; if (exists $__kcv->{$__kdx + 1}) { $__ker = $__kcv->{$__kdx + 1}; } push(@{$__ker}, [$__kdx, $__kdu, $__ked]); $__kcv->{$__kdx + 1} = $__ker; $__ker = []; if (exists $__kcv->{$__kdy + 1}) { $__ker = $__kcv->{$__kdy + 1}; } push(@{$__ker}, [$__kdy, $__kdu, $__kec]); $__kcv->{$__kdy + 1} = $__ker; $__kdm = $__keq; _bkp($__ked, $__jyq[$__kdu], $__jys[$__kdu], $__jyu{$__jyq[$__kdu]}, $__kdl->[$__kdx]); _bkp($__kec, $__jyq[$__kdu], $__jys[$__kdu], $__jyu{$__jyq[$__kdu]}, $__kdl->[$__kdy]); if ($__kai) { for (my $__kem = 0; $__kem < $__jya; $__kem++) { next if ($__kem == $__kdu); if ($__kee[$__kem] != $__kdq->[$__kem]) { _bkp($__kdq->[$__kem], $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__kdx]); } if ($__kef[$__kem] != $__kdz->[$__kem]) { _bkp($__kdz->[$__kem], $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__kdy]); } } } } else { if ($__jzb) { $__kbd[$__kdx] = $__ken; $__kbd[$__kdy] = $__keo; } $__kbb[$__kdx] = \@__kee; $__kbb[$__kdy] = \@__kef; $__kdq = $__kbb[$__kdx]; $__kdz = $__kbb[$__kdy]; } } } $__kdd = authlib9_14_2::_ww($__kbn, 0.99); } } } foreach $__jyb (@__kdw) { if ($__kdd) { last; } $__kdq = $__kbb[$__jyb]; for ($__jyc = 0; $__jyc < $__jya && !$__kdd; $__jyc++) { if ($__jyc != $__jzf) { next if ($__kdq->[$__jyc] == 0); $__kdo = _bjs($__kdq->[$__jyc], $__jzi[$__jyc]); $__kcj = $__kbi[$__jyc]; if ($__kdo != $__kcj) { my @__kes = (); my $__ket = 0; $__jyj = $__kfj->[$__jyc]; if (exists $__jyx->{$__jyj}) { if (exists $__jyx->{$__jyj}->{'_me'} || $__jym[$__jyc] == 0) { $__kcl = 0; } else { $__kcl = $__jyx->{$__jyj}->{'_ni'}; } } if ($__kcl) { if ($__kdo - 1 == $__kcj && $__jym[$__jyc] != 0) { if ($__kcj - 1 >= 0) { push(@__kes, _bjt($__kcj - 1, $__jzi[$__jyc])); } $__ket = 1; } elsif ($__kdo + 1 == $__kcj) { if ($__kcj + 1 < $__jyq[$__jyc]) { push(@__kes, _bjt($__kcj + 1, $__jzi[$__jyc])); } $__ket = 1; } } if (!$__ket) { my $__keu = 2; $__keu++ if ($__kcl); if ($__jyq[$__jyc] > $__keu) { for (my $__kem = 0; $__kem < $__jyq[$__jyc]; $__kem++) { if ($__kem != $__kdo) { if (exists $__jyx->{$__jyj}->{'_me'}) { push(@__kes, _bjt($__kem, $__jzi[$__jyc])); } elsif ($__kem != $__kcj) { if ($__kcl) { if ($__kem != $__kcj - 1 && $__kem != $__kcj + 1) { push(@__kes, _bjt($__kem, $__jzi[$__jyc])); } } else { push(@__kes, _bjt($__kem, $__jzi[$__jyc])); } } } } } } if (@__kes > 0) { foreach $__kcz (@__kes) { if (_bjq($__jyj, $__kcz, $__kfm, $__jzb)) { next; } push(@__kdt, [$__jyb, $__jyc, $__kcz, _bjs($__kcz, $__jzi[$__jyc])]); } } } } $__kdd = authlib9_14_2::_ww($__kbn, 0.99); } } authlib9_14_2::_xg(\@__kdt); my $__kev = @__kdt < 50 ? @__kdt : 50; $__kdd = authlib9_14_2::_ww($__kbn, 0.99); while (@__kdt > 0 && !$__kdd) { my $__kew = $__kcw; my $__kex = -1; for ($__kdu = 0; $__kdu < $__kev && !$__kdd; $__kdu++) { ($__jyb, $__jyc, $__kcz, $__kdb) = @{$__kdt[$__kdu]}; $__kdq = $__kbb[$__jyb]; $__kcy = $__kdq->[$__jyc]; $__kda = _bjs($__kcy, $__jzi[$__jyc]); if (_bjg($__jzg[$__jyc], $__kdb, $__kda)) { next; } if ($__kai && _bjh($__jyx, \%__jzd, $__kfj->[$__jyc], $__kcz, $__kdq)) { next; } my @__key = @{$__kdq}; $__kdq->[$__jyc] = $__kcz; if ($__kai) { $__jyj = $__kfj->[$__jyc]; _bjj($__jyx, \%__jzd, \@__jzi, $__jyj, $__jzb, \@__jym, \@__jyv, \%__jzh, \@__jzg, $__kfm, $__jxz + $__jyc + $__jyb, $__kdq, 1, 0); } if (exists $__kfg->{'_ks'} && _azq($__kdq, $__kfg->{'_ks'}, \%__jzd, 0)) { $__kbb[$__jyb] = \@__key; next; } if ($__jzb) { $__kcm = 0; if (exists $__kfg->{'_dc'}) { $__kct = _bjl($__kfg->{'_dc'}, \%__jzd, $__kdq); } for (my $__kem = 0; $__kem < $__jya; $__kem++) { $__jyj = $__kfj->[$__kem]; if ($__jyj == $__jzb) { if (@__jzl > 0) { $__kcn = _bkh($__jzl[$__kdq->[$__kem] - 1], $__jxz + $__jyb + 1); } } else { if (exists $__jyx->{$__jyj}) { $__kco = $__jyx->{$__jyj}->{'_ko'}; $__jyk = $__kdq->[$__kem]; next if ($__jyk == 0); $__kcu = $__kco->[$__jyk - 1]; if (exists $__kfg->{'_dc'}) { if (exists $__kct->{$__jyj . "," . $__jyk}) { $__kcu += $__kct->{$__jyj . "," . $__jyk}; } } $__kcm += $__kcu; } } } $__kcm += $__jzp; if ($__kcn) { $__kcm += $__kcm * $__kcn; } if ($__jzn) { $__kcm = authlib9_14_2::_abk($__kcm, $__jzn, -1); } if ($__jzo) { $__kcm += $__jzo; } $__kcm = authlib9_14_2::_abj($__kcm, $__jzm); if (exists $__kfm->{$__jzb}) { if ($__kcm > $__kbo) { $__kbb[$__jyb] = \@__key; next; } } } if (_bjz(\@__kbb, $__jyb, $__jzf, \@__jym, $__kfq)) { $__kbb[$__jyb] = \@__key; next; } if ($__kbc) { my $__kez = 0; if ($__jzb) { $__kez = $__kbd[$__jyb]; $__kbd[$__jyb] = $__kcm; } my $__kep = _bjv(\@__kbb, \@__jxu, \@__jxv, $__kbj ? \@__jym : 0, \@__jzi, $__jyb, $__jzb, $__jzf, \@__kbd); if ($__jzb) { $__kbd[$__jyb] = $__kez; } if ($__kep) { $__kbb[$__jyb] = \@__key; next; } } my $__keq = authlib9_14_2::_acv($__kdm); _bko($__kcz, $__jyq[$__jyc], $__jys[$__jyc], $__jyu{$__jyq[$__jyc]}, $__kdl->[$__jyb], $__keq, $__jyr + 1); if ($__kai) { for (my $__kem = 0; $__kem < $__jya; $__kem++) { next if ($__kem == $__jyc); if ($__kdq->[$__kem] != $__key[$__kem]) { _bko($__kdq->[$__kem + 1], $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__jyb], $__keq, $__jyr + 1); } } } $__kds = _bkl($__keq, $__kdk, $__jyr + 1); if ($__kds > $__kew) { $__kew = $__kds; $__kex = $__kdu; } $__kbb[$__jyb] = \@__key; $__kdd = authlib9_14_2::_ww($__kbn, 0.99); } if ($__kex != -1) { ($__jyb, $__jyc, $__kcz, $__kdb) = @{$__kdt[$__kex]}; my $__ker = []; if (exists $__kcv->{$__jyb + 1}) { $__ker = $__kcv->{$__jyb + 1}; } push(@{$__ker}, $__kdt[$__kex]); $__kcv->{$__jyb + 1} = $__ker; splice(@__kdt, $__kex, 1); $__kev--; $__kda = _bjs($__kbb[$__jyb]->[$__jyc], $__jzi[$__jyc]); my @__key = @{$__kbb[$__jyb]}; $__kbb[$__jyb]->[$__jyc] = $__kcz; if ($__kai) { $__jyj = $__kfj->[$__jyc]; _bjj($__jyx, \%__jzd, \@__jzi, $__jyj, $__jzb, \@__jym, \@__jyv, \%__jzh, \@__jzg, $__kfm, $__jxz + $__jyc + $__jyb, $__kbb[$__jyb], 1, 0); } if ($__jzb) { $__kcm = 0; if (exists $__kfg->{'_dc'}) { $__kct = _bjl($__kfg->{'_dc'}, \%__jzd, $__kbb[$__jyb]); } for (my $__kem = 0; $__kem < $__jya; $__kem++) { $__jyj = $__kfj->[$__kem]; if ($__jyj == $__jzb) { if (@__jzl > 0) { $__kcn = _bkh($__jzl[$__kaw[$__jyb] - 1], $__jxz + $__jyb); } } else { if (exists $__jyx->{$__jyj}) { $__kco = $__jyx->{$__jyj}->{'_ko'}; $__jyk = $__kbb[$__jyb]->[$__kem]; next if ($__jyk == 0); $__kcu = $__kco->[$__jyk - 1]; if (exists $__kfg->{'_dc'}) { if (exists $__kct->{$__jyj . "," . $__jyk}) { $__kcu += $__kct->{$__jyj . "," . $__jyk}; } } $__kcm += $__kcu; } } } $__kcm += $__jzp; if ($__kcn) { $__kcm += $__kcm * $__kcn; } if ($__jzn) { $__kcm = authlib9_14_2::_abk($__kcm, $__jzn, -1); } $__kcm = authlib9_14_2::_abj($__kcm, $__jzm); if ($__jzo) { $__kcm += $__jzo; } $__kbd[$__jyb] = $__kcm; } _bko($__kcz, $__jyq[$__jyc], $__jys[$__jyc], $__jyu{$__jyq[$__jyc]}, $__kdl->[$__jyb], $__kdm, $__jyr + 1); _bkp($__kcz, $__jyq[$__jyc], $__jys[$__jyc], $__jyu{$__jyq[$__jyc]}, $__kdl->[$__jyb]); if ($__kai) { for (my $__kem = 0; $__kem < $__jya; $__kem++) { next if ($__kem == $__jyc); my $__kca = $__kbb[$__jyb]->[$__kem]; my $__kfa = $__key[$__kem]; if ($__kfa != $__kca) { _bko($__kca, $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__jyb], $__kdm, $__jyr + 1); _bkp($__kca, $__jyq[$__kem], $__jys[$__kem], $__jyu{$__jyq[$__kem]}, $__kdl->[$__jyb]); if ($__kfa != 0) { my $__kfb = _bjs($__kfa, $__jzi[$__kem]); $__jzg[$__kem]->[$__kfb - 1]--; } if ($__kca != 0) { my $__kfc = _bjs($__kca, $__jzi[$__kem]); $__jzg[$__kem]->[$__kfc - 1]++; } } } } $__jzg[$__jyc]->[$__kda]--; $__jzg[$__jyc]->[$__kdb]++; $__kcw = $__kew; $__kdd = authlib9_14_2::_ww($__kbn, 0.99); } else { @__kdt = (); $__kev = 0; } } $__kdd = authlib9_14_2::_ww($__kbn, 0.99); if ($__kbh{"max"}->{"intRedealCnt"} == -1 && $__kdd) { authlib9_14_2::_zp($__kfh, "Design optimize timed out. Proceeding with current concepts."); } $__kbh{$__kdc}->{"intNumTasks"} = $__kdk; $__kbh{$__kdc}->{"blnUsedBYO"} = $__kdn; $__kbh{$__kdc}->{"CurrentOrthogonalCoding"} = authlib9_14_2::_acv($__kdl); $__kbh{$__kdc}->{"intByoTaskIdx"} = $__kdj; $__kbh{$__kdc}->{"AllConcepts"} = authlib9_14_2::_acv(\@__kbk); $__kbh{$__kdc}->{"AttTwiddleCntArray"} = authlib9_14_2::_acv(\@__kak); $__kbh{$__kdc}->{"LevelCountArray"} = authlib9_14_2::_acv(\@__jzg); $__kbh{$__kdc}->{"CurrentEfficiency"} = $__kcw; $__kbh{$__kdc}->{"ModifiedConcepts"} = authlib9_14_2::_acv($__kcv); $__kbh{$__kdc}->{"PriceLevels"} = authlib9_14_2::_acv(\@__kbl); $__kbh{$__kdc}->{"Tasks"} = authlib9_14_2::_acv(\@__kbb); $__kbh{$__kdc}->{"TaskPrices"} = authlib9_14_2::_acv(\@__kbd); } my $__kfd = 0; for ($__jyb = 0; $__jyb < $__kdc && !$__kfd; $__jyb++) { $__kfd = $__kbh{$__jyb}->{"blnUsedBYO"}; } my $__kfe = -1; my $__kff = 0; for ($__jyb = 0; $__jyb < $__kdc; $__jyb++) { if ($__kfd && !$__kbh{$__jyb}->{"blnUsedBYO"}) { my @__kbb = @{$__kbh{$__jyb}->{"Tasks"}}; my $__kdm = _bkn($__kbh{$__jyb}->{"CurrentOrthogonalCoding"}, scalar @__kbb, $__jyr + 1); $__kbh{$__jyb}->{"CurrentEfficiency"} = _bkl($__kdm, $__kbh{$__jyb}->{"intNumTasks"}, $__jyr + 1); } if ($__jyb == 0 || $__kff < $__kbh{$__jyb}->{"CurrentEfficiency"}) { $__kff = $__kbh{$__jyb}->{"CurrentEfficiency"}; $__kfe = $__jyb; } } @__kbb = @{$__kbh{$__kfe}->{"Tasks"}}; @__kbk = @{$__kbh{$__kfe}->{"AllConcepts"}}; @__kak = @{$__kbh{$__kfe}->{"AttTwiddleCntArray"}}; @__jzg = @{$__kbh{$__kfe}->{"LevelCountArray"}}; @__kbl = @{$__kbh{$__kfe}->{"PriceLevels"}}; $__kcv = $__kbh{$__kfe}->{"ModifiedConcepts"}; @__kbd = @{$__kbh{$__kfe}->{"TaskPrices"}}; $__kcw = $__kbh{$__kfe}->{"CurrentEfficiency"} > 1 ? 1 : $__kbh{$__kfe}->{"CurrentEfficiency"}; @__kbe = (@{$__kfl}, @__kbk); while (my ($__kfr, $__kfs) = each %{$__kcv}) { for ($__jyc = 0; $__jyc < $__jya; $__jyc++) { if ($__jyc == $__jzf) { $__kbe[$__kfr - 1]->[$__jyc + 1] = $__kbd[$__kfr - 1]; } else { $__kbe[$__kfr - 1]->[$__jyc + 1] = $__kbb[$__kfr - 1]->[$__jyc]; } } } if ($__kcw =~ m/[eE]/o) { $__kcw = sprintf("%.15f", $__kcw); } $__kcw = authlib9_14_2::_abn($__kcw); return (\@__kbk, \@__jzg, \@__kak, \@__jyv, \@__kbl, $__kcv, $__kdc, $__kcw, $__kfd, $__kfe + 1); } sub _bjg { my ($__kfv, $__kfw, $__kfx) = @_; my $__kft = $__kfv->[$__kfw]; my $__kfu = $__kfv->[$__kfx]; return ($__kft >= $__kfu); } sub _bjh { my ($__kgg, $__kgh, $__kgi, $__kgj, $__kgk) = @_; my @__kfy = ($__kgi); my $__kfz = 0; while (@__kfy > 0) { my $__kga = shift(@__kfy); if (exists $__kgg->{$__kga}) { if (exists $__kgg->{$__kga}->{'_db'}) { foreach my $__kgb (sort {$a <=> $b} keys %{$__kgg->{$__kga}->{'_db'}}) { if (exists $__kgh->{$__kgb}) { push (@__kfy, $__kgb); } } } if ($__kgi == $__kga) { next; } if (exists $__kgg->{$__kga}->{'_kp'}) { my $__kgc = $__kgg->{$__kga}->{'_kp'}; my $__kgd = 0; my $__kge = 0; for ($__kge = 0; $__kge < @{$__kgc} && !$__kgd; $__kge++) { if (exists $__kgh->{$__kgc->[$__kge]}) { $__kfz = $__kgh->{$__kgc->[$__kge]}; my $__kgf = $__kgg->{$__kgc->[$__kge]}->{'_db'}->{$__kga}; if ($__kgc->[$__kge] == $__kgi) { $__kgd = exists $__kgf->{$__kgj}; } else { $__kgd = exists $__kgf->{$__kgk->[$__kfz]}; } } } $__kfz = $__kgh->{$__kga}; if (!$__kgd && $__kgk->[$__kfz] != 0) { return 1; } } } } return 0; } sub _bji { my ($__kgl, $__kgm, $__kgn) = @_; return $__kgl != $__kgm && $__kgl != $__kgn && $__kgm != -1 && $__kgn != -1 && $__kgm != $__kgn; } sub _bjj { my ($__khi, $__khj, $__khk, $__khl, $__khm, $__khn, $__kho, $__khp, $__khq, $__khr, $__khs, $__kht, $__khu, $__khv) = @_; my @__kgo = ($__khl); my %__kgp = ($__khl => 1); my $__kgq = 0; while (@__kgo > 0) { my $__kgr = shift(@__kgo); delete $__kgp{$__kgr}; if (exists $__khi->{$__kgr}) { if (exists $__khi->{$__kgr}->{'_db'}) { foreach my $__kgs (sort {$a <=> $b} keys %{$__khi->{$__kgr}->{'_db'}}) { if (exists $__khj->{$__kgs}) { if (not exists $__kgp{$__kgs}) { push (@__kgo, $__kgs); $__kgp{$__kgs} = 1; } } } } if ($__khl == $__kgr) { next; } if (exists $__khi->{$__kgr}->{'_kp'}) { my $__kgt = $__khi->{$__kgr}->{'_kp'}; my $__kgu = 0; my $__kgv = 0; for ($__kgv = 0; $__kgv < @{$__kgt} && !$__kgu; $__kgv++) { if (exists $__khj->{$__kgt->[$__kgv]}) { $__kgq = $__khj->{$__kgt->[$__kgv]}; my $__kgw = $__khi->{$__kgt->[$__kgv]}->{'_db'}->{$__kgr}; $__kgu = exists $__kgw->{$__kht->[$__kgq + $__khv]}; } } $__kgq = $__khj->{$__kgr}; if ($__kgu) { next if ($__kht->[$__kgq + $__khv] != 0); my $__kgx = 0; if (!$authlib9_14_2::_amg) { $__kgx = $__khn->[$__kgq]; } my $__kgy = $__khp->{$__kgr}; if ($__kgx == 0) { my $__kgz = @{$__kgy}; my $__kha = _bjp($__kgr, $__kgz, $__kho->[$__kgq], $__kgy, 0, $__khr, $__khm, $__khs); if ($__kha) { $__kht->[$__kgq + $__khv] = $__kha; } } else { my $__khb = $__khk->[$__kgq]; my $__khc = _bjs($__kgx, $__khb); my @__khd = @{$__khq->[$__kgq]}; my $__khe = $__khi->{$__kgr}->{'_ni'}; my @__khf = (); my $__khg = 2147483647; my $__kgv = 0; for ($__kgv = 0; $__kgv < @{$__kgy}; $__kgv++) { if (_bjq($__kgr, $__kgy->[$__kgv]->{'_pt'}, $__khr, $__khm)) { next; } my $__khh = $__khd[$__kgv]; if ($__kgv == $__khc) { $__khh /= 4; } elsif ($__khe && $__khu) { if ($__kgv == $__khc - 1 || ($__kgv == $__khc + 1 && $__kgx != 0)) { $__khh /= 2; } } if ($__khh < $__khg) { @__khf = ($__kgv); $__khg = $__khh; } elsif ($__khh == $__khg) { push (@__khf, $__kgv); } } if (@__khf == 0) { $__kht->[$__kgq + $__khv] = $__kgx; } else { $__kgv = 0; if (@__khf > 1) { $__kgv = int(rand(@__khf)); } $__kht->[$__kgq + $__khv] = $__kgy->[$__khf[$__kgv]]->{'_pt'}; } } } else { $__kht->[$__kgq + $__khv] = 0; } } } } } sub _bjk { my ($__kij, $__kik, $__kil, $__kim, $__kin) = @_; my @__khw = ($__kil); my %__khx = ($__kil => 1); my $__khy = 0; my @__khz = @{$__kim}; my @__kia = @{$__kin}; while (@__khw > 0) { my $__kib = shift(@__khw); delete $__khx{$__kib}; if (exists $__kij->{$__kib}) { if (exists $__kij->{$__kib}->{'_db'}) { foreach my $__kic (sort {$a <=> $b} keys %{$__kij->{$__kib}->{'_db'}}) { if (exists $__kik->{$__kic}) { if (not exists $__khx{$__kic}) { push (@__khw, $__kic); $__khx{$__kic} = 1; } } } } if ($__kil == $__kib) { next; } if (exists $__kij->{$__kib}->{'_kp'}) { my $__kid = $__kij->{$__kib}->{'_kp'}; my $__kie = 0; my $__kif = 0; my $__kig = 0; my $__kih = $__kik->{$__kib}; for ($__kig = 0; $__kig < @{$__kid}; $__kig++) { if (exists $__kik->{$__kid->[$__kig]}) { $__khy = $__kik->{$__kid->[$__kig]}; my $__kii = $__kij->{$__kid->[$__kig]}->{'_db'}->{$__kib}; if (exists $__kii->{$__kim->[$__khy]}) { $__kie = 1; } if (exists $__kii->{$__kin->[$__khy]}) { $__kif = 1; } } if ($__kie && $__kif) { last; } } if ($__kie) { if ($__kim->[$__kih] == 0) { $__kim->[$__kih] = $__kia[$__kih]; } } else { $__kim->[$__kih] = 0; } if ($__kif) { if ($__kin->[$__kih] == 0) { $__kin->[$__kih] = $__khz[$__kih]; } } else { $__kin->[$__kih] = 0; } } } } } sub _bjl { my ($__kjb, $__kjc, $__kjd) = @_; my $__kio = $__kjb->{'_md'}; my $__kip = @{$__kio}; my $__kiq = 0; my $__kir = 0; my $__kis = 0; my $__kit = 0; my $__kiu = 0; my $__kiv = 0; my $__kiw = 0; my $__kix = 0; my $__kiy = ""; my $__kiz = 1; my %__kja = (); for ($__kis = 0; $__kis < $__kip; $__kis++) { $__kiy = ""; $__kix = 0; $__kiz = 1; $__kiu = $__kio->[$__kis]; $__kiq = @{$__kiu}; for ($__kit = 0; $__kit < $__kiq; $__kit++) { $__kir = $__kiu->[$__kit]; $__kiv = $__kir->[0]; $__kiw = $__kir->[1]; if ($__kit == 0) { $__kiy = $__kiv . "," . $__kiw; $__kix = $__kir->[2]; } else { if (exists $__kjc->{$__kiv}) { if ($__kjd->[$__kjc->{$__kiv}] != $__kiw) { $__kiz = 0; last; } } else { $__kiz = 0; last; } } } if ($__kiz) { $__kja{$__kiy} += $__kix; } } return \%__kja; } sub _bjm { my ($__kjl, $__kjm, $__kjn, $__kjo, $__kjp, $__kjq, $__kjr) = @_; my $__kje = @{$__kjl}; my $__kjf = 0; my $__kjg = 0; my $__kjh = 0; my $__kji = 0; my $__kjj = 0; my $__kjk = 0; for ($__kjf = 0; $__kjf < $__kje; $__kjf++) { $__kjj = $__kjn->[$__kjf]; if (exists $__kjo->{$__kjj}) { $__kjk = $__kjo->{$__kjj}->{'_ni'}; if ($__kjk > 0) { $__kjg = $__kjl->[$__kjf]; $__kjh = _bjs($__kjm->[$__kjf], $__kjp->[$__kjf]); if ($__kjh != -1) { _bjn($__kjg, $__kjh - 1, $__kjq, $__kjr); _bjn($__kjg, $__kjh + 1, $__kjq, $__kjr); } } } } } sub _bjn { my ($__kju, $__kjv, $__kjw, $__kjx) = @_; my $__kjs = @{$__kju}; if ($__kjv >= 0 && $__kjv < $__kjs) { my $__kjt = $__kju->[$__kjv]; if ($__kjx) { $__kjt = $__kjt * $__kjw; } else { $__kjt = $__kjt / $__kjw; } $__kju->[$__kjv] = $__kjt; } } sub _bjo { my ($__kkl, $__kkm, $__kkn, $__kko, $__kkp, $__kkq, $__kkr, $__kks, $__kkt, $__kku, $__kkv) = @_; my $__kjy = 0; my $__kjz = $__kkp->[$__kko]; if (_bjq($__kkn, $__kjz, $__kkm, $__kku)) { my $__kka = 0; my $__kkb = 0; my $__kkc = 0; my $__kkd = 0; my $__kke = @{$__kkr}; my $__kkf = 0; $__kkb = $__kkq->{'_ni'}; $__kkc = $__kkq->{'_kb'}; if ($__kkb) { my $__kkg = authlib9_14_2::_acv($__kkr); my @__kkh = sort {$a->{'_pt'} <=> $b->{'_pt'}} @{$__kkg}; my $__kki = 0; my $__kkj = 0; for ($__kkf = 0; $__kkf < $__kke; $__kkf++) { $__kkd = $__kkh[$__kkf]->{'_pt'}; if (!_bjq($__kkn, $__kkd, $__kkm, $__kku)) { if (($__kkd < $__kjz) && ($__kkd >= $__kki)) { $__kki = $__kkd; } elsif (($__kkd > $__kjz) && (($__kkd <= $__kkj) || ($__kkj == 0))) { $__kkj = $__kkd; } } } if ($__kkc == 1) { $__kka = $__kkj; } elsif ($__kkc == 2) { $__kka = $__kki; } else { if ($__kkj == 0) { if ($__kki > 0) { $__kka = $__kki; } } elsif ($__kki == 0) { if ($__kkj > 0) { $__kka = $__kkj; } } else { my $__kkk = authlib9_14_2::_acn($__kks, 2, $__kkn); if ($__kkk->[0] == 0) { $__kka = $__kki; } else { $__kka = $__kkj; } } } } else { $__kka = _bjp($__kkn, $__kke, $__kkt, $__kkr, $__kjz, $__kkm, $__kku, $__kkv); } if ($__kka) { $__kkp->[$__kko] = $__kka; } else { $__kjy = 1; authlib9_14_2::_zp($__kkl, "Current BYO is in violation of rules. Cannot find alternative."); } } return $__kjy; } sub _bjp { my ($__klb, $__klc, $__kld, $__kle, $__klf, $__klg, $__klh, $__kli) = @_; my $__kkw = 0; my $__kkx = 0; my $__kky = 0; my $__kkz = 0; my $__kla = $__klc * 2; for ($__kky = 0; $__kky < $__kla; $__kky++) { $__kkx = _azm($__kld, $__kli); $__kkz = $__kle->[$__kkx]->{'_pt'}; if ($__kkz != $__klf) { if (!_bjq($__klb, $__kkz, $__klg, $__klh)) { $__kkw = $__kkz; last; } } } return $__kkw; } sub _bjq { my ($__kll, $__klm, $__kln, $__klo) = @_; my $__klj = 0; if (exists $__kln->{$__kll}) { if ($__kll == $__klo) { my @__klk = keys %{$__kln->{$__kll}}; if ($__klm > $__klk[0]) { $__klj = 1; } } elsif (exists $__kln->{$__kll}->{$__klm}) { $__klj = 1; } } return $__klj; } sub _bjr { my ($__klx, $__kly, $__klz, $__kma, $__kmb, $__kmc) = @_; my $__klp = 0; my $__klq = 0; my $__klr = 0; my $__kls = 0; my $__klt = 0; my $__klu = 0; my $__klv = @{$__kly}; my $__klw = 0; for ($__kls = 0; $__kls < $__klv; $__kls++) { $__klw = $__kly->[$__kls]->{'_pt'}; if ($__klw != $__klz) { if (!_bjq($__kma, $__klw, $__kmb, $__kmc)) { $__klr = $__klx->[$__kls]; if (($__klr < $__klq) || ($__klp == 0)) { $__klq = $__klr; $__klp = $__klw; } if (($__klr > $__klt) || ($__klu == 0)) { $__klt = $__klr; $__klu = $__klw; } } } } return ($__klp, $__klt - $__klq); } sub _bjs { my ($__kme, $__kmf) = @_; my $__kmd = 0; if ($__kmf && $__kme) { $__kmd = $__kmf->{$__kme}; } else { $__kmd = $__kme - 1; } return $__kmd; } sub _bjt { my ($__kmi, $__kmj) = @_; my $__kmg = 0; if ($__kmj) { my %__kmh = reverse %{$__kmj}; $__kmg = $__kmh{$__kmi}; } else { $__kmg = $__kmi + 1; } return $__kmg; } sub _bju { my ($__kmv, $__kmw, $__kmx, $__kmy, $__kmz, $__kna) = @_; my $__kmk = 0; my $__kml = 0; my $__kmm = 0; my $__kmn = 0; my $__kmo = 0; my $__kmp = @{$__kmv}; my $__kmq = 0; for ($__kmk = 0; $__kmk < $__kmp; $__kmk++) { $__kmq = $__kmy->[$__kmk]; if (!exists $__kmx->{$__kmq} && $__kna->[$__kmk] != 0) { $__kmo = $__kmv->[$__kmk]; if (($__kmo < $__kml) || $__kmm == 0) { $__kml = $__kmo; $__kmm = $__kmq; } } } my $__kmr = 0; $__kmo = 0; my $__kms = 0; my $__kmt = 0; my $__kmu = @{$__kmw}; for ($__kmk = 0; $__kmk < $__kmu; $__kmk++) { $__kmq = $__kmw->[$__kmk]; if (!exists $__kmx->{$__kmq} && $__kna->[$__kmk] != 0) { if ($__kmq == $__kmm) { $__kmn = 1; last; } else { $__kmt = $__kmz->{$__kmq}; $__kmo = $__kmv->[$__kmt]; if (($__kmo > $__kmr) || $__kms == 0) { $__kmr = $__kmo; $__kms = $__kmk; } } } } if (!$__kmn) { $__kmw->[$__kms] = $__kmm; } } sub _bjv { my ($__knc, $__knd, $__kne, $__knf, $__kng, $__knh, $__kni, $__knj, $__knk) = @_; my $__knb = 0; if ($__knf) { $__knb = _bjx($__knc->[$__knh], $__knf, $__knd, $__kne, $__kng, $__kni, $__knj, $__knk->[$__knh], $__knf->[$__knj]); } $__knb = _bjw($__knc, $__knd, $__kne, $__kng, $__knh, $__kni, $__knj, $__knk); return $__knb; } sub _bjw { my ($__knq, $__knr, $__kns, $__knt, $__knu, $__knv, $__knw, $__knx) = @_; my $__knl = 0; my $__knm = 0; my $__knn = @{$__knq}; my $__kno = $__knq->[$__knu]; my $__knp = $__knx->[$__knu]; for ($__knl = 0; $__knl < $__knu && !$__knm; $__knl++) { $__knm = _bjx($__kno, $__knq->[$__knl], $__knr, $__kns, $__knt, $__knv, $__knw, $__knp, $__knx->[$__knl]); } for ($__knl = $__knu + 1; $__knl < $__knn && !$__knm; $__knl++) { $__knm = _bjx($__kno, $__knq->[$__knl], $__knr, $__kns, $__knt, $__knv, $__knw, $__knp, $__knx->[$__knl]); } return $__knm; } sub _bjx { my ($__koh, $__koi, $__koj, $__kok, $__kol, $__kom, $__kon, $__koo, $__kop) = @_; my $__kny = 0; my $__knz = 0; my $__koa = 0; my $__kob = 0; my $__koc = 0; my $__kod = 0; my $__koe = 0; foreach $__knz (@{$__kok}) { if ($__koh->[$__knz] != $__koi->[$__knz]) { $__kny = 1; last; } } if (!$__kny) { $__koa = 0; $__kob = 0; foreach $__koc (@{$__koj}) { $__knz = $__koc->[0]; if ($__kom && $__knz == $__kon) { if ($__koo < $__kop) { $__kob = 1; } elsif ($__koo > $__kop) { $__koa = 1; } } else { if ($__koh->[$__knz] != 0 && $__koi->[$__knz] != 0) { my $__kof = _bjs($__koh->[$__knz], $__kol->[$__knz]); my $__kog = _bjs($__koi->[$__knz], $__kol->[$__knz]); if ($__kof != $__kog) { $__kod = $__koc->[1]; if ($__kod == 1) { if ($__kof < $__kog) { $__koa = 1; } else { $__kob = 1; } } elsif ($__kod == 2) { if ($__kof < $__kog) { $__kob = 1; } else { $__koa = 1; } } } } } if ($__koa && $__kob) { $__koa = 0; $__kob = 0; last; } } if ($__koa || $__kob) { $__koe = 1; } } return $__koe; } sub _azp { my ($__kor, $__kos, $__kot, $__kou, $__kov, $__kow, $__kox, $__koy, $__koz, $__kpa) = @_; my $__koq = 0; if ($__kow) { $__koq = _bjy($__kor, [$__kow], $__kou, $__kov, $__kox, -1, $__koz, $__kpa); } if (!$__koq) { $__koq = _bjy($__kor, $__kos, $__kou, $__kov, $__kox, $__koy, $__koz, $__kpa); } if (!$__koq) { $__koq = _bjy($__kor, $__kot, $__kou, $__kov, $__kox, $__koy, $__koz, $__kpa); } return $__koq; } sub _bjy { my ($__kpq, $__kpr, $__kps, $__kpt, $__kpu, $__kpv, $__kpw, $__kpx) = @_; my $__kpb = 0; my $__kpc = 0; my $__kpd = 0; my $__kpe = 0; my $__kpf = 0; my $__kpg = 0; my $__kph = 0; my $__kpi = @{$__kpr}; my $__kpj = 0; my $__kpk = 0; for ($__kpb = 0; $__kpb < $__kpi && !$__kpe; $__kpb++) { $__kpf = 0; $__kpj = $__kpr->[$__kpb]; if ($__kpj->[0] == $__kpv) { next; } foreach $__kpc (@{$__kpt}) { if ($__kpq->[$__kpc] != $__kpj->[$__kpc + 1]) { $__kpf = 1; last; } } if (!$__kpf) { if (@{$__kpq} == @{$__kps}) { my $__kpl = 1; foreach $__kpd (@{$__kps}) { $__kpc = $__kpd->[0]; if ($__kpc != $__kpw) { my $__kpm = $__kpx->[$__kpc]; my $__kpn = 1; $__kpl &= $__kpq->[$__kpc] == $__kpm || $__kpq->[$__kpc] == $__kpn; } if (!$__kpl) { last; } } if ($__kpl) { $__kpe = 1; } } if (!$__kpe) { $__kpg = 0; $__kph = 0; foreach $__kpd (@{$__kps}) { $__kpc = $__kpd->[0]; if ($__kpq->[$__kpc] != 0 && $__kpj->[$__kpc + 1] != 0) { my $__kpo = _bjs($__kpq->[$__kpc], $__kpu->[$__kpc]); my $__kpp = _bjs($__kpj->[$__kpc + 1], $__kpu->[$__kpc]); if ($__kpo != $__kpp) { $__kpk = $__kpd->[1]; if ($__kpk == 1) { if ($__kpo < $__kpp) { $__kpg = 1; } else { $__kph = 1; } } elsif ($__kpk == 2) { if ($__kpo < $__kpp) { $__kph = 1; } else { $__kpg = 1; } } } } if ($__kpg && $__kph) { $__kpg = 0; $__kph = 0; last; } } if ($__kpg || $__kph) { $__kpe = 1; } } } } return $__kpe; } sub _bjz { my ($__kqf, $__kqg, $__kqh, $__kqi, $__kqj) = @_; my $__kpy = 0; my $__kpz = 1; my $__kqa = 0; my $__kqb = 0; my $__kqc = $__kqf->[$__kqg]; my $__kqd = @{$__kqf}; my $__kqe = @{$__kqc}; for ($__kqa = 0; $__kqa < $__kqg && $__kpz; $__kqa++) { $__kpz = 0; for ($__kqb = 0; $__kqb < $__kqe && !$__kpz; $__kqb++) { if ($__kqb != $__kqh) { if ($__kqf->[$__kqa]->[$__kqb] != $__kqc->[$__kqb]) { $__kpz = 1; } } } } if ($__kpz == 0) { $__kpy = 1; } else { for ($__kqa = $__kqg + 1; $__kqa < $__kqd && $__kpz; $__kqa++) { $__kpz = 0; for ($__kqb = 0; $__kqb < $__kqe && !$__kpz; $__kqb++) { if ($__kqb != $__kqh) { if ($__kqf->[$__kqa]->[$__kqb] != $__kqc->[$__kqb]) { $__kpz = 1; } } } } $__kpy = !$__kpz; } if (!$__kpy && !$__kqj) { $__kpz = 0; for ($__kqb = 0; $__kqb < $__kqe && !$__kpz; $__kqb++) { if ($__kqb != $__kqh) { if ($__kqc->[$__kqb] != $__kqi->[$__kqb]) { $__kpz = 1; } } } $__kpy = !$__kpz; } return $__kpy; } sub _azs { my ($__kql, $__kqm, $__kqn, $__kqo) = @_; my $__kqk = 0; $__kqk = _bka($__kql, $__kqm, $__kqo); if (!$__kqk) { $__kqk = _bka($__kql, $__kqn, $__kqo); } return $__kqk; } sub _bka { my ($__kqv, $__kqw, $__kqx) = @_; my $__kqp = 0; my $__kqq = 0; my $__kqr = @{$__kqw}; my $__kqs = 0; my $__kqt = 0; my $__kqu = 0; for ($__kqp = 0; $__kqp < $__kqr; $__kqp++) { $__kqt = 0; $__kqs = @{$__kqw->[$__kqp]}; for ($__kqq = 0; $__kqq < $__kqs; $__kqq++) { if ($__kqq != $__kqx) { if ($__kqw->[$__kqp]->[$__kqq + 1] != $__kqv->[$__kqq]) { $__kqt = 1; last; } } } if ($__kqt == 0) { $__kqu = 1; last; } } return $__kqu; } sub _bkb { my ($__kre, $__krf, $__krg, $__krh) = @_; my $__kqy = 0; my $__kqz = 0; my $__kra = 0; my $__krb = 0; my %__krc = (); foreach $__kqy (@{$__krf}) { foreach $__kqz (@{$__kqy}) { $__kra = $__kqz->[0]; $__krb = $__kqz->[1]; if ($__krh) { if (exists $__kre->{$__kra}) { if ($__kre->{$__kra}->{'_hc'} == $__krb) { if (exists $__kre->{$__kra}->{'_blf'} || exists $__kre->{$__kra}->{'_blg'}) { $__krc{$__kra} = 1; } } } } else { if (exists $__krg->{$__kra}) { if ($__kre->[$__krg->{$__kra}] == $__krb) { $__krc{$__kra} = 1; } } } } } my @__krd = sort {$a <=> $b} keys %__krc; return \@__krd; } sub _azq { my ($__kro, $__krp, $__krq, $__krr) = @_; my $__kri = 0; my $__krj = 0; my $__krk = 0; my $__krl = 0; my $__krm = 0; my $__krn = 1; foreach $__krj (@{$__krp}) { $__krn = 1; foreach $__krk (@{$__krj}) { $__krl = $__krk->[0]; $__krm = $__krk->[1]; if ($__krr) { if (exists $__kro->{$__krl}) { if ($__kro->{$__krl}->{'_hc'} != $__krm) { $__krn = 0; last; } } else { $__krn = 0; last; } } else { if (exists $__krq->{$__krl}) { if ($__kro->[$__krq->{$__krl}] != $__krm) { $__krn = 0; last; } } else { $__krn = 0; last; } } } if ($__krn) { $__kri = 1; last; } } return $__kri; } sub _bkc { my ($__ksa, $__ksb) = @_; my $__krs = 0; my $__krt = 20000; my $__kru = 0; my $__krv = 0; my $__krw = 0; my $__krx = 0; while (_azq($__ksa, $__ksb, 0, 1)) { my $__kry = _bkb($__ksa, $__ksb, 0, 1); if ($__krx) { authlib9_14_2::_zq(197, "ACBCBYO Error", "Cannot create a BYO concept. All combinations considered. Too many prohibitions.", ""); } if (@{$__kry} == 0) { authlib9_14_2::_zq(198, "ACBCBYO Error", "Cannot create a BYO concept after " . $__krs . " iterations.", ""); } for ($__kru = 0; $__kru < @{$__kry}; $__kru++) { my $__krz = $__ksa->{$__kry->[$__kru]}; $__krv = 0; $__krz->{'_fz'}++; $__krw = @{$__krz->{'_gk'}}; if ($__krz->{'_fz'} > ($__krw - 1)) { $__krz->{'_fz'} = 0; if ($__kru == @{$__kry} - 1) { $__krx = 1; } } else { $__krv = 1; } $__krz->{'_hc'} = $__krz->{'_gk'}->[$__krz->{'_fz'}]; if ($__krv) { last; } } if ($__krs >= $__krt) { authlib9_14_2::_zq(198, "ACBCBYO Error", "Cannot create a BYO concept after " . $__krs . " iterations.", ""); } $__krs++; } } sub _bkd { my ($__ksj, $__ksk) = @_; my $__ksc = $__ksj->{'_ad'}; my $__ksd = 0; my $__kse = ""; my $__ksf = 0; my $__ksg = 0; my @__ksh = (); if ($__ksk) { if (exists $__ksc->{$__ksk}) { push @__ksh, $__ksk; } } else { @__ksh = sort {$a <=> $b} keys %{$__ksc}; } foreach $__ksd (@__ksh) { $__kse = $__ksc->{$__ksd}->{'_he'}; $__ksf = authlib9_14_2::_adc($__kse); $__ksg = @{$__ksf}; my @__ksi = (0) x $__ksg; $__ksc->{$__ksd}->{'_amu'} = \@__ksi; } return $__ksc; } sub _bke { my ($__ksq, $__ksr, $__kss, $__kst, $__ksu) = @_; my $__ksl = 0; my $__ksm = 0; $__ksl = $__ksr->{$__kss}->{'_amu'}; my $__ksn = @{$__ksl}; my $__kso = $__ksr->{$__kss}->{'_ni'}; my $__ksp = $__ksr->{$__kss}->{'_kb'}; if ($__ksq == 24) { if (($__kso == 1 && $__ksu == 1) || ($__kso == 2 && $__ksu == 2)) { for ($__ksm = $__kst - 2; $__ksm >= 0; $__ksm--) { $__ksl->[$__ksm] = 1; } } elsif (($__kso == 1 && $__ksu == 2) || ($__kso == 2 && $__ksu == 1)) { for ($__ksm = $__kst; $__ksm < $__ksn; $__ksm++) { $__ksl->[$__ksm] = 1; } } elsif ($__kso == 0 || ($__kso > 0 && $__ksu == 0)) { for ($__ksm = 0; $__ksm < $__ksn; $__ksm++) { if ($__ksm != ($__kst - 1)) { $__ksl->[$__ksm] = 1; } } } } else { if (($__kso == 1 && $__ksp == 1) || ($__kso == 2 && $__ksp == 1)) { for ($__ksm = $__kst - 1; $__ksm >= 0; $__ksm--) { $__ksl->[$__ksm] = 1; } } elsif (($__kso == 1 && $__ksp == 2) || ($__kso == 2 && $__ksp == 2)) { for ($__ksm = $__kst - 1; $__ksm < $__ksn; $__ksm++) { $__ksl->[$__ksm] = 1; } } else { $__ksl->[$__kst - 1] = 1; } } } sub _bkf { my ($__ksv) = @_; return {"i"=> 0, "size"=> $__ksv}; } sub _azm { my ($__ksx, $__ksy) = @_; if (!exists $__ksx->{"a"} || $__ksx->{"i"} >= @{$__ksx->{"a"}}) { _bkg($__ksx, $__ksy); $__ksx->{"i"} = 0; } my $__ksw = $__ksx->{"a"}->[$__ksx->{"i"}]; $__ksx->{"i"}++; return $__ksw; } sub _bkg { my ($__ktc, $__ktd) = @_; my $__ksz = 0; if (exists $__ktc->{"a"}) { $__ksz = @{$__ktc->{"a"}}; } elsif (exists $__ktc->{"size"}) { $__ksz = $__ktc->{"size"}; } my $__kta = $__ktd + $acbclib9_14_2::_blb; $acbclib9_14_2::_blb++; my $__ktb = authlib9_14_2::_acn($__kta, $__ksz, 0); $__ktc->{"a"} = $__ktb; } sub _bkh { my ($__kti, $__ktj) = @_; my $__kte = $__kti->[0]; my $__ktf = $__kti->[1]; my $__ktg = $__ktf - $__kte; $__ktj += $acbclib9_14_2::_blb; $acbclib9_14_2::_blb++; authlib9_14_2::_aco($__ktj); my $__kth = rand($__ktg); $__kth += $__kte; return $__kth; } sub _bki { my ($__ktp, $__ktq) = @_; if ($__ktq->{'_kf'}) { my $__ktk = $__ktq->{'_kf'}->{'_kg'}; my $__ktl = acbclib9_14_2::_bil($__ktp, $__ktq); my $__ktm = @{$__ktl}; my $__ktn = 0; for (my $__kto = 0; $__kto < $__ktm && !$__ktn; $__kto++) { $__ktn = $__ktl->[$__kto] == $__ktk; } if (!$__ktn) { authlib9_14_2::_zq(177, "ACBC Error.", "ACBC Error. The study was configured to include Summed Pricing but the price attribute was not included in the constructed list.", $@); } } } sub _bkj { my ($__kub, $__kuc) = @_; my $__ktr = 0; my $__kts = 0; my $__ktt = 0; my $__ktu = $__kub->{'_ad'}; my $__ktv = 1; if (exists $__kub->{'_kf'}) { $__ktr = $__kub->{'_kf'}->{'_kg'}; } if ($__kuc) { my $__ktw = {}; foreach $__kts (@{$__kuc}) { $__ktt = $__kts->{'_pt'}; $__ktw->{$__ktt} = 1; } foreach $__kts (@{$__kuc}) { $__ktt = $__kts->{'_pt'}; if ($__ktt != $__ktr) { if (exists $__ktu->{$__ktt}->{'_kp'}) { my $__ktx = $__ktu->{$__ktt}->{'_kp'}; my $__kty = 0; my $__ktz = 0; my $__kua = 0; foreach $__ktz (@{$__ktx}) { if (exists $__ktw->{$__ktz} && !exists $__ktu->{$__ktz}->{'_me'}) { $__kua = 1; last; } } if (!$__kua) { next; } } if (!exists $__ktu->{$__ktt}->{'_me'}) { $__ktv = 0; last; } } } } return $__ktv; } sub _bkk { my ($__kug) = @_; my $__kud = ""; my $__kue = 0; my $__kuf = ""; $__kud .= "["; foreach $__kue (@{$__kug}) { $__kud .= "{"; foreach $__kuf (sort keys %{$__kue}) { if ($__kuf eq "a") { $__kud .= "\"" . $__kuf . "\"=>"; $__kud .= authlib9_14_2::_wz($__kue->{$__kuf}); } elsif ($__kuf eq "i") { $__kud .= "\"" . $__kuf . "\"=>"; $__kud .= $__kue->{$__kuf}; } else { next; } $__kud .= ","; } $__kud =~ s/,$//; $__kud .= "}"; $__kud .= ","; } $__kud =~ s/,$//; $__kud .= "]"; return $__kud; } sub _bkl { my ($__kuj, $__kuk, $__kul) = @_; my $__kuh = _bkm($__kuj, $__kul); if ($__kuh <= 0 || $__kuh =~ m/inf/io) { return 0; } if ($__kuk == 0 || $__kul == 0) { return 0; } my $__kui = 1/($__kuk*((1/$__kuh)**(1/$__kul))); $__kui = 1 < $__kui ? 2 : $__kui; $__kui = 0 > $__kui ? 0 : $__kui; return $__kui; } sub _bkm { my ($__kuu, $__kuv) = @_; my $__kum = 1; my $__kun = 0; my $__kuo = 0; my $__kup = 0; my $__kuq = 0; my $__kur = 0; my $__kus = 0; my $__kut = 0; for ($__kup = 0; $__kup < $__kuv - 1; $__kup++) { $__kus = $__kuu->[$__kup]; if ($__kus->[$__kup] == 0) { for ($__kuq = $__kup + 1; $__kuq < $__kuv; $__kuq++) { $__kut = $__kuu->[$__kuq]; if ($__kut->[$__kup] != 0) { for ($__kur = 0; $__kur < $__kuv; $__kur++) { $__kun = $__kus->[$__kur]; $__kus->[$__kur] = $__kut->[$__kur]; $__kut->[$__kur] = $__kun; } $__kum *= -1; } } } if ($__kus->[$__kup] == 0) { return 0; } for ($__kuq = $__kup + 1; $__kuq < $__kuv; $__kuq++) { $__kut = $__kuu->[$__kuq]; if ($__kut->[$__kup] != 0) { $__kuo = $__kut->[$__kup] / $__kus->[$__kup]; for ($__kur = $__kup; $__kur < $__kuv; $__kur++) { $__kut->[$__kur] -= ($__kuo * $__kus->[$__kur]); } } } } for ($__kup = 0; $__kup < $__kuv; $__kup++) { $__kum *= $__kuu->[$__kup]->[$__kup]; } return $__kum; } sub _bkn { my ($__kvc, $__kvd, $__kve) = @_; my $__kuw = 0; my $__kux = 0; my $__kuy = 0; my $__kuz = 0; my @__kva = (); for ($__kuw = 0; $__kuw < $__kve; $__kuw++) { my @__kvb = (0) x $__kve; push(@__kva, \@__kvb); } for ($__kuw = 0; $__kuw < $__kve; $__kuw++) { for ($__kux = $__kuw; $__kux < $__kve; $__kux++) { $__kuz = 0; for ($__kuy = 0; $__kuy < $__kvd; $__kuy++) { $__kuz += $__kvc->[$__kuy]->[$__kuw]*$__kvc->[$__kuy]->[$__kux]; } $__kva[$__kuw]->[$__kux] = $__kuz; $__kva[$__kux]->[$__kuw] = $__kuz if ($__kuw != $__kux); } } return \@__kva; } sub _bko { my ($__kvm, $__kvn, $__kvo, $__kvp, $__kvq, $__kvr, $__kvs) = @_; my $__kvf = 0; my $__kvg = 0; my $__kvh = 0; my $__kvi = 0; my $__kvj = $__kvp->[$__kvm - 1]; my @__kvk = (); my @__kvl = (); for ($__kvg = 0; $__kvg < $__kvn - 1; $__kvg++, $__kvo++) { push(@__kvl, $__kvo + 1); push(@__kvk, 0); if ($__kvm != 0) { $__kvk[-1] = $__kvj->[$__kvg]; } } for ($__kvf = 0; $__kvf < @__kvl; $__kvf++) { $__kvh = $__kvl[$__kvf]; $__kvi = $__kvk[$__kvf]; if ($__kvq->[$__kvh] != $__kvi) { for ($__kvg = 0; $__kvg < $__kvl[0]; $__kvg++) { $__kvr->[$__kvg]->[$__kvh] -= $__kvq->[$__kvg] * $__kvq->[$__kvh]; $__kvr->[$__kvg]->[$__kvh] += $__kvq->[$__kvg] * $__kvi; $__kvr->[$__kvh]->[$__kvg] = $__kvr->[$__kvg]->[$__kvh]; } for ($__kvg = $__kvl[-1] + 1; $__kvg < $__kvs; $__kvg++) { $__kvr->[$__kvh]->[$__kvg] -= $__kvq->[$__kvh] * $__kvq->[$__kvg]; $__kvr->[$__kvh]->[$__kvg] += $__kvi * $__kvq->[$__kvg]; $__kvr->[$__kvg]->[$__kvh] = $__kvr->[$__kvh]->[$__kvg]; } } for ($__kvg = $__kvf; $__kvg < @__kvl; $__kvg++) { if ($__kvq->[$__kvh] != $__kvi || $__kvq->[$__kvl[$__kvg]] != $__kvk[$__kvg]) { $__kvr->[$__kvh]->[$__kvl[$__kvg]] -= $__kvq->[$__kvh] * $__kvq->[$__kvl[$__kvg]]; $__kvr->[$__kvh]->[$__kvl[$__kvg]] += $__kvi * $__kvk[$__kvg]; if ($__kvl[$__kvg] != $__kvh) { $__kvr->[$__kvl[$__kvg]]->[$__kvh] = $__kvr->[$__kvh]->[$__kvl[$__kvg]]; } } } } } sub _bkp { my ($__kvv, $__kvw, $__kvx, $__kvy, $__kvz) = @_; my $__kvt = 0; my $__kvu = $__kvy->[$__kvv - 1]; for ($__kvt = 0; $__kvt < $__kvw - 1; $__kvt++, $__kvx++) { if ($__kvv == 0) { $__kvz->[$__kvx + 1] = 0; } else { $__kvz->[$__kvx + 1] = $__kvu->[$__kvt]; } } } sub _bkq { my ($__kwh, $__kwi, $__kwj, $__kwk) = @_; my $__kwa = @{$__kwh}; my $__kwb = $__kwj + 1; my @__kwc = (); my @__kwd = (0) x $__kwb; my $__kwe = 0; my $__kwf = 0; for ($__kwf = 0; $__kwf < $__kwa; $__kwf++) { my @__kwg = (0) x $__kwb; push(@__kwc, \@__kwg); } for ($__kwf = 0; $__kwf < $__kwa; $__kwf++) { _bkr($__kwh->[$__kwf], \@__kwd, $__kwi, $__kwk); $__kwc[$__kwf]->[0] = 1; for ($__kwe = 0; $__kwe < $__kwb - 1; $__kwe++) { $__kwc[$__kwf]->[$__kwe + 1] = $__kwd[$__kwe]; } } return \@__kwc; } sub _bkr { my ($__kws, $__kwt, $__kwu, $__kwv) = @_; my $__kwl = 0; my $__kwm = @{$__kwu}; my $__kwn = 0; my $__kwo = 0; my $__kwp = 0; my $__kwq = 0; my $__kwr = 0; for ($__kwn = 0; $__kwn < $__kwm; $__kwn++) { my $__kwp = $__kwu->[$__kwn] - 1; if ($__kws->[$__kwn] == 0) { for ($__kwo = 0; $__kwo < $__kwp; $__kwo++, $__kwl++) { $__kwt->[$__kwl] = 0; } next; } $__kwq = $__kwv->{$__kwu->[$__kwn]}; $__kwr = $__kwq->[$__kws->[$__kwn] - 1]; for (my $__kwo = 0; $__kwo < $__kwp; $__kwo++, $__kwl++) { $__kwt->[$__kwl] = $__kwr->[$__kwo]; } } } sub _bks { my ($__kxc) = @_; my @__kww = (); for (my $__kwx = 0; $__kwx < $__kxc; $__kwx++) { my @__kwy = (0) x ($__kxc - 1); push(@__kww, \@__kwy); } if ($__kxc == 2) { $__kww[0]->[0] = 1; $__kww[1]->[0] = -1; } else { my @__kwz = (); for (my $__kwx = 0; $__kwx < $__kxc; $__kwx++) { my @__kwy = (0) x $__kxc; push(@__kwz, \@__kwy); } for (my $__kxa = 0; $__kxa < $__kxc; $__kxa++) { $__kwz[$__kxa]->[0] = 1; if ($__kxa == $__kxc - 1) { for (my $__kxb = 1; $__kxb < $__kxc; $__kxb++) { $__kwz[$__kxa]->[$__kxb] = -1; } } else { for (my $__kxb = 1; $__kxb < $__kxc; $__kxb++) { if ($__kxa == $__kxb - 1) { $__kwz[$__kxa]->[$__kxb] = 1; } } } } _bkt($__kxc, $__kxc, \@__kwz); for (my $__kxa = 0; $__kxa < $__kxc; $__kxa++) { for (my $__kxb = 1; $__kxb < $__kxc; $__kxb++) { $__kww[$__kxa]->[$__kxb - 1] = $__kwz[$__kxa]->[$__kxb]; } } } return \@__kww; } sub _bkt { my ($__kxi, $__kxj, $__kxk) = @_; my @__kxd = (); my $__kxe = 0; my $__kxf = 0; my $__kxg = 0; my $__kxh = 0; for ($__kxh = 0; $__kxh < $__kxj; $__kxh++) { $__kxe = 0; @__kxd = (0) x $__kxj; for ($__kxg = 0; $__kxg < $__kxh; $__kxg++) { for ($__kxf = 0; $__kxf < $__kxi; $__kxf++) { $__kxd[$__kxg] += $__kxk->[$__kxf]->[$__kxg]*$__kxk->[$__kxf]->[$__kxh]; } } for ($__kxf = 0; $__kxf < $__kxi; $__kxf++) { for ($__kxg = 0; $__kxg < $__kxh; $__kxg++) { $__kxk->[$__kxf]->[$__kxh] -= $__kxk->[$__kxf]->[$__kxg]*$__kxd[$__kxg]; } } for ($__kxf = 0; $__kxf < $__kxi; $__kxf++) { $__kxe += $__kxk->[$__kxf]->[$__kxh]*$__kxk->[$__kxf]->[$__kxh]; } $__kxe = sqrt($__kxe); for ($__kxf = 0; $__kxf < $__kxi; $__kxf++) { $__kxk->[$__kxf]->[$__kxh] /= $__kxe; } } $__kxe = sqrt($__kxi); for ($__kxf = 0; $__kxf < $__kxi; $__kxf++) { for ($__kxg = 0; $__kxg < $__kxj; $__kxg++) { $__kxk->[$__kxf]->[$__kxg] *= $__kxe; } } } sub _bku { my ($__kxo) = @_; if (exists $__kxo->{'_ad'}) { my $__kxl = $__kxo->{'_ad'}; my $__kxm = 0; my $__kxn = 0; foreach $__kxm (keys %{$__kxl}) { $__kxn = $__kxl->{$__kxm}; delete $__kxn->{'_me'}; } } } 1;  package acbcbyolib9_14_2; our @ISA = qw(acbclib9_14_2); sub new { my ($__kxp) = @_; $__kxp->{'_vo'} = "acbc_byo"; bless($__kxp); return $__kxp; } sub _bhj { my ($__kxs, $__kxt, $__kxu, $__kxv) = @_; if (!$authlib9_14_2::_amg) { my $__kxq = $__kxs->{'_if'}; my $__kxr = ""; if ($__kxq =~ m/(.*?)_BYO/) { my $__kxr = $1; } if ($__kxv == 0) { $__kxs->{'_uk'} = 1; } elsif (acbclib9_14_2::_bkj($__kxt, $__kxu)) { acbclib9_14_2::_bki($__kxr, $__kxt); $__kxs->{'_uk'} = 1; } else { acbclib9_14_2::_bki($__kxr, $__kxt); } } } sub _vf { my ($__kya) = @_; my $__kxw = $__kya->SUPER::_vf(); my $__kxx = ""; my $__kxy = $__kya->{'_uf'}; my $__kxz = $__kxy->{'_bld'}; if (exists $__kxy->{'_cp'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .acbc_task_top_row {background-color:#" . $__kxy->{'_cp'} . ";}\n"; } if (exists $__kxy->{'_og'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .inner_table, .panel_table {" . ciwlib9_14_2::_tl($__kxy->{'_og'}) . "}\n"; } if (exists $__kxy->{'_ag'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .attributes_header_cell {text-align:" . $__kxy->{'_ag'} . ";}\n"; } if (exists $__kxy->{'_hh'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .levels_header_cell {text-align:" . $__kxy->{'_hh'} . ";}\n"; } if (exists $__kxy->{'_kj'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .price_header_cell {text-align:" . $__kxy->{'_kj'} . ";}\n"; } if (exists $__kxy->{'_kh'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .acbc_byo_price_box {width:" . $__kxy->{'_kh'} . "px;}\n"; } if (exists $__kxy->{'_oi'}) { $__kxx = ciwlib9_14_2::_tk($__kxy->{'_oi'}, 0, 0); if ($__kxx) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .task_header_cell {" . $__kxx . "}\n"; } } if (exists $__kxy->{'_oh'}) { $__kxx = ciwlib9_14_2::_tk($__kxy->{'_oh'}, 0, 0); if ($__kxx) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .task_footer_cell {" . $__kxx . "}\n"; } } if (exists $__kxy->{'_oj'}) { $__kxx = ciwlib9_14_2::_tk($__kxy->{'_oj'}, 0, 0); if (exists $__kxy->{'_oj'}->{'_ps'}) { $__kxx .= " vertical-align: " . $__kxy->{'_oj'}->{'_ps'} . ";"; } if (exists $__kxy->{'_oj'}->{'_px'}) { $__kxx .= " width: " . $__kxy->{'_oj'}->{'_px'} . "px;"; } if ($__kxx) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .task_left_panel_cell {" . $__kxx . "}\n"; } } if (exists $__kxy->{'_ol'}) { $__kxx = ciwlib9_14_2::_tk($__kxy->{'_ol'}, 0, 0); if (exists $__kxy->{'_ol'}->{'_ps'}) { $__kxx .= " vertical-align: " . $__kxy->{'_ol'}->{'_ps'} . ";"; } if (exists $__kxy->{'_ol'}->{'_px'}) { $__kxx .= " width: " . $__kxy->{'_ol'}->{'_px'} . "px;"; } if ($__kxx) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .task_right_panel_cell {" . $__kxx . "}\n"; } } if (exists $__kxz->{'_q'}) { if ($__kxz->{'_q'}->{'_ay'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .alt_color1 {background-color: #" . $__kxz->{'_q'}->{'_ay'} . ";}\n"; } if ($__kxz->{'_q'}->{'_az'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .alt_color2 {background-color: #" . $__kxz->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__kxy->{'_kt'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .acbc_proh_error {border-color: #" . $__kxy->{'_kt'} . ";}\n"; } if (exists $__kxy->{'_gw'}) { $__kxx = ciwlib9_14_2::_tk($__kxy->{'_gw'}, 0, 0); if ($__kxx) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .label_text {" . $__kxx . "}\n"; } } if (exists $__kxy->{'_hf'}) { $__kxx = ciwlib9_14_2::_tk($__kxy->{'_hf'}, 0, 0); if ($__kxx) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .level_text {" . $__kxx . "}\n"; } if (exists $__kxy->{'_hf'}->{'_et'}) { if (exists $__kxy->{'_hf'}->{'_et'}->{'_m'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .acbc_byo_options {" . ciwlib9_14_2::_tl($__kxy->{'_hf'}->{'_et'}->{'_m'}) . "}\n"; } } } if (exists $__kxy->{'_pc'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .acbc_task_bottom_row {background-color: #" . $__kxy->{'_pc'} . ";}\n"; } if (exists $__kxy->{'_cc'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .inner_table_cell {padding: " . $__kxy->{'_cc'} . "px;}\n"; } if (exists $__kxy->{'_da'}) { $__kxw .= "\n#" . $__kya->{'_if'} . "_div .acbc_price_change_warning td{background-color: #" . $__kxy->{'_da'} . ";}\n"; } return $__kxw; } sub _vr { my ($__lck, $__lcl, $__lcm, $__lcn, $__lco) = @_; my $__kyb = ""; my $__kyc = $__lck->{'_uf'}; my $__kyd = $__lck->{'_if'}; my $__kye = $__kyc->{'_ae'}; my $__kyf = @{$__kye}; my $__kyg = 0; my $__kyh = $__kyc->{'_bld'}; my $__kyi = $__kyc->{'_px'}; my $__kyj = 0; my $__kyk = 0; my $__kyl = 0; my $__kym = 1; my $__kyn = 0; my $__kyo = 0; my $__kyp = 0; my %__kyq = (); my $__kyr = 0; my $__kys = 0; my $__kyt = 0; my @__kyu = (); my @__kyv = (); my @__kyw = (); my @__kyx = (); my $__kyy = 0; my %__kyz = (); my $__kza = 0; my $__kzb = ""; if ($authlib9_14_2::_amg) { $__lcn = 1; if (acbclib9_14_2::_bkj($__kyh, $__kye)) { ciwlib9_14_2::_rx("All attributes have been removed from the BYO question. When the survey is run the BYO question will be skipped and this message will not appear."); return ""; } } if (exists $__kyh->{'_kf'}) { $__kyk = $__kyh->{'_kf'}; $__kyl = $__kyk->{'_kg'}; if (!exists $__kyc->{'_mh'}) { $__kyj = 1; } } if (exists $__kyh->{'_dd'} && $__lcn) { my $__kzc = $__kyh->{'_dd'}; my $__kzd = $__kzc->{'_md'}; my $__kze = @{$__kzd}; my $__kzf = 0; my $__kzg = 0; my $__kzh = 0; my $__kzi = 0; my $__kzj = 0; my $__kzk = 0; my $__kzl = ""; for ($__kyo = 0; $__kyo < $__kze; $__kyo++) { $__kzh = $__kzd->[$__kyo]; if (exists $__kzh->{'_bn'}) { $__kzk = $__kzh->{'_bn'}; $__kzg = $__kzh->{'_ae'}; $__kzf = @{$__kzg}; $__kzj = 1; for ($__kyn = 0; $__kyn < $__kzf; $__kyn++) { $__kzi = 0; for ($__kyp = 0; $__kyp < $__kyf; $__kyp++) { if ($__kzg->[$__kyn] == $__kye->[$__kyp]->{'_pt'}) { $__kzi = 1; last; } } if (!$__kzi) { $__kzj = 0; last; } } if ($__kzj) { $__kyr = 1; $__kyq{($__kyo + 1)} = $__kzh; $__kzl = acbclib9_14_2::_bho($__kyd, $__kzk, ($__kyo + 1), "", 0); if ($__kzk->{'_jx'} eq "top") { push @__kyu, $__kzl; } elsif ($__kzk->{'_jx'} eq "right") { push @__kyv, $__kzl; } elsif ($__kzk->{'_jx'} eq "bottom") { push @__kyw, $__kzl; } elsif ($__kzk->{'_jx'} eq "left") { push @__kyx, $__kzl; } } } } } if (exists $__kyh->{'_dc'} && $__lcn) { $__kys = 1; } my $__kzm = 0; my $__kzn = 30; my $__kzo = 100; my $__kzp = 0; my $__kzq = 15; if (exists $__kyc->{'_gw'}) { $__kzm = $__kyc->{'_gw'}; if (exists $__kyc->{'_gv'}) { $__kzn = $__kyc->{'_gv'}; } $__kzo -= $__kzn; } if ($__kyj && $__lcn) { $__kzo -= $__kzq; } my $__kzr = 0; if (exists $__kyc->{'_oi'} || exists $__kyc->{'_oh'} || exists $__kyc->{'_ol'} || exists $__kyc->{'_oj'}) { $__kzr = 1; } if ($__kzr) { $__kyb .= "<table class=\"panel_table\" width=\"100%\""; if (exists $__kyc->{'_om'}) { $__kyb .= " style=\"width: " . $__kyc->{'_om'} . "px\""; } $__kyb .= ">\n"; if (exists $__kyc->{'_oi'}) { $__kyb .= "<tr>"; if (exists $__kyc->{'_oj'}) { $__kyb .= "<td></td>\n"; } $__kyb .= "<td class=\"task_header_cell\"><div class=\"task_header\">"; if (@__kyu) { foreach $__kyy (@__kyu) { $__kyb .= $__kyy; } } $__kyb .= $__kyc->{'_oi'}->{'_op'}; $__kyb .= "</div></td>\n"; if (exists $__kyc->{'_ol'}) { $__kyb .= "<td></td>\n"; } $__kyb .= "</tr>"; } $__kyb .= "<tr>\n"; if (exists $__kyc->{'_oj'}) { my $__kzs = $__kyc->{'_oj'}; $__kyb .= "<td class=\"task_left_panel_cell\"><div class=\"task_left_panel\">\n"; if (@__kyx) { foreach $__kyy (@__kyx) { $__kyb .= $__kyy; } } $__kyb .= $__kzs->{'_op'}; $__kyb .= "</div></td>\n"; } $__kyb .= "<td class=\"task_center_panel_cell\">\n"; } $__kyb .= "<table role=\"table\" class=\"inner_table\" width=\"100%\""; if (!$__kzr && exists $__kyc->{'_om'}) { $__kyb .= " style=\"width: " . $__kyc->{'_om'} . "px\""; } $__kyb .= ">"; if (exists $__kyc->{'_af'} || exists $__kyc->{'_hg'} || exists $__kyc->{'_ki'}) { my $__kzt = 0; $__kzp = 1; $__kyb .= "<tr class=\"acbc_task_top_row\">"; if ($__kzm) { $__kyb .= "<td role=\"columnheader\" class=\"attributes_header_cell inner_table_cell\">"; if (exists $__kyc->{'_af'}) { $__kyb .= $__kyc->{'_af'}; } else { $__kyb .= "&nbsp;"; } $__kyb .= "</td>"; } $__kyb .= "<td role=\"columnheader\" class=\"levels_header_cell inner_table_cell\">"; if (exists $__kyc->{'_hg'}) { $__kyb .= $__kyc->{'_hg'}; } else { $__kyb .= "&nbsp;"; } $__kyb .= "</td>"; if ($__kyj && $__lcn) { $__kyb .= "<td role=\"columnheader\" class=\"price_header_cell inner_table_cell\">"; if (exists $__kyc->{'_ki'}) { $__kyb .= $__kyc->{'_ki'}; } else { $__kyb .= "&nbsp;"; } $__kyb .= "</td>"; } $__kyb .= "</tr>"; } my $__kzu = 0; my $__kzv = 0; my $__kzw = 0; my $__kzx = 0; my $__kzy = 0; my $__kzz = ""; my $__laa = ""; my @__lab = (); my $__lac = ""; my $__lad = "left"; my $__lae = 0; my $__laf = ""; my $__lag = ""; my $__lah = $__kyh->{'_ad'}; my %__lai = (); if ($__kyj) { if (exists $__kyk->{'_dm'}) { $__lac = $__kyk->{'_dm'}; } if (exists $__kyk->{'_dl'}) { $__lad = $__kyk->{'_dl'}; } if (exists $__kyk->{'_ix'}) { $__lae = $__kyk->{'_ix'}; } if (exists $__kyk->{'_ot'}) { $__laf = $__kyk->{'_ot'}; } if (exists $__kyk->{'_dr'}) { $__lag = $__kyk->{'_dr'}; } } my $__laj = 0; my $__lak = ""; my $__lal = 0; my $__lam = ""; my @__lan = (); my $__lao = ""; my $__lap = ""; my $__laq = 0; my $__lar = 0; for ($__kyo = 0; $__kyo < $__kyf; $__kyo++) { $__kzx = $__kye->[$__kyo]; $__kzy = $__kzx->{'_pt'}; if ($__kzy != $__kyl) { if (exists $__lah->{$__kzy}) { $__laj = $__lah->{$__kzy}; $__lap = $__laj->{'_he'}; $__laq = 0; $__kzv = 0; $__kzu = 0; $__lar = authlib9_14_2::_acx($__lap); if ($__lar) { if (exists($__lar->{'_jq'})) { $__laq = 1; } $__kzu = authlib9_14_2::_acy($__lap); if ($__kzu) { $__kzv = @{$__kzu}; } else { $__kzv = 0; } } if ($__kzv < 1) { if (!$authlib9_14_2::_amg) { $__kyb .= "</table><br>"; authlib9_14_2::_zq(174, "ACBC error.", "ACBC Error. Level list is empty for attribute " . $__kzy . ".", $@); } } $__lak = $__kyd . "_" . $__kzy; if (exists $__laj->{'_me'}) { push @__lan, $__kzy; } else { push @__lab, $__kzy; $__kyb .= "<tr id=\"" . $__kyd . "_row_" . $__kzy . "\""; $__lal = 0; if ($ciwlib9_14_2::_tz && exists $authlib9_14_2::_akn{"sys_acbc_proh_atts"}) { my $__las = $authlib9_14_2::_akn{"sys_acbc_proh_atts"}; if (exists $__las->{$__kzy}) { $__lal = 1; } } $__kyb .= " class=\"byo_att_row"; if ($__lal) { $__kyb .= " acbc_proh_error"; } else { $__kyb .= " alt_color" . $__kym; } if (exists $__laj->{'_kp'}) { $__kyb .= " conditional_att"; $__kyt = 1; } $__kyb .= "\">"; if ($__kzm) { $__kyb .= "<td role=\"rowheader\" class=\"label_text_cell inner_table_cell\" width=\"" . $__kzn . "%\">\n"; $__kyb .= "<div class=\"label_text\">\n"; $__kyb .= $__kzx->{'_op'}; $__kyb .= "</div>\n"; $__kyb .= "</td>\n"; } $__kyb .= "<td class=\"level_text_cell inner_table_cell\" width=\"" . $__kzo . "%\">\n"; if ($__kyc->{'_pj'} eq "radio") { $__kyb .= "<table role=\"radiogroup\" class=\"acbc_byo_options\" id=\"" . $__kyd . "_" . $__kzy . "_error\">\n"; } elsif ($__kyc->{'_pj'} eq "combo") { $__kyb .= "<div id=\"" . $__kyd . "_" . $__kzy . "_error\">\n"; $__kyb .= "<select name=\"" . $__lak . "\" class=\"acbc_byo_options\">\n"; $__kyb .= "<option value=\"\">" . $__kyc->{'_dt'} . "</option>\n"; } $__lai{$__kzy} = $__kzu; my %__lat = (); for ($__kyn = 0; $__kyn < $__kzv; $__kyn++) { $__kzw = $__kzu->[$__kyn]; $__kzz = $__kzw->{'_op'}; if ($__laq) { if (exists $__kzw->{'_in'}) { if ($__kyc->{'_pj'} eq "radio") { $__kyb .= "</table>"; } elsif ($__kyc->{'_pj'} eq "combo") { $__kyb .= "</select></div>\n"; } $__kyb .= "</table><br>"; authlib9_14_2::_zq(175, "ACBC error.", "ACBC Error. Attribute #" . $__kzy . " level #" . $__kzw->{'_pt'} . " is an Exclusive (\"None of the Above\") list member.", $@); } } if ($__kyj) { $__laa = acbclib9_14_2::_bhs($__kyc, $__kzw, $__laj, $__kyh); $__kzz .= " <span class=\"acbc_byo_price_text\">" . $__laa . "</span>"; } if ($__kyc->{'_pj'} eq "radio") { $__kyb .= "<tr class=\"clickable\">"; $__kyb .= "<td class=\"input_cell\">\n"; $__kyb .= ciwlib9_14_2::_tm($__lak, $__kzw->{'_pt'}, 1, $__kyc); $__kyb .= "</td>\n"; $__kyb .= "<td class=\"option_cell\">\n"; $__kyb .= "<div class=\"options\">\n"; my $__lau = $__lak . "_" . $__kzw->{'_pt'}; $__kyb .= "<label for=\"" . $__lau . "\" id=\"" . $__lau . "_label\">\n"; $__lao = "<span id=\"" . $__lak . "_" . $__kzw->{'_pt'} . "_label\" class=\"level_text\">" . $__kzz . "</span>"; $__kyb .= $__lao; $__kyb .= "</label></div></td></tr>"; } elsif ($__kyc->{'_pj'} eq "combo") { $__kyb .= "<option value=\"" . $__kzw->{'_pt'} . "\""; if (exists $__kyc->{'_ug'}) { if ($__kyc->{'_ug'}->{$__lak} == $__kzw->{'_pt'}) { $__kyb .= " selected"; } } $__kyb .= " id=\"" . $__lak . "_" . $__kzw->{'_pt'} . "_label\">" . $__kzz . "</option>\n"; $__lat{$__kzw->{'_pt'}} = $__kzz; } } if ($__kyc->{'_pj'} eq "radio") { $__kyb .= "</table>"; } elsif ($__kyc->{'_pj'} eq "combo") { $__kyb .= "</select></div>\n"; $__kyb .= "<div style=\"display: none;\">\n"; foreach my $__lav (sort {$a <=> $b} keys %__lat) { $__kyb .= "<div class=\"combo_label_" . $__lav . "\">" . $__lat{$__lav} . "</div>\n"; } $__kyb .= "</div>\n"; } $__kyb .= "</td>"; if ($__kyj && $__lcn) { $__kyb .= "<td class=\"price_cell inner_table_cell\" width=\"" . $__kzq . "%\" nowrap>"; if ($__lac) { $__kyb .= "<table cellpadding=\"0\" cellspacing=\"0\"><tr><td>"; } if ($__lac && $__lad eq "left") { $__kyb .= $__lac; $__kyb .= "</td><td>"; } $__kzb = $__kyd . "_price" . $__kzy; $__kyb .= "<input name=\"" . $__kzb . "\" type=\"tel\" id=\"" . $__kzb . "\" class=\"acbc_byo_price_box numeric_input\">"; if ($__lac && $__lad eq "right") { $__kyb .= "</td><td>"; $__kyb .= $__lac; } if ($__lac) { $__kyb .= "</td></tr></table>"; } $__kyb .= "</td>"; } $__kyb .= "</tr>"; if ($__kym == 1) { $__kym = 2; } else { $__kym = 1; } } } else { if (!$authlib9_14_2::_amg) { $__kyb .= "</table><br>"; authlib9_14_2::_zq(176, "ACBC error.", "ACBC Error. No level list specified for attribute " . $__kzy . ".", $@); } } } } if ($__kyj && $__lcn) { $__kyb .= "<tr class=\"acbc_task_bottom_row\">"; if ($__kzm) { $__kyb .= "<td class=\"inner_table_cell\">&nbsp;</td>"; } $__kyb .= "<td class=\"total_label_cell inner_table_cell\">" . $__kyc->{'_pe'} . "</td>"; $__kyb .= "<td class=\"price_cell total_price inner_table_cell\">"; if ($__lac) { $__kyb .= "<table cellpadding=\"0\" cellspacing=\"0\"><tr><td>"; } if ($__lac && $__lad eq "left") { $__kyb .= $__lac; $__kyb .= "</td><td>"; } $__kzb = $__kyd . "_" . $__kyl; $__kyb .= "<input name=\"" . $__kzb . "\" type=\"tel\" id=\"" . $__kzb . "\" class=\"acbc_byo_price_box numeric_input\">"; if ($__lac && ($__lad eq "right")) { $__kyb .= "</td><td>"; $__kyb .= $__lac; } if ($__lac) { $__kyb .= "</td></tr></table>"; } $__kyb .= "</td>"; $__kyb .= "</tr>"; } $__kyb .= "</table>\n"; if ($__kzr) { $__kyb .= "</td>"; if (exists $__kyc->{'_ol'}) { my $__law = $__kyc->{'_ol'}; $__kyb .= "<td class=\"task_right_panel_cell\"><div class=\"task_right_panel\">"; if (@__kyv) { foreach $__kyy (@__kyv) { $__kyb .= $__kyy; } } $__kyb .= $__law->{'_op'}; $__kyb .= "</div></td>\n"; } $__kyb .= "</tr>\n"; if (exists $__kyc->{'_oh'}) { $__kyb .= "<tr>"; if (exists $__kyc->{'_oj'}) { $__kyb .= "<td></td>\n"; } $__kyb .= "<td class=\"task_footer_cell\"><div class=\"task_footer\">"; if (@__kyw) { foreach $__kyy (@__kyw) { $__kyb .= $__kyy; } } $__kyb .= $__kyc->{'_oh'}->{'_op'}; $__kyb .= "</div></td>\n"; if (exists $__kyc->{'_ol'}) { $__kyb .= "<td></td>\n"; } $__kyb .= "</tr>"; } $__kyb .= "</table>\n"; } my $__lax = join(",", @__lab); $__kyb .= "\n<input type=\"hidden\" name=\"hid_list_" . $__kyd . "\" value=\"" . $__lax . "\">\n"; my $__lay = 0; my $__laz = "BYOObj_" . $__kyd; if ($__lcn && authlib9_14_2::_aet()) { if ($__kyj || exists $__kyh->{'_ks'} || $__kyr || $__kys || $__kyt) { $__kyb .= "<script type=\"text/javascript\">\n"; my @__lba = (); my @__lbb = (); my $__lbc = ""; my @__lbd = (); my $__lbe = 0; my @__lbf = (); for ($__kyo = 0; $__kyo < $__kyf; $__kyo++) { $__kzx = $__kye->[$__kyo]; $__kzy = $__kzx->{'_pt'}; if (exists $__lah->{$__kzy}) { $__lbe = $__lah->{$__kzy}; push @__lbb, $__kzy; if (!exists $__lbe->{'_me'}) { push @__lba, $__kzy; if ($__kyj) { ciwlib9_14_2::_rn($__lbe->{'_ko'}); $__lbc .= $__laz . ".BYOAddPrices(\"" . $__kzy . "\", [" . join(",", @{$__lbe->{'_ko'}}) . "]);\n"; } if (exists $__lbe->{'_db'}) { my $__lbg = $__lbe->{'_db'}; my $__lbh = 0; my $__lbi = 0; my $__lav = 0; foreach $__lbh (sort {$a <=> $b} keys %{$__lbg}) { $__lbi = $__lbg->{$__lbh}; foreach $__lav(sort {$a <=> $b} keys %{$__lbi}) { push @__lbf, [$__kzy . "-" . $__lav, $__lbh]; } } } } } } my $__lbj = @__lba; my $__lbk = "[" . join(",", @__lba) . "]"; if (exists $__kyh->{'_ks'}) { $__lay = 1; } my $__lbl = 0; if (exists $__kyh->{'_kf'}) { if (exists $__kyh->{'_kf'}->{'_aq'}) { $__lbl = $__kyh->{'_kf'}->{'_aq'}; if (!authlib9_14_2::_adv($__lbl)) { $__lbl = 0; } } } my $__lbm = "[]"; my $__lbn = ""; if ($__lay) { $__lay = 1; my $__lbo = $__kyh->{'_ks'}; if (@__lan) { $__lbo = authlib9_14_2::_aap(\@__lan, $__lbo); } $__lbm = "[" . join(",", map{authlib9_14_2::_wz($_)} @{$__lbo}) . "]"; my $__lbp = $authlib9_14_2::_akq->{'_hw'}; $__lbn = ciwlib9_14_2::_sx($__lbp->{'_f'}); } my $__lbq = "[]"; my $__lbr = "[]"; if ($__kyr) { my $__lbs = 0; my $__lbt = 0; my @__lbu = (); my @__lbv = (); foreach $__lbs (sort {$a <=> $b} keys %__kyq) { $__lbt = $__kyq{$__lbs}->{'_ae'}; push @__lbu, "[" . join(",", @{$__lbt}) . "]"; push @__lbv, $__lbs; } $__lbq = "[" . join(",", @__lbu) . "]"; $__lbr = "[" . join(",", @__lbv) . "]"; } my $__lbw = "[]"; my $__lbx = ""; my $__lby = ""; my $__lbz = ""; my $__lca = ""; my $__lcb = "[]"; if ($__kys && $__kyj) { my $__lcc = $__kyh->{'_dc'}->{'_md'}; my $__kzh = 0; my $__lcd = 0; my $__lce = ""; foreach $__kzh (@{$__lcc}) { $__lce .= "["; foreach $__lcd (@{$__kzh}) { $__lce .= "[" . join(",", @{$__lcd}) . "],"; if (@{$__lcd} == 3) { $__kyz{$__lcd->[0]} = 1; } } $__lce =~ s/,$//; $__lce .= "],"; } $__lce =~ s/,$//; $__lbw = "[" . $__lce . "]"; if (exists $__kyc->{'_jy'}) { $__lbx = ciwlib9_14_2::_sz(authlib9_14_2::_acq($__kyc->{'_jy'})); } if (exists $__kyc->{'_ig'}) { $__lby = ciwlib9_14_2::_sz(authlib9_14_2::_acq($__kyc->{'_ig'})); } if (exists $__kyc->{'_ih'}) { $__lbz = ciwlib9_14_2::_sz(authlib9_14_2::_acq($__kyc->{'_ih'})); } my $__lbp = $authlib9_14_2::_akq->{'_hw'}; $__lca = $__lbp->{'_e'}; $__lca = ciwlib9_14_2::_sx($__lca); $__lca = ciwlib9_14_2::_sy($__lca); } my $__lcf = ""; if (exists $__kyc->{'_ek'}) { $__lcf = ciwlib9_14_2::_sx($__kyc->{'_ek'}); } $__kyb .= "var " . $__laz . " = new SSI_BYOClass(\"" . $__kyd . "\"," . $__lbk . ",\"" . $__kyc->{'_pj'} . "\"," . $__kyj . "," . $__lbm . "," . $__kyr . "," . $__kys . "," . $__lbl . "," . $__lae . ",\"" . $__laf . "\",\"" . $__lag . "\"," . $__kyl . "," . $__kyc->{'_blh'} . ",\"" . $__lcf . "\",\"" . $__lbn . "\"," . $__lbq . "," . $__lbr . ", \"" . $authlib9_14_2::_aib . "\",\"" . $authlib9_14_2::_akh . "\",\"" . ($authlib9_14_2::_akn{"hid_respnum"} . "," . $authlib9_14_2::_akn{"hid_checksum"}) . "\"," . $authlib9_14_2::_akn{"hid_pagenum"} . "," . $__lbw . ",\"" . $__lbx . "\",\"" . $__lby . "\",\"" . $__lbz . "\",\"" . ciwlib9_14_2::_sz($__lac) . "\",\"" . $__lad . "\",\"" . $__lca; $__kyb .= "\",["; my $__lcg = 0; foreach $__lcg (@__lbf) { $__kyb .= "[\"" . $__lcg->[0] . "\", " . $__lcg->[1] . "],"; } if (@__lbf) { chop($__kyb); } $__kyb .= "]"; $__kyb .= ");\n"; $__kyb .= $__lbc; if ($__kyr) { my $__lch = ""; $__lch .= $__laz . ".BYOCondText(1, 0);\n"; ciwlib9_14_2::_sj($__lch); } if ($__kys && $__kyj) { ciwlib9_14_2::_sj($__laz . ".BYOCondPrice(false);\n"); } $__kyb .= "GlobalDocumentReadyArray.push(function(){" . $__laz . ".SetupEvents();})\n"; $__kyb .= "\n</script>\n"; if ($__kys) { foreach $__kyg (sort {$a <=> $b} keys %__kyz) { $__kyb .= "<input type=\"hidden\" name=\"" . $__kyd . "_" . $__kyg . "_prices\" value=\"\">\n"; } } } } if ($authlib9_14_2::_ajg) { my @__lci = (); $__kyb .= "<!--LoadTestMode: <question><name>$__kyd</name><type>acbcbyo</type><atts>$__lax</atts>"; $__kyb .= "<subtype>" . $__kyc->{'_pj'} . "</subtype>"; if (exists $__kyh->{'_kf'}) { $__kyb .= "<showprice>" . ($__kyj == 1 ? "true" : "false") . "</showprice>"; $__kyb .= "<priceatt>" . $__kyl . "</priceatt>"; } for ($__kyo = 0; $__kyo < $__kyf; $__kyo++) { $__kyg = $__kye->[$__kyo]->{'_pt'}; if (exists $__lah->{$__kyg}) { $__laj = $__lah->{$__kyg}; $__kzu = authlib9_14_2::_acy($__laj->{'_he'}); @__lci = (); if ($__kzu) { foreach $__kza (@{$__kzu}) { push @__lci, $__kza->{'_pt'}; } } $__kyb .= "<levs attindex=\"" . $__kyg . "\">" . join(",", @__lci) . "</levs>"; if (exists $__laj->{'_db'}) { $__kyb .= "<conditionalatts attindex=\"" . $__kyg . "\">"; while (my ($__lcp, $__lcq) = each %{$__laj->{'_db'}}) { $__kyb .= "<conditionalatt att=\"" . $__lcp . "\">"; $__kyb .= join(',', sort {$a <=> $b} keys %{$__lcq}); $__kyb .= "</conditionalatt>"; } $__kyb .= "</conditionalatts>"; } if (exists $__laj->{'_kp'}) { $__kyb .= "<primaryatts attindex=\"" . $__kyg . "\">"; $__kyb .= join(',', @{$__laj->{'_kp'}}); $__kyb .= "</primaryatts>"; } } } $__kyb .= "</question>-->\n"; } my %__lcj = (); $__lcj{'_bli'} = \@__lab; $__lcj{'_blj'} = $__lay; $__lcj{'_blk'} = $__laz; $__lck->{'_vy'} = \%__lcj; return $__kyb; } sub _vs { my ($__lcx, $__lcy, $__lcz, $__lda) = @_; if (exists $__lcx->{'_vy'}) { my $__lcr = $__lcx->{'_vy'}->{'_bli'}; my $__lcs = $__lcx->{'_vy'}->{'_blj'}; my $__lct = $__lcx->{'_vy'}->{'_blk'}; my $__lcu = @{$__lcr}; if ($__lcx->{'_uf'}->{'_pj'} eq "radio") { for (my $__lcv = 0; $__lcv < $__lcu; $__lcv++) { my $__lcw = "SSI_RadCheck(\"" . $__lcx->{'_if'} . "_" . $__lcr->[$__lcv] . "\",\"" . $__lcx->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__lcx->{'_uf'}->{'_ek'}) . "\", " . $__lda . ", true)"; push @{$__lcy}, $__lcw; } $__lcz->{'_uu'} = 1; } elsif ($__lcx->{'_uf'}->{'_pj'} eq "combo") { for (my $__lcv = 0; $__lcv < $__lcu; $__lcv++) { my $__lcw = "SSI_ComboCheck(\"" . $__lcx->{'_if'} . "_" . $__lcr->[$__lcv] . "\",\"" . $__lcx->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__lcx->{'_uf'}->{'_ek'}) . "\", " . $__lda . ", true)"; push @{$__lcy}, $__lcw; } $__lcz->{'_ux'} = 1; } if ($__lcs) { my $__lcw = $__lct . ".CheckBYOProhibitions()"; push @{$__lcy}, $__lcw; } } } 1;  package acbcscreenerlib9_14_2; our @ISA = qw(acbclib9_14_2); sub new { my ($__ldb) = @_; $__ldb->{'_vo'} = "acbc_screener"; bless($__ldb); return $__ldb; } sub _bhk { my ($__ldf) = @_; my $__ldc = $__ldf->{'_if'}; my $__ldd = $__ldf->{'_uf'}->{'_blr'}; my $__lde = $__ldf->{'_uf'}->{'_bld'}; my ($__ldg, $__ldh) = acbclib9_14_2::_bio($__ldc, $__lde, $__ldd); if (@{$__ldh}) { $__ldf->{'_uf'}->{'_bln'} = $__ldg; $__ldf->{'_uf'}->{'_blm'} = $__ldh; } else { $__ldf->{'_uk'} = 1; } $__ldf->_bll(); } sub _bll { my ($__ldo) = @_; my $__ldi = $__ldo->{'_uf'}; my @__ldj = ('_fn', '_fo', '_er'); my $__ldk = ""; my $__ldl = ""; my $__ldm = $authlib9_14_2::_ajk; my $__ldn = 0; if ($__ldm =~ m/_Screener(\d+)/i) { $__ldn = $1; } foreach $__ldk (@__ldj) { if (exists $__ldi->{$__ldk}) { $__ldl = authlib9_14_2::_acq($__ldi->{$__ldk}->{'_op'}); $__ldl =~ s/\[%ACBCCURRENTSCREENER\(\)%\]/$__ldn/sig; $__ldl =~ s/\[%ACBCNUMSCREENERS\(\)%\]/$__ldi->{'_bld'}->{'_iv'}/sig; $__ldi->{$__ldk}->{'_op'} = $__ldl; } } } sub _vf { my ($__ldt) = @_; my $__ldp = $__ldt->SUPER::_vf(); my $__ldq = ""; my $__ldr = $__ldt->{'_uf'}; my $__lds = $__ldr->{'_bld'}; if (exists $__ldr->{'_og'}) { $__ldp .= "\n#" . $__ldt->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__ldr->{'_og'}) . "}\n"; } if (exists $__lds->{'_q'}) { if (exists $__lds->{'_q'}->{'_ay'}) { $__ldp .= "\n#" . $__ldt->{'_if'} . "_div .alt_color1 {background-color: #" . $__lds->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__lds->{'_q'}->{'_az'}) { $__ldp .= "\n#" . $__ldt->{'_if'} . "_div .alt_color2 {background-color: #" . $__lds->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__ldr->{'_gw'}) { $__ldq = ciwlib9_14_2::_tk($__ldr->{'_gw'}, 0, 0); if ($__ldq) { $__ldp .= "\n#" . $__ldt->{'_if'} . "_div .label_text {" . $__ldq . "}\n"; } } if (exists $__ldr->{'_hf'}) { $__ldq = ciwlib9_14_2::_tk($__ldr->{'_hf'}, 0, 0); if ($__ldq) { $__ldp .= "\n#" . $__ldt->{'_if'} . "_div .level_text {" . $__ldq . "}\n"; } } if (exists $__ldr->{'_cc'}) { $__ldp .= "\n#" . $__ldt->{'_if'} . "_div .inner_table_cell {padding: " . $__ldr->{'_cc'} . "px;}\n"; } return $__ldp; } sub _vr { my ($__leu, $__lev, $__lew, $__lex, $__ley) = @_; my $__ldu = $__leu->{'_uf'}; my $__ldv = $__leu->{'_if'}; my $__ldw = ""; my $__ldx = $__ldu->{'_bld'}; my $__ldy = 0; my $__ldz = ""; my @__lea = (); my $__leb = 0; if ($__ldv =~ m/_Screener(\d+)/i) { $__ldy = $1; } my $__lec = 2; if ($__ldy & 1) { $__lec = 1; } my $__led = 0; my $__lee = 20; if (exists $__ldu->{'_gw'}) { $__led = $__ldu->{'_gw'}; if (exists $__ldu->{'_gv'}) { $__lee = $__ldu->{'_gv'}; } } $__ldw .= "<table role=\"table\" class=\"inner_table\" width=\"100%\""; if (exists $__ldu->{'_om'}) { $__ldw .= " style=\"width: " . $__ldu->{'_om'} . "px\""; } $__ldw .= ">"; my $__lef = 0; my $__leg = 0; my $__leh = ""; my $__lei = $__ldu->{'_blm'}; my $__lej = $__ldu->{'_ae'}; my $__lek = $__ldu->{'_bln'}; my ($__lez, $__lfa) = acbclib9_14_2::_bht($__lei, $__lej, $__lek, $__led, $__ldx); my $__lel = @{$__lez->[0]->{'_blc'}}; my $__lem = @{$__lez}; my $__len = int((100 - $__lee) / $__lem); for ($__lef = 0; $__lef < $__lel; $__lef++) { $__ldw .= "<tr"; if ($__lef == 0) { $__ldw .= " class=\"acbc_task_top_row\""; } $__ldw .= ">\n"; if ($__led) { $__ldw .= "<td role=\"rowheader\" class=\"label_text_cell inner_table_cell\" width=\"" . $__lee . "%\">\n"; $__ldw .= "<div class=\"label_text\">\n"; $__ldw .= $__lfa->[$__lef]; $__ldw .= "</div>\n"; $__ldw .= "</td>\n"; } for ($__leg = 0; $__leg < $__lem; $__leg++) { $__ldw .= "<td class=\"level_text_cell inner_table_cell alt_color" . $__lec . "\" width=\"" . $__len . "%\">"; $__leh = $__lez->[$__leg]->{'_blc'}->[$__lef]; $__ldw .= "<div class=\"level_text\">\n"; $__ldw .= $__leh; $__ldw .= "</div>\n"; $__ldw .= "</td>\n"; if ($__lec == 1) { $__lec = 2; } else { $__lec = 1; } } $__ldw .= "</tr>\n"; if ($__lem & 1) { if ($__lec == 1) { $__lec = 2; } else { $__lec = 1; } } } $__ldw .= "<tr class=\"acbc_task_bottom_row\">\n"; my $__leo = 0; my $__lep = ""; if ($__led) { $__ldw .= "<td>&nbsp;</td>\n"; } my $__leq = ""; my $__ler = ""; for ($__leg = 0; $__leg < $__lem; $__leg++) { $__ler = ""; $__leo = $__leg + 1; $__lep = $__ldv . "_" . $__leo; $__ldw .= "<td class=\"options_cell inner_table_cell alt_color" . $__lec . "\">\n"; if ($__lec == 1) { $__lec = 2; } else { $__lec = 1; } $__ldw .= "<table role=\"radiogroup\" id=\"" . $__lep. "\" class=\"acbc_screener_options\">\n"; $__ldw .= "<tr class=\"clickable\">"; $__leb = $__lez->[$__leg]->{'_blo'}; push @__lea, $__leb; $__leq = "1"; $__ldw .= "<td class=\"input_cell\">\n"; $__ldw .= ciwlib9_14_2::_tm($__lep, $__leq, 1, $__ldu); $__ldw .= "</td>"; $__ldw .= "<td class=\"option_cell\">\n"; $__ldw .= "<div class=\"options\">\n"; my $__les = $__lep . "_" . $__leq; $__ldw .= " <label for=\"" . $__les . "\" id=\"" . $__les . "_label\">" . $__ldu->{'_g'} . "</label><br>"; $__ldw .= "</div>"; $__ldw .= "</td></tr>"; $__ldw .= "<tr class=\"clickable\">"; $__leq = "0"; $__ldw .= "<td class=\"input_cell\">\n"; $__ldw .= ciwlib9_14_2::_tm($__lep, $__leq, 1, $__ldu); $__ldw .= "</td>"; $__ldw .= "<td class=\"option_cell\">\n"; $__ldw .= "<div class=\"options\">\n"; $__les = $__lep . "_" . $__leq; $__ldw .= " <label for=\"" . $__les . "\" id=\"" . $__les . "_label\">" . $__ldu->{'_mc'} . "</label>"; $__ldw .= "</div>"; $__ldw .= "</td>\n"; $__ldw .= "</td></tr></table>"; $__ldw .= "</td>\n"; } $__ldw .= "</tr>\n"; $__ldw .= "</table>\n"; $__ldw .= "<input name=\"hid_" . $__ldv . "_num_cols\" type=\"hidden\" value=\"" . $__lem . "\">\n"; $__ldw .= "<input name=\"" . $__ldv . "_shown\" type=\"hidden\" value=\"" . join(',', @__lea) . "\">\n"; if ($authlib9_14_2::_ajg) { $__ldw .= "<!--LoadTestMode: <question><name>$__ldv</name><type>acbcscreener</type>"; $__ldw .= "<concepts>" . $__lem . "</concepts>"; $__ldw .= "</question>-->\n"; } my %__let = (); $__let{'_blp'} = $__lem; $__leu->{'_vy'} = \%__let; return $__ldw; } sub _vs { my ($__lfe, $__lff, $__lfg, $__lfh) = @_; if (exists $__lfe->{'_vy'}) { my $__lfb = $__lfe->{'_vy'}->{'_blp'}; for (my $__lfc = 0; $__lfc < $__lfb; $__lfc++) { my $__lfd = "SSI_RadCheck(\"" . $__lfe->{'_if'} . "_" . ($__lfc + 1) . "\",\"" . $__lfe->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__lfe->{'_uf'}->{'_ek'}) . "\", " . $__lfh . ", true)"; push @{$__lff}, ($__lfd); } $__lfg->{'_uu'} = 1; } } 1;  package acbcmusthavelib9_14_2; our @ISA = qw(acbclib9_14_2); sub new { my ($__lfi) = @_; $__lfi->{'_vo'} = "acbc_musthave"; bless($__lfi); return $__lfi; } sub _bhk { my ($__lfn) = @_; my $__lfj = $__lfn->{'_if'}; my $__lfk = $__lfn->{'_uf'}->{'_blr'}; my $__lfl = $__lfn->{'_uf'}->{'_bld'}; if ($authlib9_14_2::_amg == &authlib9_14_2::_AOW || $authlib9_14_2::_amg == &authlib9_14_2::_AOX) { acbclib9_14_2::_bku($__lfl); } my ($__lfo, $__lfp) = acbclib9_14_2::_bib($__lfk, $__lfj); my $__lfm = acbclib9_14_2::_bip($__lfl, $__lfk, $__lfj); if (@{$__lfo} && ($__lfm || $authlib9_14_2::_amg == &authlib9_14_2::_AOW || $authlib9_14_2::_amg == &authlib9_14_2::_AOX)) { $__lfn->{'_uf'}->{'_blq'} = $__lfo; if (@{$__lfp}) { $__lfn->{'_uf'}->{'_ble'} = $__lfp; } } else { $__lfn->{'_uk'} = 1; } $__lfn->_bhx("\\[%ACBCMUSTHAVERULES\\(\\)%\\]", "\\[%ACBCMUSTHAVETEXT\\(\\)%\\]"); } sub _vf { my ($__lft) = @_; my $__lfq = $__lft->SUPER::_vf(); my $__lfr = ""; my $__lfs = $__lft->{'_uf'}; if (exists $__lfs->{'_og'}) { $__lfq .= "\n#" . $__lft->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__lfs->{'_og'}) . "}\n"; } if (exists $__lfs->{'_jc'}) { $__lfr = ciwlib9_14_2::_tk($__lfs->{'_jc'}, 0, 0); if ($__lfr) { $__lfq .= "\n#" . $__lft->{'_if'} . "_div .option_cell {" . $__lfr . "}\n"; } } if (exists $__lfs->{'_bc'}) { $__lfr = ciwlib9_14_2::_tk($__lfs->{'_bc'}, 0, 0); if ($__lfr) { $__lfq .= "\n#" . $__lft->{'_if'} . "_div .options_header_cell {" . $__lfr . "}\n"; } } return $__lfq; } sub _vr { my ($__lgy, $__lgz, $__lha, $__lhb, $__lhc) = @_; my $__lfu = $__lgy->{'_uf'}; my $__lfv = $__lgy->{'_if'}; my $__lfw = ""; my $__lfx = $__lfu->{'_bld'}; my $__lfy = $__lfx->{'_ad'}; my $__lfz = 0; my $__lga = 0; my $__lgb = 0; my $__lgc = 0; my $__lgd = ""; my $__lge = ""; my $__lgf = 0; my $__lgg = 0; my $__lgh = ""; my $__lgi = ""; my @__lgj = (); push (@__lgj, 0); my $__lgk = ""; if (exists $__lfu->{'_nq'}) { $__lfz = 1; my $__lgl = $__lfx->{'_ac'}; $__lga = acbclib9_14_2::_bhm($__lgl); } my $__lgm = $__lfu->{'_px'}; $__lfw .= "<table class=\"inner_table\" width=\"100%\""; if (exists $__lfu->{'_om'}) { $__lfw .= " style=\"width: " . $__lfu->{'_om'} . "px\""; } $__lfw .= ">"; $__lfw .= "<tr>"; my $__lgn = "left"; if (exists $__lfu->{'_nr'}) { $__lgn = $__lfu->{'_nr'}; } if (exists $__lfu->{'_ns'} && $__lgn eq "left") { $__lfw .= "<td class=\"left_panel_cell\">" . $__lfu->{'_ns'} . "</td>"; } $__lfw .= "<td class=\"center_panel_cell\">"; if (exists $__lfu->{'_blq'}) { my $__lgo = $__lfu->{'_blq'}; $__lgo = acbclib9_14_2::_bhv($__lgo, $__lfv); my $__lgp = @{$__lgo}; my $__lgq = 0; my $__lgr = 0; my $__lgs = ""; my $__lgt = ""; my $__lgu = 0; if (exists($__lfu->{'_in'})) { $__lgt = $__lfu->{'_in'}; $__lgp++; } $__lfw .= "<div class=\"acbc_potential_rules\">\n"; $__lfw .= "<table role=\"radiogroup\" class=\"acbc_rules\">"; if (exists $__lfu->{'_bc'}) { $__lfw .= "<tr><td class=\"options_header_cell\" colspan=\"2\">"; $__lfw .= $__lfu->{'_bc'}->{'_op'}; $__lfw .= "</td></tr>"; } for ($__lgr = 0; $__lgr < $__lgp; $__lgr++) { if (exists($__lfu->{'_in'}) && (($__lgr + 1) == $__lgp)) { $__lgu = 1; $__lfw .= "<tr><td colspan=\"2\">&nbsp;</td></tr>"; } $__lfw .= "<tr class=\"clickable\">"; if ($__lgu) { $__lgk = "0"; } else { $__lgq = $__lgo->[$__lgr]; $__lgb = $__lgq->[0]; $__lgc = $__lgq->[1]; $__lgg = $__lgq->[2]; $__lgk = $__lgr + 1; } $__lfw .= "<td class=\"input_cell\" width=\"5%\">\n"; $__lfw .= ciwlib9_14_2::_tm($__lfv, $__lgk, 1, $__lfu); $__lfw .= "</td>"; push @__lgj, $__lgk; $__lfw .= "<td class=\"option_cell\">\n"; $__lfw .= "<div class=\"options\">\n"; my $__lgv = $__lfv . "_" . $__lgk; $__lfw .= "<label for=\"" . $__lgv . "\" id=\"" . $__lgv . "_label\">\n"; if ($__lgu) { $__lgh = $__lgt; } else { $__lgh = acbclib9_14_2::_bia($__lgb, $__lgc, $__lgg, $__lfu, $__lfz, $__lga, $__lfy, $__lfx); } $__lfw .= $__lgh; $__lfw .= "</label>\n"; $__lfw .= "</div>\n"; $__lfw .= "</td>"; $__lfw .= "</tr>"; } $__lfw .= "</table></div>"; $__lfw .= "<input name=\"" . $__lfv . "_shown\" type=\"hidden\" value=\"" . authlib9_14_2::_wz($__lgo) . "\">\n"; } $__lfw .= "</td>"; if (exists $__lfu->{'_ns'} && $__lgn eq "right") { $__lfw .= "<td class=\"right_panel_cell\">" . $__lfu->{'_ns'} . "</td>"; } $__lfw .= "</tr></table>\n"; if ($authlib9_14_2::_ajg) { $__lfw .= "<!--LoadTestMode: <question><name>$__lfv</name><type>acbcmusthave</type>"; $__lfw .= "<values>"; my %__lgw = (); foreach my $__lgx (@__lgj) { if (not exists $__lgw{$__lgx}) { $__lfw .= "<value>" . $__lgx . "</value>"; $__lgw{$__lgx} = 1; } } $__lfw .= "</values>"; $__lfw .= "</question>-->\n"; } return $__lfw; } sub _vs { my ($__lhe, $__lhf, $__lhg, $__lhh) = @_; my $__lhd = "SSI_RadCheck(\"" . $__lhe->{'_if'} . "\",\"" . $__lhe->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__lhe->{'_uf'}->{'_ek'}) . "\", " . $__lhh . ", true)"; push @{$__lhf}, $__lhd; $__lhg->{'_uu'} = 1; } 1;  package acbcunacceptablelib9_14_2; our @ISA = qw(acbclib9_14_2); sub new { my ($__lhi) = @_; $__lhi->{'_vo'} = "acbc_unacceptable"; bless($__lhi); return $__lhi; } sub _bhk { my ($__lhn) = @_; my $__lhj = $__lhn->{'_if'}; my $__lhk = $__lhn->{'_uf'}->{'_blr'}; my $__lhl = $__lhn->{'_uf'}->{'_bld'}; if ($authlib9_14_2::_amg == &authlib9_14_2::_AOW || $authlib9_14_2::_amg == &authlib9_14_2::_AOX) { acbclib9_14_2::_bku($__lhl); } my ($__lho, $__lhp) = acbclib9_14_2::_bic($__lhk, $__lhj); my $__lhm = acbclib9_14_2::_bip($__lhl, $__lhk, $__lhj); if (@{$__lho} && ($__lhm || $authlib9_14_2::_amg == &authlib9_14_2::_AOW || $authlib9_14_2::_amg == &authlib9_14_2::_AOX)) { $__lhn->{'_uf'}->{'_blq'} = $__lho; if (@{$__lhp}) { $__lhn->{'_uf'}->{'_ble'} = $__lhp; } } else { $__lhn->{'_uk'} = 1; } $__lhn->_bhx("\\[%ACBCUNACCEPTABLERULES\\(\\)%\\]", "\\[%ACBCUNACCEPTABLETEXT\\(\\)%\\]"); } sub _vf { my ($__lht) = @_; my $__lhq = $__lht->SUPER::_vf(); my $__lhr = ""; my $__lhs = $__lht->{'_uf'}; if (exists $__lhs->{'_og'}) { $__lhq .= "\n#" . $__lht->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__lhs->{'_og'}) . "}\n"; } if (exists $__lhs->{'_jc'}) { $__lhr = ciwlib9_14_2::_tk($__lhs->{'_jc'}, 0, 0); if ($__lhr) { $__lhq .= "\n#" . $__lht->{'_if'} . "_div .option_cell {" . $__lhr . "}\n"; } } if (exists $__lhs->{'_bc'}) { $__lhr = ciwlib9_14_2::_tk($__lhs->{'_bc'}, 0, 0); if ($__lhr) { $__lhq .= "\n#" . $__lht->{'_if'} . "_div .options_header_cell {" . $__lhr . "}\n"; } } return $__lhq; } sub _vr { my ($__liw, $__lix, $__liy, $__liz, $__lja) = @_; my $__lhu = $__liw->{'_uf'}; my $__lhv = $__liw->{'_if'}; my $__lhw = ""; my $__lhx = $acbclib9_14_2::_bky->{$__lhu->{'_blr'}}; my $__lhy = $__lhx->{'_ad'}; my $__lhz = 0; my $__lia = 0; my $__lib = 0; my $__lic = 0; my $__lid = ""; my $__lie = ""; my $__lif = 0; my $__lig = ""; my $__lih = ""; my $__lii = ""; my @__lij = (); push (@__lij, 0); if (exists $__lhu->{'_nq'}) { $__lhz = 1; my $__lik = $__lhx->{'_ac'}; $__lia = acbclib9_14_2::_bhm($__lik); } $__lhw .= "<table class=\"inner_table\" width=\"100%\""; if (exists $__lhu->{'_om'}) { $__lhw .= " style=\"width: " . $__lhu->{'_om'} . "px\""; } $__lhw .= ">"; $__lhw .= "<tr>"; my $__lil = "right"; if (exists $__lhu->{'_nr'}) { $__lil = $__lhu->{'_nr'}; } if (exists $__lhu->{'_ns'} && $__lil eq "left") { $__lhw .= "<td class=\"left_panel_cell\">" . $__lhu->{'_ns'} . "</td>"; } $__lhw .= "<td class=\"center_panel_cell\">"; if (exists $__lhu->{'_blq'}) { my $__lim = $__lhu->{'_blq'}; $__lim = acbclib9_14_2::_bhv($__lim, $__lhv); my $__lin = @{$__lim}; my $__lio = 0; my $__lip = 0; my $__liq = ""; my $__lir = ""; my $__lis = 0; if (exists($__lhu->{'_in'})) { $__lir = $__lhu->{'_in'}; $__lin++; } $__lhw .= "<div class=\"acbc_potential_rules\">\n"; $__lhw .= "<table role=\"radiogroup\" class=\"acbc_rules\">"; if (exists $__lhu->{'_bc'}) { $__lhw .= "<tr><td class=\"options_header_cell\" colspan=\"2\">"; $__lhw .= $__lhu->{'_bc'}->{'_op'}; $__lhw .= "</td></tr>"; } for ($__lip = 0; $__lip < $__lin; $__lip++) { if (exists($__lhu->{'_in'}) && (($__lip + 1) == $__lin)) { $__lis = 1; $__lhw .= "<tr><td colspan=\"2\">&nbsp;</td></tr>"; } $__lhw .= "<tr class=\"clickable\">"; if ($__lis) { $__lii = "0"; } else { $__lio = $__lim->[$__lip]; $__lib = $__lio->[0]; $__lic = $__lio->[1]; $__lii = $__lip + 1; } $__lhw .= "<td class=\"input_cell\" width=\"5%\">\n"; $__lhw .= ciwlib9_14_2::_tm($__lhv, $__lii, 1, $__lhu); $__lhw .= "</td>"; push @__lij, $__lii; $__lhw .= "<td class=\"option_cell\">\n"; $__lhw .= "<div class=\"options\">\n"; my $__lit = $__lhv . "_" . $__lii; $__lhw .= "<label for=\"" . $__lit . "\" id=\"" . $__lit . "_label\">\n"; if ($__lis) { $__lig = $__lir; } else { $__lig = acbclib9_14_2::_bia($__lib, $__lic, 0, $__lhu, $__lhz, $__lia, $__lhy, $__lhx); } $__lhw .= $__lig; $__lhw .= "</label>\n"; $__lhw .= "</div>\n"; $__lhw .= "</td>"; $__lhw .= "</tr>"; } $__lhw .= "</table></div>"; $__lhw .= "<input name=\"" . $__lhv . "_shown\" type=\"hidden\" value=\"" . authlib9_14_2::_wz($__lim) . "\">\n"; } $__lhw .= "</td>"; if (exists $__lhu->{'_ns'} && $__lil eq "right") { $__lhw .= "<td class=\"right_panel_cell\">" . $__lhu->{'_ns'} . "</td>"; } $__lhw .= "</tr></table>\n"; if ($authlib9_14_2::_ajg) { $__lhw .= "<!--LoadTestMode: <question><name>$__lhv</name><type>acbcunacceptables</type>"; $__lhw .= "<values>"; my %__liu = (); foreach my $__liv (@__lij) { if (not exists $__liu{$__liv}) { $__lhw .= "<value>" . $__liv . "</value>"; $__liu{$__liv} = 1; } } $__lhw .= "</values>"; $__lhw .= "</question>-->\n"; } return $__lhw; } sub _vs { my ($__ljc, $__ljd, $__lje, $__ljf) = @_; my $__ljb = "SSI_RadCheck(\"" . $__ljc->{'_if'} . "\",\"" . $__ljc->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__ljc->{'_uf'}->{'_ek'}) . "\", " . $__ljf . ", true)"; push @{$__ljd}, $__ljb; $__lje->{'_uu'} = 1; } 1;  package acbcchoicelib9_14_2; our @ISA = qw(acbclib9_14_2); sub new { my ($__ljg) = @_; $__ljg->{'_vo'} = "acbc_choicetask"; bless($__ljg); return $__ljg; } sub _bhk { my ($__ljl) = @_; my $__ljh = $__ljl->{'_uf'}; my $__lji = $__ljl->{'_if'}; my $__ljj = $__ljl->{'_uf'}->{'_blr'}; my $__ljk = $__ljl->{'_uf'}->{'_bld'}; if ($authlib9_14_2::_amg == &authlib9_14_2::_AOW || $authlib9_14_2::_amg == &authlib9_14_2::_AOX) { acbclib9_14_2::_bku($__ljk); } my ($__ljm, $__ljn, $__ljo) = acbclib9_14_2::_biq($__ljk, $__ljj, $__lji); if (@{$__ljn}) { $__ljh->{'_bln'} = $__ljm; $__ljh->{'_blm'} = $__ljn; $__ljh->{'_bls'} = $__ljo; } else { $__ljl->{'_uk'} = 1; } $__ljl->_bll(); } sub _bll { my ($__ljy) = @_; my $__ljp = $__ljy->{'_uf'}; my $__ljq = $__ljp->{'_bld'}; my $__ljr = $__ljp->{'_bls'}; my $__ljs = acbclib9_14_2::_bhz($__ljr, $__ljq); my $__ljt = 0; my @__lju = ('_fn', '_fo', '_er'); my $__ljv = ""; my $__ljw = ""; my $__ljx = $authlib9_14_2::_ajk; if ($__ljx =~ m/_ChoiceTask(\d+)/i) { $__ljt = $1; } foreach $__ljv (@__lju) { if (exists $__ljp->{$__ljv}) { $__ljw = authlib9_14_2::_acq($__ljp->{$__ljv}->{'_op'}); $__ljw =~ s/\[%ACBCNUMCHOICETASKS\(\)%\]/$__ljs/sgi; $__ljw =~ s/\[%ACBCCURRENTCHOICETASK\(\)%\]/$__ljt/sgi; $__ljp->{$__ljv}->{'_op'} = $__ljw; } } } sub _vf { my ($__lkd) = @_; my $__ljz = $__lkd->SUPER::_vf(); my $__lka = ""; my $__lkb = $__lkd->{'_uf'}; my $__lkc = $__lkb->{'_bld'}; if (exists $__lkb->{'_cr'}) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .acbc_common_level .label_text, .acbc_common_level .level_text{color: #" . $__lkb->{'_cr'} . ";}\n"; } if (exists $__lkb->{'_cq'}) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .acbc_common_level {background-color: #" . $__lkb->{'_cq'} . " !important;}\n"; } if (exists $__lkb->{'_og'}) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__lkb->{'_og'}) . "}\n"; } if (exists $__lkc->{'_q'}) { if (exists $__lkc->{'_q'}->{'_ay'}) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .alt_color1 {background-color: #" . $__lkc->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__lkc->{'_q'}->{'_az'}) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .alt_color2 {background-color: #" . $__lkc->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__lkb->{'_gw'}) { $__lka = ciwlib9_14_2::_tk($__lkb->{'_gw'}, 0, 0); if ($__lka) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .label_text {" . $__lka . "}\n"; } } if (exists $__lkb->{'_hf'}) { $__lka = ciwlib9_14_2::_tk($__lkb->{'_hf'}, 0, 0); if ($__lka) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .level_text {" . $__lka . "}\n"; } } if (exists $__lkb->{'_cc'}) { $__ljz .= "\n#" . $__lkd->{'_if'} . "_div .inner_table td {padding: " . $__lkb->{'_cc'} . "px;}\n"; } return $__ljz; } sub _vr { my ($__lli, $__llj, $__llk, $__lll, $__llm) = @_; my $__lke = $__lli->{'_if'}; my $__lkf = $__lli->{'_uf'}; my $__lkg = ""; my $__lkh = $__lkf->{'_bld'}; my $__lki = $__lkf->{'_bln'}; my $__lkj = $__lkf->{'_blm'}; my $__lkk = @{$__lki}; my $__lkl = 0; my $__lkm = 2; my $__lkn = ""; my $__lko = ""; my $__lkp = 0; my $__lkq = 1; if (exists $__lkf->{'_np'}) { $__lkp = 1; $__lkq = 0; } if ($__lke =~ m/_ChoiceTask(\d+)/i) { $__lkl = $1; } if ($__lkp) { if ($__lkl & 1) { $__lkm = 1; } else { $__lkm = 2; } } my $__lkr = 0; my $__lks = 20; if (exists $__lkf->{'_gw'}) { $__lkr = $__lkf->{'_gw'}; if (exists $__lkf->{'_gv'}) { $__lks = $__lkf->{'_gv'}; } } $__lkg .= "<table role=\"table\" class=\"inner_table\" width=\"100%\""; if (exists $__lkf->{'_om'}) { $__lkg .= " style=\"width: " . $__lkf->{'_om'} . "px\""; } $__lkg .= ">"; my $__lkt = $__lkf->{'_ae'}; my $__lku = $__lkh->{'_ad'}; my $__lkv = 0; my $__lkw = 0; my $__lkx = 0; my $__lky = 0; my $__lkz = ""; my $__lla = ""; my $__llb = 0; my ($__lln, $__llo) = acbclib9_14_2::_bht($__lkj, $__lkt, $__lki, $__lkr, $__lkh); my $__llc = @{$__lln->[0]->{'_blc'}}; my $__lld = @{$__lln}; my $__lle = int((100 - $__lks) / $__lld); if (exists $__lkh->{'_kf'}) { $__lky = $__lkh->{'_kf'}->{'_kg'}; } for ($__lkv = 0; $__lkv < $__llc; $__lkv++) { $__llb = 1; $__lla = ""; for ($__lkw = 0; $__lkw < $__lld; $__lkw++) { $__lkz = $__lln->[$__lkw]->{'_blc'}->[$__lkv]; if ($__lla eq "") { $__lla = $__lkz; } elsif ($__lkz ne $__lla) { $__llb = 0; last; } } $__lkg .= "<tr"; if ($__lkv == 0) { $__lkg .= " class=\"acbc_task_top_row\""; } $__lkg .= ">\n"; if ($__lkr) { $__lkg .= "<td role=\"rowheader\" class=\"label_text_cell"; if ($__llb && $__lkq) { $__lkg .= " acbc_common_level"; } $__lkg .= "\" width=\"" . $__lks . "%\">"; $__lkg .= "<div class=\"label_text\">\n"; $__lkg .= $__llo->[$__lkv]; $__lkg .= "</div>\n"; $__lkg .= "</td>\n"; } for ($__lkw = 0; $__lkw < $__lld; $__lkw++) { $__lkg .= "<td class=\"level_text_cell"; if ($__lkp) { $__lkg .= " alt_color" . $__lkm; if ($__lkm == 1) { $__lkm = 2; } else { $__lkm = 1; } } if ($__llb && $__lkq) { $__lkg .= " acbc_common_level"; } $__lkg .= "\" width=\"" . $__lle . "%\">\n"; $__lkz = $__lln->[$__lkw]->{'_blc'}->[$__lkv]; $__lkg .= "<div class=\"level_text\">\n"; $__lkg .= $__lkz; $__lkg .= "</div>\n"; $__lkg .= "</td>\n"; } $__lkg .= "</tr>\n"; if ($__lld & 1) { if ($__lkm == 1) { $__lkm = 2; } else { $__lkm = 1; } } } $__lkg .= "<tr role=\"radiogroup\" class=\"acbc_task_bottom_row\">"; my $__llf = 0; my $__llg = ""; if ($__lkr) { $__lkg .= "<td>&nbsp;</td>\n"; } my @__llh = (); for ($__lkv = 0; $__lkv < $__lld; $__lkv++) { push(@__llh, $__lln->[$__lkv]->{'_blo'}); $__lkg .= "<td class=\"input_cell clickable"; if ($__lkp) { $__lkg .= " alt_color" . $__lkm; if ($__lkm == 1) { $__lkm = 2; } else { $__lkm = 1; } } $__lko = $__lkv + 1; $__lkg .= "\" nowrap>\n"; $__lkg .= ciwlib9_14_2::_tm($__lke, $__lko, 1, $__lkf); $__lkg .= "</td>\n"; } $__lkg .= "</tr>\n"; $__lkg .= "</table>\n"; $__lkg .= "<input name=\"" . $__lke . "_shown\" type=\"hidden\" value=\"" . join(',', @__llh) . "\">\n"; if ($authlib9_14_2::_ajg) { $__lkg .= "<!--LoadTestMode: <question><name>$__lke</name><type>acbcchoicetask</type>"; $__lkg .= "<min>1</min>"; $__lkg .= "<max>" . $__lld . "</max>"; $__lkg .= "</question>-->\n"; } return $__lkg; } sub _vs { my ($__llq, $__llr, $__lls, $__llt) = @_; my $__llp = "SSI_RadCheck(\"" . $__llq->{'_if'} . "\",\"" . $__llq->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__llq->{'_uf'}->{'_ek'}) . "\", " . $__llt . ", true)"; push @{$__llr}, $__llp; $__lls->{'_uu'} = 1; } 1;  package acbccalibrationlib9_14_2; our @ISA = qw(acbclib9_14_2); sub new { my ($__llu) = @_; $__llu->{'_vo'} = "acbc_calibration"; bless($__llu); return $__llu; } sub _bhk { my ($__lly) = @_; my $__llv = $__lly->{'_if'}; my $__llw = $__lly->{'_uf'}->{'_blr'}; my $__llx = $__lly->{'_uf'}->{'_bld'}; my ($__llz, $__lma, $__lmb, $__lmc) = acbclib9_14_2::_bis($__llx, $__llw, $__llv); if (@{$__lma}) { $__lly->{'_uf'}->{'_bln'} = $__llz; $__lly->{'_uf'}->{'_blm'} = $__lma; $__lly->{'_uf'}->{'_blt'} = $__lmb; $__lly->{'_uf'}->{'_iq'} = $__lmc; $__lly->_bll(); } else { $__lly->{'_uk'} = 1; } } sub _bll { my ($__lml) = @_; my $__lmd = $__lml->{'_uf'}; my $__lme = $__lmd->{'_bld'}; my $__lmf = 0; my $__lmg = $__lme->{'_iq'}; my @__lmh = ('_fn', '_fo', '_er'); my $__lmi = ""; my $__lmj = ""; my $__lmk = ""; if ($__lml->{'_if'} =~ m/_Calibration(\d+)/i) { $__lmf = $1; } if ($__lmf == 1) { if (exists $__lmd->{'_bo'} && $__lml->{'_uf'}->{'_blt'} == 0) { $__lmk = $__lmd->{'_bo'}; } } elsif ($__lmf == $__lmg) { if (exists $__lmd->{'_py'}) { $__lmk = $__lmd->{'_py'}; } } foreach $__lmi (@__lmh) { if (exists $__lmd->{$__lmi}) { $__lmj = authlib9_14_2::_acq($__lmd->{$__lmi}->{'_op'}); $__lmj =~ s/\[%ACBCCALIBRATIONTEXT\(\)%\]/$__lmk/sgi; $__lmj =~ s/\[%ACBCCURRENTCALIBRATION\(\)%\]/$__lmf/sgi; $__lmj =~ s/\[%ACBCNUMCALIBRATIONS\(\)%\]/$__lmg/sgi; $__lmd->{$__lmi}->{'_op'} = $__lmj; } } } sub _vf { my ($__lmq) = @_; my $__lmm = $__lmq->SUPER::_vf(); my $__lmn = ""; my $__lmo = $__lmq->{'_uf'}; my $__lmp = $__lmo->{'_bld'}; if (exists $__lmo->{'_og'}) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__lmo->{'_og'}) . "}\n"; } if (exists $__lmp->{'_q'}) { if (exists $__lmp->{'_q'}->{'_ay'}) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .alt_color1 {background-color: #" . $__lmp->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__lmp->{'_q'}->{'_az'}) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .alt_color2 {background-color: #" . $__lmp->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__lmo->{'_gw'}) { $__lmn = ciwlib9_14_2::_tk($__lmo->{'_gw'}, 0, 0); if ($__lmn) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .label_text {" . $__lmn . "}\n"; } } if (exists $__lmo->{'_hf'}) { $__lmn = ciwlib9_14_2::_tk($__lmo->{'_hf'}, 0, 0); if ($__lmn) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .level_text {" . $__lmn . "}\n"; } } if (exists $__lmo->{'_my'}) { $__lmn = ciwlib9_14_2::_tk($__lmo->{'_my'}, 0, 0); if ($__lmn) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .combo_input_cell {" . $__lmn . "}\n"; } if (exists $__lmo->{'_my'}->{'_et'}) { if (exists $__lmo->{'_my'}->{'_et'}->{'_m'}) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .acbc_calibration_options {" . ciwlib9_14_2::_tl($__lmo->{'_my'}->{'_et'}->{'_m'}) . "}\n"; } } } if (exists $__lmo->{'_cc'}) { $__lmm .= "\n#" . $__lmq->{'_if'} . "_div .inner_table_cell {padding: " . $__lmo->{'_cc'} . "px;}\n"; } return $__lmm; } sub _vr { my ($__lnv, $__lnw, $__lnx, $__lny, $__lnz) = @_; my $__lmr = ""; my $__lms = $__lnv->{'_if'}; my $__lmt = $__lnv->{'_uf'}; my $__lmu = $acbclib9_14_2::_bky->{$__lmt->{'_blr'}}; my $__lmv = $__lmt->{'_bln'}; my $__lmw = $__lmt->{'_blm'}; my $__lmx = $__lmt->{'_blt'}; my $__lmy = @{$__lmv}; my $__lmz = $__lmt->{'_px'}; my $__lna = ""; my $__lnb = 0; my $__lnc = 1; my $__lnd = ""; my @__lne = (); if ($__lms =~ m/_Calibration(\d+)/i) { $__lnb = $1; } if ($__lnb & 1) { $__lnc = 1; } else { $__lnc = 2; } my $__lnf = 0; my $__lng = 30; if (exists $__lmt->{'_gw'}) { $__lnf = $__lmt->{'_gw'}; if (exists $__lmt->{'_gv'}) { $__lng = $__lmt->{'_gv'}; } } $__lmr .= "<div class=\"calibration_container\">"; $__lmr .= "<table role=\"table\" class=\"inner_table\" width=\"100%\""; if (exists $__lmt->{'_om'}) { $__lmr .= " style=\"width: " . $__lmt->{'_om'} . "px\""; } $__lmr .= ">"; my $__lnh = $__lmt->{'_ae'}; my $__lni = $__lmu->{'_ad'}; my $__lnj = 0; my $__lnk = 0; my $__lnl = ""; my ($__loa, $__lob) = acbclib9_14_2::_bht($__lmw, $__lnh, $__lmv, $__lnf, $__lmu); my $__lnm = @{$__loa->[0]->{'_blc'}}; for ($__lnj = 0; $__lnj < $__lnm; $__lnj++) { $__lmr .= "<tr"; if ($__lnj == 0) { $__lmr .= " class=\"acbc_task_top_row\""; } $__lmr .= ">"; if ($__lnf) { $__lmr .= "<td role=\"rowheader\" class=\"label_text_cell inner_table_cell\" width=\"" . $__lng . "%\">\n"; $__lmr .= "<div class=\"label_text\">\n"; $__lmr .= $__lob->[$__lnj]; $__lmr .= "</div>\n"; $__lmr .= "</td>\n"; } $__lmr .= "<td class=\"level_text_cell inner_table_cell alt_color" . $__lnc . "\">"; $__lmr .= "<div class=\"level_text\">\n"; $__lnl = $__loa->[0]->{'_blc'}->[$__lnj]; $__lmr .= $__lnl; $__lmr .= "</div>\n"; $__lmr .= "</td>\n"; $__lmr .= "</tr>\n"; } $__lmr .= "</td></tr>\n"; $__lmr .= "</table>\n"; $__lmr .= "</div>"; my $__lnn = $__lmt->{'_my'}; my $__lno = $__lnn->{'_jc'}; my $__lnp = @{$__lno}; my $__lnq = 0; my $__lnr = $__lnn->{'_pj'}; if ($__lnr eq "radio") { $__lmr .= "<div role=\"radiogroup\" class=\"acbc_calibration_options\">\n"; for ($__lnj = 0; $__lnj < $__lnp; $__lnj++) { $__lnq = $__lno->[$__lnj]->{'_pt'}; $__lnd = $__lnq; push @__lne, $__lnd; $__lmr .= "<div class=\"clickable\">"; $__lmr .= "<div class=\"options\">\n"; my $__lns = $__lms . "_" . $__lnq; $__lmr .= "<label for=\"" . $__lns . "\" id=\"" . $__lns . "_label\">\n"; $__lmr .= $__lno->[$__lnj]->{'_op'}; $__lmr .= "</label></div>\n"; $__lmr .= "<div class=\"input_cell\">" . ciwlib9_14_2::_tm($__lms, $__lnd, 1, $__lmt) . "</div>"; $__lmr .= "</div>"; } $__lmr .= "</div>\n"; } elsif ($__lnr eq "combo") { $__lmr .= "<div class=\"combo_input_cell\">\n"; $__lmr .= "<select name=\"" . $__lms . "\">\n"; $__lmr .= "<option value=\"\">"; if (exists $__lnn->{'_dt'}) { $__lmr .= $__lnn->{'_dt'}; } $__lmr .= "</option>\n"; for ($__lnj = 0; $__lnj < $__lnp; $__lnj++) { $__lnd = $__lno->[$__lnj]->{'_pt'}; push @__lne, $__lnd; $__lmr .= "<option value=\"" . $__lnd . "\""; if (exists $__lmt->{'_ug'}) { if ($__lmt->{'_ug'}->{$__lms} eq $__lnd) { $__lmr .= " selected"; } } $__lmr .= ">" . $__lno->[$__lnj]->{'_op'} . "</option>\n"; } $__lmr .= "</select>\n"; $__lmr .= "</div>\n"; } $__lmr .= "<input name=\"" . $__lms . "_shown\" type=\"hidden\" value=\"" . $__lmx . "\">\n"; if ($authlib9_14_2::_ajg) { $__lmr .= "<!--LoadTestMode: <question><name>$__lms</name><type>acbccalibration</type>"; $__lmr .= "<scaletype>" . $__lnr . "</scaletype>"; $__lmr .= "<values>"; foreach my $__lnt (@__lne) { $__lmr .= "<value>" . $__lnt . "</value>"; } $__lmr .= "</values>"; $__lmr .= "</question>-->\n"; } my %__lnu = (); $__lnu{'_blu'} = $__lnr; $__lnv->{'_vy'} = \%__lnu; return $__lmr; } sub _vs { my ($__loe, $__lof, $__log, $__loh) = @_; my $__loc = ""; if (exists $__loe->{'_vy'}) { my $__lod = $__loe->{'_vy'}->{'_blu'}; if ($__lod eq "radio") { $__loc .= "SSI_RadCheck(\""; $__log->{'_uu'} = 1; } elsif ($__lod eq "combo") { $__loc .= "SSI_ComboCheck(\""; $__log->{'_ux'} = 1; } $__loc .= $__loe->{'_if'} . "\",\"" . $__loe->{'_if'} . "\", \"" . ciwlib9_14_2::_sx($__loe->{'_uf'}->{'_ek'}) . "\", " . $__loh . ", true)\n"; push @{$__lof}, $__loc; } } 1; 
