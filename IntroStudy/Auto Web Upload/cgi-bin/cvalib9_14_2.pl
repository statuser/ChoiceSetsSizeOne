# ---------------------------------------------------------------------------
#     CVALIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package cvalib9_14_2; our @ISA = qw(questionlib9_14_2); sub new { my ($__iag) = @_; $__iag->{'_vo'} = "cva"; bless($__iag); return $__iag; } sub _ve { my ($__iak) = @_; $__iak->SUPER::_ve(); my $__iah = $authlib9_14_2::_akn{"hid_respnum"}; my $__iai = $__iak->{'_uf'}; my $__iaj = $__iak->{'_if'}; my ($__ial, $__iam, $__ian) = _aze($__iai, $__iah, $__iaj); $__iai->{'_azw'} = $__ial; $__iai->{'_azx'} = $__iam; $__iai->{'_azy'} = $__ian; _bgl($__iai, $__iaj, $__iam); } sub _vf { my ($__ias) = @_; my $__iao = ""; my $__iap = ""; my $__iaq = $__ias->{'_uf'}; if (exists $__iaq->{'_hc'}) { if (exists $__iaq->{'_hc'}->{'_et'}) { my $__iar = $__iaq->{'_hc'}->{'_et'}; if (exists $__iar->{'_m'}) { if ($__iar->{'_m'} eq "left - right") { $__iao .= "\n#" . $__ias->{'_if'} . "_div .left_concept {text-align: left;}\n"; $__iao .= "\n#" . $__ias->{'_if'} . "_div .right_concept {text-align: right;}\n"; } } } $__iap = ciwlib9_14_2::_tk($__iaq->{'_hc'}, 0, 0); if ($__iap) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .level_text {" . $__iap . "}\n"; } } if (exists $__iaq->{'_gw'}) { $__iap = ciwlib9_14_2::_tk($__iaq->{'_gw'}, 0, 0); if ($__iap) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .row_label_cell {" . $__iap . "}\n"; } } if (exists $__iaq->{'_q'}) { if (exists $__iaq->{'_q'}->{'_ay'}) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .alt_color1 {background-color: #" . $__iaq->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__iaq->{'_q'}->{'_az'}) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .alt_color2 {background-color: #" . $__iaq->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__iaq->{'_bg'}) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .inner_table .level_text_cell {border: " . $__iaq->{'_bg'} . "px solid #000000;}\n"; } if (exists $__iaq->{'_cc'}) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .inner_table .level_text_cell {padding: " . $__iaq->{'_cc'} . "px;}\n"; } if (exists $__iaq->{'_og'}) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__iaq->{'_og'}) . "}\n"; } if (exists $__iaq->{'_je'}) { $__iap = ciwlib9_14_2::_tk($__iaq->{'_je'}, 0, 0); if ($__iap) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .or_header_cell {" . $__iap . "}\n"; } } if (exists $__iaq->{'_s'}) { $__iap = ciwlib9_14_2::_tk($__iaq->{'_s'}, 0, 0); if ($__iap) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .anchor_text_cell {" . $__iap . "}\n"; } } if (exists $__iaq->{'_nu'}) { if (exists $__iaq->{'_nu'}->{'_m'}) { $__iao .= "\n#" . $__ias->{'_if'} . "_div .input_row_cell {text-align:" . $__iaq->{'_nu'}->{'_m'} . ";}\n"; } } return $__iao; } sub _vr { my ($__ibr, $__ibs, $__ibt, $__ibu, $__ibv) = @_; my $__iat = $__ibr->{'_uf'}; my $__iau = $__ibr->{'_if'}; my $__iav = 0; my $__iaw = 0; my @__iax = (); my $__iay = 1; my $__iaz = 0; my $__iba = 0; my $__ibb = 0; my $__ibc = ""; if (exists $__iat->{'_gw'}) { $__iaw = $__iat->{'_gw'}; if (exists $__iat->{'_gv'}) { $__iba = $__iat->{'_gv'}; } else { $__iba = 30; } } my ($__ibw, $__ibx, $__iby) = _aze($__iat, $__ibt, $__iau); $__ibb = @{$__ibw->[$__iby]->{'_bac'}}; if ($__iaw) { my $__ibd = @{$__ibw->[$__iby]->{'_bac'}}; my $__ibe = ""; my $__ibf = 0; my $__ibg = 0; my $__ibh = 0; if (exists $__iat->{'_dd'}) { if (exists($__iat->{'_dd'}->{'_pa'})) { $__ibg = authlib9_14_2::_acv($__iat->{'_dd'}->{'_pa'}); } if (exists($__iat->{'_dd'}->{'_bl'})) { $__ibf = authlib9_14_2::_acv($__iat->{'_dd'}->{'_bl'}); } } for ($__iav = 0; $__iav < $__ibd; $__iav++) { $__ibe = ""; $__ibh = $__ibw->[$__iby]->{'_bac'}->[$__iav]->[0]; if ($__ibh eq "C-T") { if ($__ibg != 0 && @{$__ibg}) { $__ibe = shift @{$__ibg}; } } elsif ($__ibh eq "C-B") { if ($__ibf != 0 && @{$__ibf}) { $__ibe = shift @{$__ibf}; } } else { if ($__ibh =~ m/^C-(\d+)/i) { $__ibh = $1; } $__ibe = $__iat->{'_ae'}->[$__ibh]->{'_if'}; } push @__iax, $__ibe; } } my $__ibi = 0; if (exists $__iat->{'_nu'}) { $__ibi = 1; } my $__ibj = "alt_color1"; my $__ibk = "alt_color2"; if ($__ibv == 0) { $__ibj = "alt_color2"; $__ibk = "alt_color1"; } $__ibc .= "<div class=\"cvapair_row"; if ($__ibi) { $__ibc .= " single_concept"; } $__ibc .= "\">\n"; $__ibc .= "<div class=\"level_text_div left_concept " . $__ibj . "\">\n"; for ($__iav = 0; $__iav < $__ibb; $__iav++) { $__ibc .= "<div class=\"level_text\">\n"; $__ibc .= _auz($__iat, $__ibw, 0, $__iav); $__ibc .= "</div>\n"; } $__ibc .= "</div>\n"; if (exists($__iat->{'_je'})) { $__ibc .= "<div class=\"or_header "; $__ibc .= ciwlib9_14_2::_tk($__iat->{'_je'}, 1, 0); $__ibc .= "\">\n"; $__ibc .= $__iat->{'_je'}->{'_op'}; $__ibc .= "</div>"; } if (!$__ibi) { $__ibc .= "<div class=\"level_text_div right_concept " . $__ibk . "\">\n"; for ($__iav = 0; $__iav < $__ibb; $__iav++) { $__ibc .= "<div class=\"level_text\">\n"; $__ibc .= _auz($__iat, $__ibw, 1, $__iav); $__ibc .= "</div>\n"; } } $__ibc .= "</div>\n"; $__ibc .= "</div>\n"; if (exists $__iat->{'_s'}) { $__iaz = @{$__iat->{'_s'}->{'_v'}}; $__ibc .= "<div role=\"radiogroup\" class=\"cva_options\">"; for ($__iav = 0; $__iav < $__iaz; $__iav++) { $__ibc .= "<div class=\"option_div\">"; $__ibc .= "<div class=\"options\">\n"; my $__ibl = $__iau . "_" . ($__iav + 1); $__ibc .= "<label for=\"" . $__ibl . "\" id=\"" . $__ibl . "_label\">\n"; $__ibc .= $__iat->{'_s'}->{'_v'}->[$__iav]; $__ibc .= "</label></div>\n"; $__ibc .= "<div class=\"clickable input_cell\">" . ciwlib9_14_2::_tm($__iau, $__iav + 1, 1, $__iat) . "</div>"; $__ibc .= "</div>"; } $__ibc .= "</div>"; } else { if (exists $__iat->{'_nu'}) { my $__ibm = $__iat->{'_nu'}; if ($__ibm->{'_pj'} eq "numeric") { if (exists $__ibm->{'_hx'}) { $__iay = $__ibm->{'_hx'}; } if (exists $__ibm->{'_ho'}) { $__iaz = $__ibm->{'_ho'}; } my $__ibn = ""; my $__ibo = "left"; if (exists $__ibm->{'_gb'}) { $__ibn = $__ibm->{'_gb'}; if (exists $__ibm->{'_gs'}) { $__ibo = $__ibm->{'_gs'}; } } my $__ibp = length(authlib9_14_2::_zo($__iay)); my $__ibq = length(authlib9_14_2::_zo($__iaz)); if ($__ibq > $__ibp) { $__ibp = $__ibq; } if ($__ibn && $__ibo eq "left") { $__ibc .= $__ibn . " "; } $__ibc .= "\n<input type=\"tel\" class=\"numeric_input\" name=\"" . $__iau . "\""; if (exists $__iat->{'_ug'}) { $__ibc .= " value=\"" . $__iat->{'_ug'}->{$__iau} . "\""; } elsif ($ciwlib9_14_2::_tz) { $__ibc .= " value=\"" . $authlib9_14_2::_akn{$__iau} . "\""; } $__ibc .= " size=\"" . $__ibp . "\" id=\"" . $__iau . "_input\"> \n"; if ($__ibn && $__ibo eq "right") { $__ibc .= $__ibn; } } } } if ($authlib9_14_2::_ajg) { $__ibc .= "<!--LoadTestMode: <question><name>$__iau</name><type>cva</type>"; if (exists $__iat->{'_nu'}) { my $__ibm = $__iat->{'_nu'}; $__ibc .= "<subtype>single</subtype>"; if ($__ibm->{'_pj'} eq "numeric") { $__ibc .= "<inputtype>numeric</inputtype>"; } else { $__ibc .= "<inputtype>radio</inputtype>"; } } else { $__ibc .= "<subtype>pairwise</subtype>"; } $__ibc .= "<min>$__iay</min><max>$__iaz</max></question>-->\n"; } return $__ibc; } sub _vs { my ($__icc, $__icd, $__ice, $__icf) = @_; my $__ibz = $__icc->{'_if'}; my $__ica = $__icc->{'_uf'}; my $__icb = ""; if (exists $__ica->{'_s'}) { $__icb = "SSI_RadCheck(\"" . $__ibz . "\",\"" . $__ibz . "\",\""; if (exists $__ica->{'_ek'}) { $__icb .= $__ica->{'_ek'}; } $__icb .= "\"," . $__icf . ", true)"; push @{$__icd}, ($__icb); $__ice->{'_uu'} = 1; } elsif (exists $__ica->{'_nu'}) { if ($__ica->{'_nu'}->{'_pj'} eq "numeric") { $__icb = "SSI_NumCheck(\"" . $__ibz . "\",\"" . $__ibz . "\",\"" . ciwlib9_14_2::_sx($__ica->{'_ek'}) . "\", " . $__icf; $__icb .= ", true, "; authlib9_14_2::_adt($__ica); $__icb .= $__ica->{'_nu'}->{'_hx'} . ", " . $__ica->{'_nu'}->{'_ho'} . ", \"\""; $__icb .= ", false)"; push @{$__icd}, ($__icb); $__ice->{'_uw'} = 1; } } } sub _auz { my ($__icj, $__ick, $__icl, $__icm) = @_; my $__icg = $__ick->[$__icl]->{'_bac'}->[$__icm]->[0]; my $__ich = $__ick->[$__icl]->{'_bac'}->[$__icm]->[1]; my $__ici = ""; if ($__icg =~ m/^C-/i) { $__ici = $__ich; } else { if ($__ich ne "") { $__ici = $__icj->{'_ae'}->[$__icg]->{'_hf'}->[$__ich]; } } if ($__ici eq "") { $__ici = "&nbsp;"; } return $__ici; } sub _aze { my ($__ier, $__ies, $__iet) = @_; my $__icn = ""; my $__ico = 0; my $__icp = 0; my $__icq = 0; my $__icr = 0; my $__ics = 0; my @__ict = (); my @__icu = (); my $__icv = ""; my $__icw = 0; my $__icx = 0; my $__icy = $authlib9_14_2::_ahv{'_aml'}; my $__icz = 0; my $__ida = 0; my $__idb = 0; my $__idc = 0; my $__idd = 0; my $__ide = 0; my $__idf = 0; my $__idg = 0; my $__idh = 0; if ($__iet =~ m/^(.*?)_(\d+)/i) { $__icq = int($2); } my $__idi = $__icy . $authlib9_14_2::_akh . "_CVA" . $__ier->{'_el'} . "_" . $__ier->{'_dv'} . ".cgi"; my ($__ieu, $__iev) = authlib9_14_2::_yg($__idi, "read", 1, 1); binmode $__ieu; if (((-s $__idi) != $__ier->{'_ef'}) && !$authlib9_14_2::_amg) { close $__ieu; authlib9_14_2::_zq(153, "CVA design file error.", "The size of the CVA Design file (" . $__idi . ") does not match the size expected by the QST file. Try uploading the file again in binary mode.", ""); } my $__idj = 25; read ($__ieu, $__icv, $__idj); ($__icz, $__ida, $__idb, $__idc, $__idd, $__ide, $__idf, $__idg, $__idh) = unpack("VVVVCvvvv", $__icv); if ($__ida != $__ier->{'_el'}) { close $__ieu; authlib9_14_2::_zq(154, "CVA design file error.", "Exercise ID in CVA design file (" . $__idi . ") does not match exercise ID in the QST file.", ""); } elsif ($__idb != $__ier->{'_dv'}) { close $__ieu; authlib9_14_2::_zq(155, "CVA design file error.", "Design ID in CVA design file (" . $__idi . ") does not match design ID in the QST file.", ""); } $__icp = ($__ies - 1) % $__ide; _bgk($__ies, $__iet, $__ida, $__idb, $__icp, $__idd); $__ico = $__idj; $__icx = $__idg * $__idh; $__ico += ($__icp * $__idf * $__icx); $__ico += (($__icq - 1) * $__icx); seek ($__ieu, $__ico, 0); read $__ieu, $__icn, $__icx; @__ict = unpack("C*", $__icn); close $__ieu; my $__idk = $__ier->{'_lk'}; my $__idl = $__ier->{'_lj'}; my $__idm = 0; my @__idn = ("") x $__idh; my $__ido = 1; if ($__idk > 0) { $__idm = authlib9_14_2::_acm($__ies, $__idh, 32143, $__idk, $__idl); } else { for ($__icr = 0; $__icr < $__idh; $__icr++) { $__idn[$__icr] = $__icr; } $__idm = \@__idn; } my @__idp = ("") x 2; my @__idq = ("") x $__idg; my $__idr = 0; my $__ids = 0; my %__idt = (); my $__idu = 0; my $__idv = 0; my $__idw = 0; my $__idx = 0; my $__idy = 0; my @__idz = ("") x $__idh; if (exists $__ier->{'_dd'}) { $__idx = 1; $__idy = $__ier->{'_dd'}->{'_md'}; my $__iea = 0; if (exists $__ier->{'_dd'}->{'_gg'}) { foreach $__iea (@{$__ier->{'_dd'}->{'_gg'}}) { $__idt{$__iea - 1} = $__iea - 1; } } } for ($__icr = 0; $__icr < $__idg; $__icr++) { my @__ieb = (); for ($__ics = 0; $__ics < $__idh; $__ics++) { $__idu = 0; $__ids = $__idm->[$__ics]; $__idr = $__ict[($__idh * $__icr) + $__ids]; if ($__idx) { $__idz[$__ics] = $__ict[($__idh * $__icr) + $__ics]; } if (!exists $__idt{$__ids}) { if (exists $__ier->{'_no'}) { if ($__ier->{'_no'}->[$__ids] == $__idr) { $__idu = 1; } } if (!$__idu) { $__idp[0] = $__ids; $__idp[1] = $__idr; push @__ieb, [@__idp]; } } } if ($__idx) { my $__iec = 0; my $__ied = ""; my $__iee = 0; my $__ief = 0; my @__ieg = (); my $__ieh = 0; my $__iei = 0; my $__iej = 0; my $__iek = 0; my $__iel = 0; my $__iem = 0; my $__ien = 0; my $__ieo = 0; foreach $__iec (@{$__idy}) { $__iee = 0; $__ieh = @{$__iec->{'_ae'}}; for ($__iej = 0; $__iej < $__ieh; $__iej++) { $__iek = 0; $__iel = $__iec->{'_ae'}->[$__iej]; $__iei = $__idz[$__iel - 1]; $__iek = $__iei; for ($__iem = $__iej + 1; $__iem < $__ieh; $__iem++) { $__ien = $__iec->{'_ae'}->[$__iem]; $__ieo = @{$__ier->{'_ae'}->[$__ien - 1]->{'_hf'}}; $__iek *= $__ieo; } $__iee += $__iek; } $__ief = $__iec->{'_ja'}->[$__iee]; if ($__ief == 0) { $__ied = ""; } else { seek $authlib9_14_2::_ajm, $__ief, 0; $__ied = authlib9_14_2::_zi(1); } if ($__iec->{'_jx'} == -1) { push @__ieg, ["C-T", $__ied]; } elsif ($__iec->{'_jx'} == -2) { push @__ieb, ["C-B", $__ied]; } else { my $__iep = 0; my $__ieq = 0; foreach $__iep (@__ieb) { if ($__iep->[0] == ($__iec->{'_jx'} - 1)) { $__iep->[0] = "C-" . $__iep->[0]; $__iep->[1] = $__ied; $__ieq = 1; last; } } } } if (@__ieg > 0) { unshift @__ieb, @__ieg; } } $__idq[$__icr] = {'_bac'=>[@__ieb], '_pt'=>($__icr + 1)}; if ($__idw < @__ieb) { $__idw = @__ieb; $__idv = $__icr; } } return (\@__idq, $__icp, $__idv); } sub _bgk { my ($__ifg, $__ifh, $__ifi, $__ifj, $__ifk, $__ifl) = @_; my $__iew = ""; my @__iex = (); my $__iey = $__ifh; $__iey =~ s/_(.*?)$//; my $__iez = "sys_CVADesignID_" . $__iey; my $__ifa = "CVA" . $__ifi . "_" . $__ifj . "_" . $__ifl; my $__ifb = authlib9_14_2::_ws($__iez); if ($__ifb ne "") { if ($__ifl == 1) { if ($__ifb !~ m/^(.*?)_(\d+)_(\d+)$/ig) { $__ifa =~ s/^(.*?)_(\d+)$/$1/; } } if ($__ifb ne $__ifa) { my $__ifc = "sys_CVADesignError_" . $__iey; if (authlib9_14_2::_ws($__ifc) eq "") { my $__ifd = "CVA Design Error: This data record contains data from two different CVA designs. " . $__ifa; authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, $__ifd); push @__iex, [$__ifc, $__ifd]; } } } else { push @__iex, [$__iez, $__ifa]; } my $__ife = "sys_CVAVersion_" . $__iey; my $__iff = $__ifk + 1; if (authlib9_14_2::_ws($__ife) eq "") { push @__iex, [$__ife, $__iff]; } if (@__iex && !$authlib9_14_2::_amg) { authlib9_14_2::_xj(\@__iex, $__ifg, 0); } return $__iew; } sub _bgl { my ($__ifp, $__ifq, $__ifr) = @_; my @__ifm = ('_fn', '_fo', '_je', '_er'); my $__ifn = ""; my $__ifo = ""; foreach $__ifn (@__ifm) { if (exists $__ifp->{$__ifn}) { $__ifo = authlib9_14_2::_acq($__ifp->{$__ifn}->{'_op'}); $__ifp->{$__ifn}->{'_op'} = _bgm($__ifo, $__ifq, $__ifr); } } } sub _bgm { my ($__ift, $__ifu, $__ifv) = @_; $__ifv++; my $__ifs = "D - " . $__ifv . ", T - " . $__ifu; $__ift =~ s/\[%CVAVERSION\(\)%\]/$__ifs/gi; return $__ift; } return 1;
