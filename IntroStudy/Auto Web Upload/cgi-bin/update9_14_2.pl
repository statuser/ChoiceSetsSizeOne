#!/usr/bin/perl

# ---------------------------------------------------------------------------
#     UPDATE.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
 use strict; package update9_14_2; sub _bug { my ($__okc, $__okd) = @_; my $__ojp = 0; if ($__okc < 6) { my $__ojq = 1; my $__ojr = ""; my $__ojs = ""; my %__ojt = (); _buj(); my ($__oke, $__okf) = _bul("sys_StartTime"); if ($__oke) { $__ojt{"sys_StartTime"} = ["sys_StartTimeStamp", "INT"]; ($__ojq, $__ojr, $__ojs) = ssiwebadmin9_14_2::_brs(\%__ojt, $authlib9_14_2::_akj . "_data" . $__oke); %__ojt = (); } if ($__ojq) { ($__oke, $__okf) = _bul("sys_StartTime"); if ($__oke) { $__ojt{"sys_EndTime"} = ["sys_EndTimeStamp", "INT"]; ($__ojq, $__ojr, $__ojs) = ssiwebadmin9_14_2::_brs(\%__ojt, $authlib9_14_2::_akj . "_data" . $__oke); } } if ($__ojq) { if ($ssiwebadmin9_14_2::_btt) { ($__ojq, $__ojr, $__ojs) = _bun(); } } if ($__ojq) { if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { eval { authlib9_14_2::_wo($authlib9_14_2::_akj ."_clists", $authlib9_14_2::_akj ."_clists_index"); $authlib9_14_2::_ake->do('ALTER TABLE "' . $authlib9_14_2::_akj . '_clists" ALTER COLUMN "list_name" NVARCHAR(255) NOT NULL'); $authlib9_14_2::_ake->do('ALTER TABLE "' . $authlib9_14_2::_akj . '_clists" ADD PRIMARY KEY ("sys_RespNum", "list_name")'); authlib9_14_2::_wo($authlib9_14_2::_akj ."_history", $authlib9_14_2::_akj ."_history_index"); $authlib9_14_2::_ake->do('ALTER TABLE "' . $authlib9_14_2::_akj . '_history" ALTER COLUMN "ipaddress" NVARCHAR(128) NOT NULL'); $authlib9_14_2::_ake->do('ALTER TABLE "' . $authlib9_14_2::_akj . '_history" ADD PRIMARY KEY ("sys_RespNum", "hop")'); $authlib9_14_2::_ake->do('CREATE NONCLUSTERED INDEX "' . $authlib9_14_2::_akj . '_history_questname_index" ON "' . $authlib9_14_2::_akj . '_history" ("quest_name")'); $authlib9_14_2::_ake->do('CREATE NONCLUSTERED INDEX "' . $authlib9_14_2::_akj . '_history_questversion_index" ON "' . $authlib9_14_2::_akj . '_history" ("quest_version")'); $authlib9_14_2::_ake->do('CREATE NONCLUSTERED INDEX "' . $authlib9_14_2::_akj . '_history_pagenum_index" ON "' . $authlib9_14_2::_akj . '_history" ("page_num")'); $authlib9_14_2::_ake->do('CREATE NONCLUSTERED INDEX "' . $authlib9_14_2::_akj . '_history_limbo_index" ON "' . $authlib9_14_2::_akj . '_history" ("limbo")'); $authlib9_14_2::_ake->do('ALTER TABLE "' . $authlib9_14_2::_akj . '_design_log" ALTER COLUMN "ipaddress" NVARCHAR(128) NOT NULL'); $authlib9_14_2::_ake->do("sp_rename '" . $authlib9_14_2::_akj . "_admin_log.ip_address', 'ipaddress', 'COLUMN'"); $authlib9_14_2::_ake->do('ALTER TABLE "' . $authlib9_14_2::_akj . '_admin_log" ALTER COLUMN "ipaddress" NVARCHAR(128)'); $authlib9_14_2::_ake->do('ALTER TABLE "'. $authlib9_14_2::_akj . '_info" ADD "capi_deviceid" CHAR(36)'); $authlib9_14_2::_ake->commit(); }; } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { eval { authlib9_14_2::_wo($authlib9_14_2::_akj ."_clists", $authlib9_14_2::_akj ."_clists_index"); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_clists` MODIFY COLUMN `list_name` VARCHAR(255) NOT NULL'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_clists` ADD PRIMARY KEY (`sys_RespNum`, `list_name`)'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_clists` ENGINE=INNODB'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_clists` ROW_FORMAT=DYNAMIC'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_clists` CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci'); authlib9_14_2::_wo($authlib9_14_2::_akj ."_history", $authlib9_14_2::_akj ."_history_index"); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_history` MODIFY COLUMN `ipaddress` VARCHAR(128) NOT NULL'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_history` ADD PRIMARY KEY (`sys_RespNum`, `hop`)'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_history` ENGINE=INNODB'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_history` CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_history` ROW_FORMAT=DYNAMIC'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_questname_index` ON `' . $authlib9_14_2::_akj . '_history` (`quest_name`)'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_questversion_index` ON `' . $authlib9_14_2::_akj . '_history` (`quest_version`)'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_pagenum_index` ON `' . $authlib9_14_2::_akj . '_history` (`page_num`)'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_limbo_index` ON `' . $authlib9_14_2::_akj . '_history` (`limbo`)'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_design_log` MODIFY COLUMN `ipaddress` VARCHAR(128) NOT NULL'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_design_log` ENGINE=INNODB'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_design_log` ROW_FORMAT=DYNAMIC'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_design_log` CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_admin_log` CHANGE `ip_address` `ipaddress` VARCHAR(128)'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_admin_log` ENGINE=INNODB'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_admin_log` ROW_FORMAT=DYNAMIC'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_admin_log` CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_info` ADD COLUMN `capi_deviceid` CHAR(36)'); my $__oju = $authlib9_14_2::_ahn->{'_amk'}; my $__ojv = $authlib9_14_2::_ake->prepare("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=? AND ENGINE='MyISAM' AND TABLE_NAME LIKE ?"); my $__ojw = $authlib9_14_2::_ake->prepare("SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA=? AND TABLE_NAME=?"); $__ojv->execute($__oju, $authlib9_14_2::_akj . "_%"); while (my $__ojx = $__ojv->fetchrow_arrayref()) { $__ojw->execute($__oju, $__ojx->[0]); my $__ojy = $__ojw->fetchrow_arrayref()->[0]; if ($__ojy <= $authlib9_14_2::_ahn->{'_amh'}) { $authlib9_14_2::_ake->do('ALTER TABLE `' . $__ojx->[0] . '` ENGINE=INNODB'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $__ojx->[0] . '` ROW_FORMAT=DYNAMIC'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $__ojx->[0] . '` CONVERT TO CHARACTER SET utf8 COLLATE utf8_unicode_ci'); } } $__ojw->finish; $__ojv->finish; $authlib9_14_2::_ake->commit(); }; } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { eval { authlib9_14_2::_wo($authlib9_14_2::_akj ."_clists", $authlib9_14_2::_akj ."_clists_index"); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_clists` RENAME TO `' . $authlib9_14_2::_akj . '_old_clists`'); $authlib9_14_2::_ake->do('CREATE TABLE `' . $authlib9_14_2::_akj . '_clists` (`sys_RespNum` INT NOT NULL, `list_name` TEXT COLLATE NOCASE NOT NULL, `value` TEXT NOT NULL, PRIMARY KEY(`sys_RespNum`, `list_name`))'); $authlib9_14_2::_ake->do('INSERT INTO `' . $authlib9_14_2::_akj . '_clists` SELECT * FROM `' . $authlib9_14_2::_akj . '_old_clists`'); $authlib9_14_2::_ake->do('DROP TABLE `' . $authlib9_14_2::_akj . '_old_clists`'); authlib9_14_2::_wo($authlib9_14_2::_akj ."_history", $authlib9_14_2::_akj ."_history_index"); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_history` RENAME TO `' . $authlib9_14_2::_akj . '_old_history`'); $authlib9_14_2::_ake->do('CREATE TABLE `' . $authlib9_14_2::_akj . '_history` (`sys_RespNum` INT NOT NULL, `hop` INT NOT NULL, `ipaddress` TEXT COLLATE NOCASE NOT NULL, `user_agent` TEXT NOT NULL, `timestamp` INT NOT NULL, `qst_version` TEXT COLLATE NOCASE NOT NULL, `quest_name` TEXT COLLATE NOCASE NOT NULL, `quest_version` TEXT COLLATE NOCASE NOT NULL, `page_num` INT NOT NULL, `limbo` INT NOT NULL, `data` TEXT COLLATE NOCASE NOT NULL, PRIMARY KEY(`sys_RespNum`, `hop`))'); $authlib9_14_2::_ake->do('INSERT INTO `' . $authlib9_14_2::_akj . '_history` SELECT * FROM `' . $authlib9_14_2::_akj . '_old_history`'); $authlib9_14_2::_ake->do('DROP TABLE `' . $authlib9_14_2::_akj . '_old_history`'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_questname_index` ON `' . $authlib9_14_2::_akj . '_history` (`quest_name`)'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_questversion_index` ON `' . $authlib9_14_2::_akj . '_history` (`quest_version`)'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_pagenum_index` ON `' . $authlib9_14_2::_akj . '_history` (`page_num`)'); $authlib9_14_2::_ake->do('CREATE INDEX `' . $authlib9_14_2::_akj . '_history_limbo_index` ON `' . $authlib9_14_2::_akj . '_history` (`limbo`)'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_admin_log` RENAME TO `' . $authlib9_14_2::_akj . '_old_admin_log`'); $authlib9_14_2::_ake->do('CREATE TABLE `' . $authlib9_14_2::_akj .'_admin_log` (`date` TEXT COLLATE NOCASE NOT NULL, `action` TEXT COLLATE NOCASE NOT NULL, `info` TEXT COLLATE NOCASE, `ipaddress` TEXT COLLATE NOCASE, `user_agent` TEXT COLLATE NOCASE, `time_stamp` INT)'); $authlib9_14_2::_ake->do('INSERT INTO `' . $authlib9_14_2::_akj . '_admin_log` SELECT * FROM `' . $authlib9_14_2::_akj . '_old_admin_log`'); $authlib9_14_2::_ake->do('DROP TABLE `' . $authlib9_14_2::_akj . '_old_admin_log`'); $authlib9_14_2::_ake->do('ALTER TABLE `' . $authlib9_14_2::_akj . '_info` ADD COLUMN `capi_deviceid` TEXT COLLATE BINARY'); $authlib9_14_2::_ake->commit(); }; } else { return (1, "Unsupported database driver", "Unsupported database driver " . $authlib9_14_2::_ahn->{'_pj'}, 0); } } if (!$__ojq) { return (1, $__ojr, $__ojs, 0); } if ($@) { return (1, "An error occurred while updating the database.", $@, 0); } } if ($__okc < 7) { if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { eval { $authlib9_14_2::_ake->do('ALTER TABLE "'. $authlib9_14_2::_akj . '_info" ADD "local_test_mode" BIT'); $authlib9_14_2::_ake->commit(); }; } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { eval { $authlib9_14_2::_ake->do('ALTER TABLE `'. $authlib9_14_2::_akj . '_info` ADD COLUMN `local_test_mode` TINYINT(1)'); $authlib9_14_2::_ake->commit(); }; } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { eval { $authlib9_14_2::_ake->do('ALTER TABLE `'. $authlib9_14_2::_akj . '_info` ADD COLUMN `local_test_mode` INT'); $authlib9_14_2::_ake->commit(); }; } else { return (1, "Unsupported database driver", "Unsupported database driver " . $authlib9_14_2::_ahn->{'_pj'}, 0); } if ($@) { return (1, "An error occurred while updating the database.", $@, 0); } } if ($__okc < 8) { my $__ojz = "ALTER TABLE `" . $authlib9_14_2::_akj . "_info` ADD `log_last_viewed` INT NOT NULL DEFAULT 0"; eval { my $__oka = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ojz, 0)); $__oka->execute(); }; if ($@) { return (1, "An error occurred while updating the database.", $@, 0); } my $__okb = $authlib9_14_2::_ahv{'_aml'} . "error_log.cgi"; if (-e $__okb) { rename $__okb, $authlib9_14_2::_ahv{'_aml'} . "error_log_BAK_" . time() . ".cgi"; } my ($__okg, $__okh) = ssiwebadmin9_14_2::_brb(); if ($__okg) { return (1, $__okg, $__okh, 0); } } if ($__okc < 9) { $__ojp = 1; } if ($__okc < 10) { my ($__okg, $__okh) = ssiwebadmin9_14_2::_brc(); if ($__okg) { return (1, $__okg, $__okh, 0); } } if ($__okc < 11) { my ($__oki, $__okj) = ssiwebadmin9_14_2::_bre(); if ($__oki) { return (1, $__oki, $__okj, 0); } } if ($__okc < 12) { $__ojp = 1; } return (0, "", "", $__ojp); } sub _buh { my ($__oku, $__okv) = @_; my $__okk = 0; my $__okl = ""; my $__okm = ""; my $__okn = ""; if ($__oku <= 6) { my $__oko = 0; my $__okp = 0; ($__oko, $__okn) = authlib9_14_2::_xk("sys_ElapsedTime"); ($__okp, $__okn) = authlib9_14_2::_xk("sys_StartTimeStamp"); if ($__oko && $__okp) { my $__okq = $authlib9_14_2::_akj . "_data" . $__oko; my $__okr = $authlib9_14_2::_akj . "_data" . $__okp; if ($__oko != $__okp) { $__okn = "UPDATE `" . $__okq . "` SET `sys_ElapsedTime` = "; $__okn .= "(SELECT " . $__okr . ".`sys_EndTimeStamp` - " . $__okr . ".`sys_StartTimeStamp` "; $__okn .= "FROM `" . $__okr . "` WHERE " . $__okr . ".`sys_RespNum` = "; $__okn .= $__okq . ".`sys_RespNum`)"; } else { $__okn = "UPDATE `" . $__okr . "`"; $__okn .= " SET `sys_ElapsedTime` = `sys_EndTimeStamp` - `sys_StartTimeStamp`"; } eval { my $__oks = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__okn, 0)); $__oks->execute(); }; if ($@) { $__okk = 1; $__okl = "Error updating data. $__okn"; $__okm = $@; } } } if ($__oku < 12) { eval { my ($__okw, $__okx) = authlib9_14_2::_xk("sys_RespRemoved"); my $__okt = "`$authlib9_14_2::_akj\_data$__okw`"; $__okn = "UPDATE $__okt SET `sys_RespRemoved` = 0;"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__okn, 0)); }; if ($@) { $__okk = 1; $__okl = "Error updating data. $__okn"; $__okm = $@; } } return ($__okk, $__okl, $__okm); } sub _bui { my ($__old) = @_; my $__oky = 0; my $__okz = ""; my $__ola = ""; eval { my $__olb = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `data_version`=" . $__old; my $__olc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__olb, 0)); $__olc->execute(); }; if ($@) { $__oky = 1; $__okz = "Database error. Cannot update info table."; $__ola = $@; } else { $authlib9_14_2::_akm->{"data_version"} = $__old; } return ($__oky, $__okz, $__ola); } sub _buj { my $__ole = $authlib9_14_2::_ake->selectrow_arrayref(authlib9_14_2::_wn('SELECT COUNT(*) FROM `'. $authlib9_14_2::_akj .'_clists` GROUP BY `sys_RespNum`,`list_name` HAVING COUNT(*) > 1', 0)); if (defined $__ole) { my $__olf = {}; my $__olg = {}; my @__olh = (); my $__oli = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn('SELECT *,COUNT(*) FROM `'. $authlib9_14_2::_akj .'_clists` GROUP BY `sys_RespNum`,`list_name`,`value` ORDER BY `sys_RespNum`,`list_name`', 0)); $__oli->execute(); while (my $__olj = $__oli->fetchrow_hashref()) { if (exists $__olf->{$__olj->{"sys_RespNum"}}->{$__olj->{"list_name"}}) { push(@{$__olg->{$__olj->{"sys_RespNum"}}->{$__olj->{"list_name"}}}, $__olj->{"value"}); } else { $__olf->{$__olj->{"sys_RespNum"}}->{$__olj->{"list_name"}} = $__olj->{"value"}; if ($__olj->{"COUNT(*)"} > 1) { push(@__olh, $__olj); } } } $__oli->finish; if (keys %{$__olg}) { my $__olk = "The following respondents have multiple entries for the same list name but different list values: "; my $__oll = ""; foreach my $__olm (sort keys %{$__olg}) { $__olk .= $__oll; $__oll = ", "; $__olk .= "Respondent '$__olm' "; foreach my $__oln (sort keys %{$__olg->{$__olm}}) { $__olk .= "List '$__oln' has values: '". $__olf->{$__olm}->{$__oln} ."'"; foreach my $__olo (@{$__olg->{$__olm}->{$__oln}}) { $__olk .= " and '$__olo'"; } } } $__olk .= ". The issue must be resolved before an update can be performed on the study. Please contact Sawtooth Software for additional support."; authlib9_14_2::_zq(318, "Update cannot be performed on the study", $__olk, "Can't add primary key to table '". $authlib9_14_2::_akj ."_clists' because duplicate keys exist"); } $__oli = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn('DELETE FROM `'. $authlib9_14_2::_akj .'_clists` WHERE `sys_RespNum`=? AND `list_name`=?', 0)); my $__olp = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn('INSERT INTO `'. $authlib9_14_2::_akj .'_clists` (`sys_RespNum`, `list_name`, `value`) VALUES(?, ?, ?)')); foreach my $__olj (@__olh) { $__oli->execute($__olj->{'_buo'}, $__olj->{'_hj'}); $__olp->execute($__olj->{'_buo'}, $__olj->{'_hj'}, $__olj->{'_pt'}); } $__oli->finish; $__olp->finish; $authlib9_14_2::_ake->commit(); } my $__olq = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn('SELECT `sys_RespNum`,`hop`,COUNT(*) FROM `'. $authlib9_14_2::_akj .'_history` GROUP BY `sys_RespNum`,`hop` HAVING COUNT(*) > 1', 0), {Slice=>{}}); if (@{$__olq}) { my $__olk = "The following respondents have multiple entries for the same history row: "; my $__oll = ""; foreach my $__olj (@{$__olq}) { $__olk .= $__oll; $__olk .= " Respondent '". $__olj->{"sys_RespNum"} . "' Hop '". $__olj->{"hop"} . "' has '". $__olj->{"COUNT(*)"} . "' entries"; $__oll = ", "; } $__olk .= ". The issue must be resolved before an update can be performed on the study. Please contact Sawtooth Software for additional support."; authlib9_14_2::_zq(319, "Update cannot be performed on the study", $__olk, "Can't add primary key to table '". $authlib9_14_2::_akj ."_history' because duplicate keys exist"); } } sub _buk() { $authlib9_14_2::_akj = authlib9_14_2::_aem(); my ($__olt, $__olu, $__olv, $__olw) = authlib9_14_2::_xq(0); if ($__olt) { my $__olr = 0; my $__ols = 0; ($__olr, $__olu, $__olv, $__ols) = update9_14_2::_bug($authlib9_14_2::_akm->{"data_version"}, $ssiwebadmin9_14_2::_btn); if ($__olr) { authlib9_14_2::_zq(344, "Database update error.", $__olv, ""); } ($__olr, $__olu, $__olv) = update9_14_2::_buh($authlib9_14_2::_akm->{"data_version"}, $ssiwebadmin9_14_2::_btn); if (!$__olr) { ($__olr, $__olu, $__olv) = update9_14_2::_bui($ssiwebadmin9_14_2::_btn); } } $authlib9_14_2::_akj = $authlib9_14_2::_akh; ($__olt, $__olu, $__olv, $__olw) = authlib9_14_2::_xq(0); if (!$__olt) { authlib9_14_2::_zq(345, "Database update error.", $__olv, ""); } } sub _bul { my ($__omn, $__omo, $__omp) = @_; my $__olx = 0; my $__oly = $authlib9_14_2::_akm->{"num_data_tables"}; my $__olz = 0; my $__oma = ""; my $__omb = 0; my $__omc = ""; my $__omd = ""; $__oma = "SELECT * FROM `" . $authlib9_14_2::_akj . "_map` WHERE `fields` LIKE '%" . $__omn; my $__ome = $__omn; my $__omf = 0; if ($__omo) { $__ome .= '.'; $__oma .= '.'; $__omf = sub { return $_[0] =~ m/(?>^|,)\Q$__ome\E/i; }; } else { $__omf = sub { return $_[0] =~ m/(?>^|,)\Q$__omn\E(?>,|$)/i; }; } $__oma .= "%';"; eval { $__omb = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__oma, 0), {Slice => {}}); my $__omg = @{$__omb}; if ($__omg > 1) { for ($__olz = 0; $__olz < $__omg; $__olz++) { if ($__omf->($__omb->[$__olz]->{"fields"})) { $__olx = $__omb->[$__olz]->{"table"}; last; } } } elsif ($__omg > 0) { if ($__omf->($__omb->[0]->{"fields"})) { $__olx = $__omb->[0]->{"table"}; } } }; if ($@) { authlib9_14_2::_zq(346, "Database error.", "Database error. Cannot select map row.", $@); } if ($__olx && $__omp) { my $__omh = 0; my $__omi = ""; if ($__omn =~ m/^(.*?)_/i) { $__omi = $1; if ($__omn =~ m/^sys_/i) { if ($__omn =~ m/^(sys_.*?)_/i) { $__omi = $1; $__omh = 1; if ($__omn =~ m/^(sys_ACBC_.*?)_/i) { $__omi = $1; $__omh = 1; } } } else { $__omh = 1; } } if ($__omh) { my @__omj = (); my $__omk = 0; my $__oml = ""; my $__omm = 0; while ($__omc =~ m/,($__omi[^,]*)/g) { $__oml = $1; push @__omj, $__oml; $__omk++; if ($__omo) { if ($__oml =~ m/^$__omn\./) { $__omm = 1; } } else { if ($__oml eq $__omn) { $__omm = 1; } } if ($__omk == 100) { last; } } if ($__omm) { $__omd = "`" . join("`,`", @__omj) . "`"; } else { $__omd = "`" . $__omn . "`"; } } else { $__omd = "`" . $__omn . "`"; } } return ($__olx, $__omd); } sub _bum { my @__omq = (); my $__omr = "SELECT * FROM `" . $authlib9_14_2::_akj . "_map`"; eval { my $__oms = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__omr, 0), {Slice => {}}); my $__omt = @{$__oms}; my $__omu = 0; my $__omv = ""; for ($__omu = 0; $__omu < $__omt; $__omu++) { $__omv = $__oms->[$__omu]->{"fields"}; push @__omq, split(",", $__omv); } }; if ($@) { authlib9_14_2::_zq(348, "Database error.", "Database error. Cannot select map row.", $@); } return \@__omq; } sub _bun { my $__omw = ""; my $__omx = ""; my %__omy = (); my $__omz = _bum(); my $__ona = 1; my $__onb = ""; my $__onc = ""; foreach $__omw(@{$__omz}) { %__omy = (); if ($__omw =~ m/^(.*?_Rating\d+_)(\d+)/i) { $__omx = $1 . "r" . $2; my ($__ond, $__one) = _bul($__omw); if ($__ond) { $__omy{$__omw} = [$__omx, "INT"]; ($__ona, $__onb, $__onc) = ssiwebadmin9_14_2::_brs(\%__omy, $authlib9_14_2::_akj . "_data" . $__ond); } } } return ($__ona, $__onb, $__onc); } 1;
