#!/usr/bin/perl

# ---------------------------------------------------------------------------
#     ADMIN.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
 use strict; use JSON::PP; use File::Copy; use Digest::SHA; ssiwebadmin9_14_2::_blw(); package ssiwebadmin9_14_2; %ssiwebadmin9_14_2::_btf = (); $ssiwebadmin9_14_2::_btg = ""; $ssiwebadmin9_14_2::_btz = 0; $ssiwebadmin9_14_2::_bua = 0; $ssiwebadmin9_14_2::_bts = ""; $ssiwebadmin9_14_2::_btt = 0; $ssiwebadmin9_14_2::_btq = 0; $ssiwebadmin9_14_2::_btm = 0; $ssiwebadmin9_14_2::_btn = 0; $ssiwebadmin9_14_2::_bto = ""; sub _blv { %ssiwebadmin9_14_2::_btf = (); $ssiwebadmin9_14_2::_btg = ""; $ssiwebadmin9_14_2::_btz = 0; $ssiwebadmin9_14_2::_bua = 0; $ssiwebadmin9_14_2::_bts = ""; $ssiwebadmin9_14_2::_btt = 0; $ssiwebadmin9_14_2::_btq = 0; $ssiwebadmin9_14_2::_btm = 1; $ssiwebadmin9_14_2::_btn = 12; $ssiwebadmin9_14_2::_bto = "<br><br>\n\n<center>\n<h3>\nThis survey is closed. Thank you.\n</h3>\n</center>"; } sub _blw { _blv(); my $__loi = ""; if ((exists($ENV{'SCRIPT_FILENAME'}) || (defined ($ENV{'SCRIPT_FILENAME'})))) { $__loi = $ENV{'SCRIPT_FILENAME'}; } if ($__loi eq "") { $__loi = $ENV{'PATH_TRANSLATED'}; $__loi =~ tr[\\][/]; } if ($ENV{'PERLXS'} =~ m/PerlIS/i) { print "HTTP/1.1 200 OK\n"; } $__loi =~ s/(.+)\/.+$/$1/; if ((exists($ENV{'SSI_UTF16'}) || (defined ($ENV{'SSI_UTF16'})))) { require Win32; utf8::decode($__loi); $__loi = Win32::GetShortPathName($__loi); $__loi =~ tr/\\/\//; } unshift @INC, $__loi; _qk("authlib9_14_2.pl"); authlib9_14_2::_wc(0); $authlib9_14_2::_ajx = 1; $authlib9_14_2::_aiz = $__loi; authlib9_14_2::_wv(); authlib9_14_2::_yk(); my $__loj = authlib9_14_2::_xi(1); if (exists $authlib9_14_2::_akn{"s"}) { my $__lok = $authlib9_14_2::_akn{"s"}; $__lok =~ s/(\d{2})/$1,/g; my @__lol = split(",", $__lok); my @__lom = map {chr($_ + 30)} @__lol; my @__lon = split("&", join("", @__lom)); foreach my $__loo (@__lon) { my ($__lpk, $__lpd) = split("=", $__loo); $authlib9_14_2::_akn{$__lpk} = $__lpd; } } if (exists $authlib9_14_2::_akn{"hid_page"}) { if ($authlib9_14_2::_akn{"hid_page"} !~ m/^[a-z0-9_]*$/i) { authlib9_14_2::_acg(&authlib9_14_2::_AOU, 0, "hid_page contains an invalid character: " . $authlib9_14_2::_akn{"hid_page"}); delete $authlib9_14_2::_akn{"hid_page"}; } if ($authlib9_14_2::_akn{"hid_page"} eq "test_survey_admin") { $authlib9_14_2::_akn{"hid_admin_test_mode"} = 1; } elsif ($authlib9_14_2::_akn{"hid_page"} eq "test_survey_return" || $authlib9_14_2::_akn{"hid_page"} eq "test_survey_return2") { delete $authlib9_14_2::_akn{"hid_admin_test_mode"}; } } if (exists $authlib9_14_2::_akn{"hid_api"}) { $authlib9_14_2::_ajz = 1; if (exists $authlib9_14_2::_akn{"studyname"}) { $authlib9_14_2::_akh = $authlib9_14_2::_akn{"studyname"}; } } elsif (exists $authlib9_14_2::_akn{"hid_studyname"}) { $authlib9_14_2::_akh = $authlib9_14_2::_akn{"hid_studyname"}; } else { $authlib9_14_2::_akh = authlib9_14_2::_zs(); } $ssiwebadmin9_14_2::_bts = $authlib9_14_2::_akh; $authlib9_14_2::_akj = $authlib9_14_2::_akh; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"}) { $authlib9_14_2::_akj = authlib9_14_2::_aem(); } authlib9_14_2::_zl($__loi); if ($__loj ne "") { authlib9_14_2::_acg(&authlib9_14_2::_AOU, 0, $__loj); } my $__lop = _bol(); my $__loq = ""; my $__lor = 0; my $__los = ""; $authlib9_14_2::_ajw = authlib9_14_2::_xs(); my $__lot = ""; if (-e $authlib9_14_2::_ahv{'_ams'} . "custom_admin_style.css") { $ssiwebadmin9_14_2::_btq = 1; } ($__lor, $__lot) = _bom($__lop); my $__lou = 0; my $__lov = ""; my $__low = ""; my $__lox = ""; my $__loy = ""; my $__loz = ""; my $__lpa = 0; my $__lpb = 0; my $__lpc = 0; if ($__lor) { if (exists $authlib9_14_2::_akn{"hid_page"}) { $__lov = $authlib9_14_2::_akn{"hid_page"}; } elsif (exists $authlib9_14_2::_akn{"hid_api"}) { $__low = $authlib9_14_2::_akn{"hid_api"}; if ($__low !~ m/^[a-z0-9_]*$/i) { authlib9_14_2::_acg(&authlib9_14_2::_AOU, 0, "hid_api contains an invalid character: " . $__low); $__low = ""; delete $authlib9_14_2::_akn{"hid_api"}; } if ($__low eq "get_version") { my $__lpd = $authlib9_14_2::_aia; $__lpd =~ s/_/./og; _bsr(1, "version", $__lpd, 1); } } if ($__lov || $__low) { my ($__lpl, $__lpm, $__lpn) = authlib9_14_2::_wd($authlib9_14_2::_ajw); if (!$__lpl) { if ($__low eq "delete_db_tables" || $__low eq "setup_check") { _bsr(0, "error", $__lpm, 1); } else { $__lov = "setup"; } } else { ($__lpl, $__lpm, $__lpn, $__lpc) = authlib9_14_2::_xq(0); if (!$__lpl) { if ($__low eq "setup_check") { _bsq($__lpc, $__lpm); } elsif ($__low eq "delete_db_tables") { _bsr(0, "error", "Either the tables are already deleted or there is an error reading the info table.", 1); } else { $__lov = "setup"; } } } if ($__lov eq "setup") { $__loq .= _bqv(0, 1, 0, 0, 0); $__lpb = 1; } else { ($__lox, $__loz, $__loy, $__lpa) = authlib9_14_2::_yl(0, 0, ""); if ($__lpa) { ($__loq, $__lpa) = _bru($__lox, 1); if ($authlib9_14_2::_akp && exists $authlib9_14_2::_akp->{'_bp'}) { $ssiwebadmin9_14_2::_btt = 1; } if ($ssiwebadmin9_14_2::_bua) { if (!$__low) { _brv($__lox, $__loz, 1); } } } else { if (exists $authlib9_14_2::_akp->{'_r'}) { $ssiwebadmin9_14_2::_bts = $authlib9_14_2::_akp->{'_r'}; } if (exists $authlib9_14_2::_akp->{'_bp'}) { $ssiwebadmin9_14_2::_btt = 1; } if ($__lot) { _bsg("Log In", "User \"" . $__lot . "\" logged in.", 0); } if ($__lov eq "download_data_builder") { if (exists $ssiwebadmin9_14_2::_btf{"download_data"}) { my $__lpe = $authlib9_14_2::_akn{"with_completes"}; my $__lpf = $authlib9_14_2::_akn{"with_incompletes"}; my $__lpg = $authlib9_14_2::_akn{"with_disqualified"}; if ($authlib9_14_2::_aku) { $__lpe = 1; $__lpf = 1; $__lpg = 1; } my $__lph = $authlib9_14_2::_akn{"with_removed"}; _bnv($__lpe, $__lpf, $__lpg, $__lph); $__lou = 1; } } elsif (( $__lov eq "password_report_not_started" || $__lov eq "password_report_not_finished" || $__lov eq "password_report_completes" || $__lov eq "password_report_disqualified") && (exists $ssiwebadmin9_14_2::_btf{"password_reports"})) { _bos($__lov); $__lou = 1; } elsif ($__lov eq "download_data_report") { $__lou = 1; } elsif ($__lov eq "download_history_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("history"); $__lou = 1; } elsif ($__lov eq "download_admin_log_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("admin_log"); $__lou = 1; } elsif ($__lov eq "download_survey_log_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("survey_log"); $__lou = 1; } elsif ($__lov eq "download_clists_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("clists"); $__lou = 1; } elsif ($__lov eq "download_info_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("info"); $__lou = 1; } elsif ($__lov eq "download_map_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("map"); $__lou = 1; } elsif ($__lov eq "download_design_log_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("design_log"); $__lou = 1; } elsif ($__lov eq "download_url_restore_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("url_restore"); $__lou = 1; } elsif ($__lov eq "download_maxdiff_banditdata_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("maxdiff_banditdata"); $__lou = 1; } elsif ($__lov eq "download_passwords_table" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("passwords"); $__lou = 1; } elsif ($__lov =~ m/^download_data(\d+)_table$/i && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { _bsi("data" . $1); $__lou = 1; } } } if ($authlib9_14_2::_ajz) { if ($__low eq "status" && (exists $ssiwebadmin9_14_2::_btf{"study_summary"})) { _bme(); } elsif ($__low eq "pause" && (exists $ssiwebadmin9_14_2::_btf{"close_survey"})) { _bsj(1); } elsif ($__low eq "unpause" && (exists $ssiwebadmin9_14_2::_btf{"close_survey"})) { _bsj(0); } elsif ($__low eq "download_all" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsk(); } elsif ($__low eq "get_num_data_tables" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsl(); } elsif ($__low eq "download_db_table" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsm(); } elsif ($__low eq "new_errors_exist" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsn(); } elsif ($__low eq "get_survey_log" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bso(); } elsif ($__low eq "setup_check" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsq($__lpc, $__lpm); } elsif ($__low eq "apply_changes" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsp($__lox, $__loz); } elsif ($__low eq "add_passwords" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bss(); } elsif ($__low eq "reset_survey" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bst(); } elsif ($__low eq "delete_db_tables" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { _bsu(); } else { _bsr(0, "error", "Command not available", 1); } } else { my $__lpi = 1; if ($__lov eq "study_summary" && (exists $ssiwebadmin9_14_2::_btf{"study_summary"})) { $__loq .= _blz(); } elsif ($__lov eq "download_data" && (exists $ssiwebadmin9_14_2::_btf{"download_data"})) { $__loq .= _bmh(); } elsif ($__lov eq "view_data_search_list" && (exists $ssiwebadmin9_14_2::_btf{"view_data"})) { $authlib9_14_2::_akn{"filter_object"} = undef; $authlib9_14_2::_akn{"filter_list_object"} = undef; $__loq .= _bmn(); } elsif (($__lov eq "view_all_data" || $__lov eq "clear_filters_button") && (exists $ssiwebadmin9_14_2::_btf{"view_data"})) { $authlib9_14_2::_akn{"filter_object"} = undef; $authlib9_14_2::_akn{"filter_list_object"} = undef; $__loq .= _bmn(); } elsif ($__lov eq "search_data" && (exists $ssiwebadmin9_14_2::_btf{"view_data"})) { $__loq .= _boe("Search", "<div style=\"text-align: center;\"><p><strong>Search has moved.</strong></p><p>It can be found by clicking the “Filter Data” button on the “View/Edit” page.</p></div>") } elsif ($__lov eq "data_reports" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { $__loq .= _bph(0); } elsif ($__lov eq "view_data_report_settings" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { $__loq .= _bph(1); } elsif ($__lov eq "password_reports" && (exists $ssiwebadmin9_14_2::_btf{"password_reports"})) { $__loq .= _boq(); } elsif ($__lov eq "incompletes_report" && (exists $ssiwebadmin9_14_2::_btf{"incompletes_report"})) { $__loq .= _bor(); } elsif ($__lov eq "test_survey" && (exists $ssiwebadmin9_14_2::_btf{"test_survey"})) { $__loq .= _bqs($__lox, $__loz); } elsif ($__lov eq "advanced" && (exists $ssiwebadmin9_14_2::_btf{"advanced"})) { $__loq .= _bqv(1, 0, 1, 0, 0); } elsif ($__lov eq "survey_log" && (exists $ssiwebadmin9_14_2::_btf{"survey_log"})) { $__loq .= _boz(); } elsif ($__lov eq "close_survey" && (exists $ssiwebadmin9_14_2::_btf{"close_survey"})) { $__loq .= _bou(); } elsif ($__lov eq "close_survey_update" && (exists $ssiwebadmin9_14_2::_btf{"close_survey"})) { $__loq .= _box(); } elsif ($__lov eq "reset_survey" && (exists $ssiwebadmin9_14_2::_btf{"reset_survey"})) { $__loq .= _boy(); } elsif ($__lov eq "view_data_search" && (exists $ssiwebadmin9_14_2::_btf{"view_data"})) { $authlib9_14_2::_akn{"filter_object"} = undef; $authlib9_14_2::_akn{"filter_list_object"} = undef; $__loq .= _bmn(); } elsif (($__lov eq "mass_edit_records" || $__lov eq "mass_edit_records_removed") && exists $ssiwebadmin9_14_2::_btf{"full_access"}) { $__loq .= _bmu($__lov eq "mass_edit_records_removed"); $__loq .= _bmj($__loq); } elsif ((($__lov eq "view_data_next1") || ($__lov eq "view_data_next2") || $__lov eq ("view_data_removed")) && exists $ssiwebadmin9_14_2::_btf{"view_data"}) { $__loq .= _bmy(0, 1, $__lov eq ("view_data_removed") || exists $authlib9_14_2::_akn{"removed_record"}); $__loq .= _bmj($__loq); } elsif ((($__lov eq "view_data_previous1") || ($__lov eq "view_data_previous2")) && exists $ssiwebadmin9_14_2::_btf{"view_data"}) { $__loq .= _bmy(0, -1, exists $authlib9_14_2::_akn{"removed_record"}); $__loq .= _bmj($__loq); } elsif ((($__lov eq "view_data_cancel1") || ($__lov eq "view_data_cancel2")) && exists $ssiwebadmin9_14_2::_btf{"view_data"}) { $__loq .= _bmy(0, 0, exists $authlib9_14_2::_akn{"removed_record"}); $__loq .= _bmj($__loq); } elsif (($__lov eq "view_data_remove") && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__loq .= _bnq(); $__loq .= _bmj($__loq); } elsif (($__lov eq "view_data_restore") && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__loq .= _bnr(); $__loq .= _bmj($__loq); } elsif (($__lov eq "view_data_delete") && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__loq .= _bnt(); $__loq .= _bmj($__loq); } elsif ((($__lov eq "view_data_edit1") || ($__lov eq "view_data_edit2")) && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__loq .= _bmy(1, 0, exists $authlib9_14_2::_akn{"removed_record"}); $__loq .= _bmj($__loq); } elsif ((($__lov eq "view_data_save1") || ($__lov eq "view_data_save2")) && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__loq .= _bnh(exists $authlib9_14_2::_akn{"removed_record"}); $__loq .= _bmj($__loq); } elsif ($__lov eq "mass_edit_records_save" && exists $ssiwebadmin9_14_2::_btf{"full_access"}) { $__loq .= _bmx(); $__loq .= _bmj($__loq); } elsif ($__lov eq "mass_edit_records_cancel") { $__loq .= _bmn(); $__loq .= _bmj($__loq); } elsif ($__lov eq "question_report" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { my $__lpj = _bpj(); $__loq .= $__lpj; $__loq .= _bpv(); } elsif ($__lov eq "view_saved_report" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { $__loq .= _bqa(); $__loq .= _bpv(); } elsif ($__lov eq "update_report" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { _bro(); $__loq .= _bqa(); $__loq .= _bpv(); } elsif ($__lov eq "edit_data_report" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { $__loq .= _bph(1); } elsif ($__lov eq "delete_reports" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { $__lpi = 0; $__loq .= _bqb(); } elsif ($__lov eq "save_report" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { $__lpi = 0; $__loq .= _brn(); } elsif ($__lov eq "download_data_report" && (exists $ssiwebadmin9_14_2::_btf{"data_reports"})) { _bpw(); $__lou = 1; } elsif ($__lov eq "test_survey_admin" && (exists $ssiwebadmin9_14_2::_btf{"test_survey"})) { $__loq .= _bqs($__lox, $__loz); } elsif (($__lov eq "test_survey_return" || $__lov eq "test_survey_return2") && exists $ssiwebadmin9_14_2::_btf{"test_survey"} && exists $ssiwebadmin9_14_2::_btf{"study_summary"}) { $__loq .= _blz(); } elsif ($__lov eq "close_survey_close" && (exists $ssiwebadmin9_14_2::_btf{"close_survey"})) { $__loq .= _bov(); } elsif ($__lov eq "close_survey_open" && (exists $ssiwebadmin9_14_2::_btf{"close_survey"})) { $__loq .= _bow(); } elsif ($__lov eq "reset_survey_reset" && (exists $ssiwebadmin9_14_2::_btf{"reset_survey"})) { $__loq .= _bpe(); } elsif ($__lov eq "download_survey_log" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__lou = 1; _bsi("survey_log", 1); } elsif ($__lov eq "change_quotas" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { if (exists $authlib9_14_2::_akn{"save_new_limits"}) { $__loq .= _bmf(); } else { $__loq .= _bmc(); } } elsif ($__lov eq "apply_changes" && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { my ($__lpo, $__lpp, $__lpq, $__lpr, $__lps) = _brv($__lox, $__loz, 0); $__loq .= _boe("Apply Changes", $__lpo); } if (!$__lou) { $| = 1; print authlib9_14_2::_zb(); if ($__lpi) { print _bog($__lov, $__lpb, $__lox); } $| = 0; print $__loq; if ($__lpi) { print _boi($__lpb, $__lov); } } } } } authlib9_14_2::_act(); } sub _blx { my ($__lpz, $__lqa, $__lqb, $__lqc) = @_; my $__lpt = 0; my $__lpu = ""; my $__lpv = <$__lpz>; my $__lpw = authlib9_14_2::ParseDataHeaderLine($__lpv, "dat.cgi"); if ($__lpw != 0) { $__lpu = $__lqb->($__lpz, $__lqc); my $__lpx = length($__lqc) == 0 ? -1 : rindex($__lpu, $__lqc); my @__lpy = $__lpu =~ m/(\n)/go; if ($__lpx != -1 && @__lpy == $__lpw->{'_bub'} + 1) { $__lpt = 1; } elsif (@__lpy == $__lpw->{'_bub'}) { $__lpt = 1; } else { authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "ADMIN Can't read data file respnum= " . $__lpw->{'_buc'} . " -- Line count in header does not match lines in file. " . $__lqa); } } return ($__lpt, $__lpw, $__lpv . $__lpu); } sub _bly { my ($__lqh, $__lqi, $__lqj, $__lqk, $__lql) = @_; my $__lqd = 0; my $__lqe = $__lqk->($__lqi, $__lql); my $__lqf = length($__lql) == 0 ? -1 : rindex($__lqe, $__lql); my @__lqg = $__lqe =~ m/(\n)/go; if ($__lqf != -1 && @__lqg == $__lqh->{'_bub'} + 1) { $__lqd = 1; } elsif (@__lqg == $__lqh->{'_bub'}) { $__lqd = 1; } else { authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "ADMIN Can't read data file respnum= " . $__lqh->{'_buc'} . " -- Line count in header does not match lines in file. " . $__lqj); } return ($__lqd, $__lqe); } sub _blz { my ($__lqn, $__lqo, $__lqp) = _bof(); my $__lqm = ""; $__lqm .= "<div id=\"summary_chart\" class=\"chart_box\" data-completes=\"" . $__lqn . "\" data-incompletes=\"" . $__lqo . "\" data-disqualifieds=\"" . $__lqp . "\">\n"; $__lqm .= "<svg></svg>\n"; $__lqm .= "</div>\n"; $__lqn = authlib9_14_2::_abl($__lqn, ",", ".", 0); $__lqo = authlib9_14_2::_abl($__lqo, ",", ".", 0); $__lqp = authlib9_14_2::_abl($__lqp, ",", ".", 0); $__lqm .= "<center><table border=\"0\" cellpadding=\"3\" cellspacing=\"0\" id=\"study_summary_box\">"; $__lqm .= "<tr><td align=\"right\" width=\"50%\">Completes:</td><td width=\"50%\" align=\"left\"><span id=\"completes\" class=\"sans_bold\">" . $__lqn . "</span></td></tr>"; $__lqm .= "<tr><td align=\"right\">Incompletes:</td><td align=\"left\"><span id=\"incompletes\" class=\"sans_bold\">" . $__lqo . "</span></td></tr>"; $__lqm .= "<tr><td align=\"right\">Disqualified:</td><td align=\"left\"><span id=\"disqualifieds\" class=\"sans_bold\">" . $__lqp . "</span></td></tr>"; $__lqm .= "</table></center>"; if ($authlib9_14_2::_aja) { $__lqm .= _bmd(0, 0); } return _boe("Study Summary", $__lqm); } sub _bma { my $__lqq = ""; my $__lqr = ""; my $__lqs = 0; my ($__lqt, $__lqu) = _bmb(); if (!$__lqt) { $__lqq .= "<div id=\"setup_error\" class=\"stage error_msg_box display_class_hide\">"; $__lqq .= "<div class=\"stage_title\"><span class=\"warning\">Server Security Issues Detected</span></div>"; $__lqq .= "<div class=\"stage_content\">"; $__lqq .= "<div id=\"setup_error_text1\"></div>"; $__lqq .= "<div id=\"setup_error_text2\"></div>"; $__lqq .= "Contact Sawtooth Software (or your Sawtooth Software representative) for further assistance."; $__lqq .= "</div></div>\n"; } return $__lqq; } sub _bmb { my $__lqv = ""; my $__lqw = 0; $__lqv = $ENV{'SCRIPT_NAME'}; if ($__lqv =~ m/\/admin\.exe/) { $__lqw = 1; } else { $__lqv =~ s/\/admin\.pl//; $__lqv = authlib9_14_2::_zn($__lqv, $authlib9_14_2::_ahv{'_amr'}); } return($__lqw, $__lqv); } sub _bmc { my $__lqx = ""; $__lqx .= _bmd(1, 0); $__lqx .= authlib9_14_2::_xh("document.mainform.hid_page.value = \"change_quotas\";"); return _boe("Change Quota Limits", $__lqx); } sub _bmd { my ($__lrx, $__lry) = @_; my $__lqy = ""; my $__lqz = 1; my $__lra = 20; my $__lrb = 10; my $__lrc = 70; authlib9_14_2::_ys(); if ($authlib9_14_2::_ala) { my $__lrd = $authlib9_14_2::_ala->{'_lg'}; my $__lre = ""; my $__lrf = 0; if ($__lrx) { $__lqy .= "<div class=\"edit_quota_warning\"><span class=\"warning\">WARNING:</span>"; $__lqy .= "<div class=\"para\">Modifying the quota cell limits on this page will only update the quota limits on the web server."; $__lqy .= " &nbsp;If you later update your survey on the web server (changing question text etc.), then the modified quota cell limits on the web server"; $__lqy .= " will be overwritten by the quota cell limits defined in the Lighthouse Studio authoring module.</div>"; $__lqy .= "<div class=\"para\">As another option quota cell limits can be modified by changing them in the Lighthouse Studio authoring module and then updating the survey on the web server.</div>"; $__lqy .= "<div class=\"para\">If you decide to modify the quota cell limits on this page,"; $__lqy .= "we highly recommend that you update your local survey in the "; $__lqy .= "Lighthouse Studio authoring module so that it matches the changes made on the web server.</div></div>"; } $__lqy .= "<div class=\"section_separator_line\"></div>"; if ($__lry) { $__lqy .= "<div class=\"warning\">Error: Invalid Quota Cell Limit. Quota Cell Limits must be positive numbers.</div><br><br>"; } foreach $__lre (@{$__lrd}) { $__lrf = authlib9_14_2::_yy($__lre); if ($__lrf) { my $__lrg = $__lrf->{'_uf'}; my $__lrh = authlib9_14_2::_yv($__lre, $__lrg); my $__lri = 0; my $__lrj = 0; my $__lrk = 4; my $__lrl = 0; my $__lrm = 0; my $__lrn = 0; my $__lro = ""; my $__lrp = ""; my $__lrq = 0; my $__lrr = 0; if (exists $__lrg->{'_fw'}) { $__lri = 1; if (exists $__lrg->{'_fw'}->{'_ou'}) { $__lrj = 1; } } $__lqy .= "<div class=\"quota_box\">Quota: <b>" . $__lre . "</b>"; $__lqy .= "<table class=\"quota_table\">\n"; my $__lrs = $__lrg->{'_lf'}; my $__lrt = 0; my $__lru = 0; my $__lrv = 0; my $__lrw = ""; foreach $__lrt (@{$__lrs}) { $__lrr = 0; $__lrv = 0; $__lrp = $__lrt->{'_if'}; $__lrq = $__lrt->{'_pt'}; $__lrl = $__lrh->{$__lrq}->{'_hi'}; $__lrm = $__lrh->{$__lrq}->{'_amo'}; $__lrn = $__lrl - $__lrm; if ($__lrn <= 0) { $__lrr = 1; } $__lqy .= "<tr id=\"" . $__lre . "-" . $__lrq . "\" class=\""; if ($ssiwebadmin9_14_2::_btz) { $__lrw = ""; $ssiwebadmin9_14_2::_btz = 0; } else { $__lrw = "alt_color1"; $ssiwebadmin9_14_2::_btz = 1; } $__lqy .= $__lrw; if ($__lrr) { $__lqy .= " quota_closed"; } $__lqy .= "\">\n"; $__lqy .= "<td class=\"quota_name_cell\" align=\"left\" width=\"" . $__lra . "%\" nowrap>"; $__lqy .= $__lrp . " (" . $__lrq . ") "; $__lqy .= "</td>\n"; $__lqy .= "<td class=\"quota_count_cell\" width=\"" . $__lrb . "%\" nowrap>"; $__lqy .= "<span class=\"quota_count_text\">" . $__lrm . "</span> /"; $__lqy .= "</td><td class=\"quota_limit_cell\">"; if ($__lrx) { $__lqy .= "<input class=\"quota_input numeric_input\" type=\"tel\" name=\"" . $__lre . "_" . $__lrq . "\" size=\"4\" maxlength=\"9\" "; $__lqy .= " value=\""; if ($__lry && (exists $authlib9_14_2::_akn{$__lre . "_" . $__lrq})) { $__lqy .= $authlib9_14_2::_akn{$__lre . "_" . $__lrq}; } else { $__lqy .= $__lrl; } $__lqy .= "\" >"; } else { $__lqy .= $__lrl; } $__lqy .= "</td>\n"; if ($__lrl > 0) { $__lrv = int(($__lrm / $__lrl) * 100); } else { $__lrv = 100; } if ($__lrv > 100) { $__lrv = 100; } if ($__lqz) { $__lqy .= "<td align=\"left\" width=\"" . $__lrc . "%\">"; $__lqy .= "<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" class=\"quota_graph_table"; if ($__lrv == 100) { $__lqy .= " quota_finished_graph"; } $__lqy .= "\" width=\"100%\">\n"; $__lqy .= "<tr>\n"; if ($__lrv) { $__lqy .= "<td align=\"right\" class=\"quota_bar\" style=\"width:" . $__lrv . "%;\">\n"; if ($__lrv > 85) { if ($__lrv >= 100) { $__lqy .= "<div class=\"closed_quota_text\">[closed]</div>\n"; } $__lqy .= $__lrv . "%"; } else { $__lqy .= "<span style=\"font-size: 1px;\">&nbsp;</span>"; } $__lqy .= "</td>\n"; } if ($__lrv < 100) { $__lqy .= "<td align=\"left\" class=\"quota_bar_unfilled\">\n"; if ($__lrv <= 85) { $__lqy .= $__lrv . "%"; } else { $__lqy .= "<span style=\"font-size: 1px;\">&nbsp;</span>"; } $__lqy .= "</td>\n"; } $__lqy .= "</tr></table>\n"; $__lqy .= "</td>\n"; } else { $__lqy .= "<td class=\"quota_percent_cell\" width=\"" . $__lrc . "%\">"; $__lqy .= $__lrv . "%"; $__lqy .= "</td>"; } $__lqy .= "</tr>\n"; if ($__lri) { $__lqy .= "<tr class=\"" . $__lrw . "\">\n"; $__lqy .= "<td align=\"left\" valign=\"top\" >&nbsp;</td>\n"; $__lqy .= "<td align=\"left\" colspan=\"3\" valign=\"top\" style=\"font-size: 12px; color: #808080;\">\n"; if ($__lri) { $__lqy .= "In Progress: "; $__lqy .= $__lrh->{$__lrq}->{'actual-in-progress'}; if ($__lrj) { $__lqy .= "<span style=\"padding-left: 10px;\">Inactive: "; $__lqy .= $__lrh->{$__lrq}->{'in-active'}; $__lqy .= "</span>"; } } else { $__lqy .= "&nbsp;"; } $__lqy .= "<br><br></td></tr>\n"; } } $__lqy .= "</table></div>\n"; } } if (exists $ssiwebadmin9_14_2::_btf{"full_access"} && !$ssiwebadmin9_14_2::_btt) { $__lqy .= "<div class=\"button_container\">\n"; $__lqy .= "<a id=\"change_quotas\" class=\"green_button\">Change Quota Limits</a>"; $__lqy .= "</div>\n"; $__lqy .= authlib9_14_2::_xh(_bnu("change_quotas")); if ($__lrx) { $__lqy .= "<input type=\"hidden\" name=\"save_new_limits\" value=\"1\">\n"; } } } return $__lqy; } sub _bme { my @__lrz = (); my $__lsa = "{"; my ($__lsm, $__lsn, $__lso) = _bof(); $__lsa .= "\"completes\":" . $__lsm . ","; $__lsa .= "\"incompletes\":" . $__lsn . ","; $__lsa .= "\"disqualifieds\":" . $__lso . ","; $__lsa .= "\"quotas\":["; if ($authlib9_14_2::_aja) { authlib9_14_2::_ys(); if ($authlib9_14_2::_ala) { my $__lsb = $authlib9_14_2::_ala->{'_lg'}; my $__lsc = ""; my $__lsd = 0; foreach $__lsc (@{$__lsb}) { $__lsd = authlib9_14_2::_yy($__lsc); if ($__lsd) { my $__lse = $__lsd->{'_uf'}; my $__lsf = authlib9_14_2::_yv($__lsc, $__lse); my $__lsg = $__lse->{'_lf'}; my $__lsh = 0; my $__lsi = 0; my $__lsj = 0; my $__lsk = 0; my $__lsl = ""; foreach $__lsh (@{$__lsg}) { $__lsi = $__lsh->{'_pt'}; $__lsj = $__lsf->{$__lsi}->{'_hi'}; $__lsk = $__lsf->{$__lsi}->{'_amo'}; $__lsl = $__lsh->{'_if'}; $__lsl =~ s/"/\\"/g; push @__lrz, "{\"name\":\"" . $__lsc . "\",\"cell_name\":\"" . $__lsl . "\",\"value\":" . $__lsi . ",\"limit\":" . $__lsj . ",\"count\":" . $__lsk . "}"; } } } } } $__lsa .= join(",", @__lrz); $__lsa .= "]}"; print authlib9_14_2::_zb(); print $__lsa; } sub _bmf { my $__lsp = ""; authlib9_14_2::_ys(); if ($authlib9_14_2::_ala) { my $__lsq = $authlib9_14_2::_ala->{'_lg'}; my $__lsr = ""; my $__lss = 0; my $__lst = 0; my $__lsu = 0; my $__lsv = 0; my $__lsw = 0; my $__lsx = 0; my %__lsy = (); foreach $__lsr (@{$__lsq}) { $__lss = authlib9_14_2::_yy($__lsr); if ($__lss) { $__lst = $__lss->{'_uf'}->{'_lf'}; foreach $__lsu (@{$__lst}) { $__lsv = $__lsu->{'_pt'}; if (exists $authlib9_14_2::_akn{$__lsr . "_" . $__lsv}) { $__lsw = authlib9_14_2::_zo($authlib9_14_2::_akn{$__lsr . "_" . $__lsv}); $__lsw =~ s/^0+(\d+?)$/$1/; if (_bmg($__lsw)) { $__lsy{$__lsr . "_" . $__lsv} = $__lsw; } else { $__lsx = 1; last; } } } if ($__lsx) { last; } } } if ($__lsx) { $__lsp .= _bmd(1, 1); } else { my $__lsz = 0; my @__lta = sort keys(%__lsy); my $__ltb = ""; my $__ltc = 0; my $__ltd = ""; my $__lte = 0; if (@__lta) { foreach $__ltb (@__lta) { ($__lsr, $__lsv) = split("_", $__ltb); $__ltc = $__lsy{$__ltb}; eval { $__ltd = "UPDATE `" . $authlib9_14_2::_akj . "_quotas` SET `cell_limit` = ? WHERE `quota_name` = ? AND `cell_value` = ?"; $__lte = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ltd, 0)); $__lte->execute($__ltc, authlib9_14_2::_wh($__lsr), $__lsv); $__lte->finish; }; if ($@) { authlib9_14_2::_zq(232, "Database error.", "Database error updating quota table.", $@); } } $authlib9_14_2::_ake->commit(); $__lsp .= "New quota cell limits have been saved.<br><br>Remember to update them in the Lighthouse Studio authoring module."; } } } return _boe("Change Quota Limits", $__lsp); } sub _bmg { my ($__ltf) = @_; if ($__ltf =~ m/^\d+$/) { if ($__ltf >= 0) { return 1; } } return 0; } sub _bmh { my $__ltg = ""; $__ltg .= "<div id=\"download_builder_title\">Records to include in download</div>"; $__ltg .= "<div id=\"download_builder\">\n"; my $__lth = 1; if ($authlib9_14_2::_aku) { $__lth = 0; } $__ltg .= _bmi("with_completes", "Completes", 1, $__lth); $__ltg .= _bmi("with_incompletes", "Incompletes", 1, $__lth); $__ltg .= _bmi("with_disqualified", "Disqualified", 1, $__lth); $__ltg .= _bmi("with_removed", "Include Removed Records", 0, 1); $__ltg .= "</div>\n"; $__ltg .= "<div class=\"button_container\">\n"; $__ltg .= "<button id=\"download_data_builder\" class=\"green_button\">Download Data</button>\n"; $__ltg .= "</div>\n"; if (!$ssiwebadmin9_14_2::_btt) { $__ltg .= "<div id=\"download_note\">NOTE: Clicking a link above will allow you to save the <b>" . $authlib9_14_2::_akh . "_data.csv</b> file to your local computer. You will then need to use the \"Data Management\" dialog within Lighthouse Studio to \"Accumulate\" the data so that it can be exported.</div>"; } return _boe("Download Data", $__ltg); } sub _bmi { my ($__ltl, $__ltm, $__ltn, $__lto) = @_; my $__lti = ""; if ($__ltn) { $__lti = "checked"; } my $__ltj = ""; if (!$__lto) { $__ltj = "disabled"; } my $__ltk = "<div class=\"download_builder_checkbox\">\n"; $__ltk .= "<input type=\"checkbox\" id=\"$__ltl\" name=\"$__ltl\" $__lti $__ltj />\n"; $__ltk .= "<label for=\"$__ltl\">$__ltm</label>\n"; $__ltk .= "</div>\n"; return $__ltk; } sub _bmj { my ($__ltq, $__ltr, $__lts) = @_; my $__ltp = ""; if ((index($__ltq, "filter_object") != -1) || (index($__ltq, "filter_list_object") != -1)) { return $__ltp; } if (!$__ltr) { $__ltr = $authlib9_14_2::_akn{"filter_object"}; } if (!$__lts) { $__lts = $authlib9_14_2::_akn{"filter_list_object"}; } if ($__ltr) { $__ltr =~ s/\"/&quot;/g; $__ltp .= "<input type=\"hidden\" name=\"filter_object\" value=\"" . $__ltr . "\">\n"; } if ($__lts) { $__lts =~ s/\"/&quot;/g; $__ltp .= "<input type=\"hidden\" name=\"filter_list_object\" value=\"" . $__lts . "\">\n"; } return $__ltp; } sub _bmk { my $__ltt = "<div id=\"clear_set_filter_container\">"; $__ltt .= "<button id=\"view_edit_filter_button\" class=\"secondary_button\" type=\"button\">"; $__ltt .= "<i class='bx bxs-filter-alt'><svg width=\"14\" height=\"14\" viewBox=\"0 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.9375 20.5947V16.0087L21.3515 8.59473C21.7265 8.21973 21.9375 7.71073 21.9375 7.17973V4.59473C21.9375 4.32951 21.8321 4.07516 21.6446 3.88762C21.4571 3.70008 21.2027 3.59473 20.9375 3.59473H4.9375C4.67228 3.59473 4.41793 3.70008 4.23039 3.88762C4.04286 4.07516 3.9375 4.32951 3.9375 4.59473V7.17973C3.9375 7.71073 4.1485 8.21973 4.5235 8.59473L11.9375 16.0087V22.5947L13.9375 20.5947Z\" fill=\"black\"/></svg></i>"; $__ltt .= "Filter Data</button>"; $__ltt .= "<a href=\"#\" id=\"clear_filters_button\" class=\"bold_link text_button\" type=\"button\">Clear Filters</a>"; $__ltt .= "<div class=\"data_records_note note\">NOTE: Data records are listed by Internal Respondent Number from oldest to newest.</div>\n"; $__ltt .= "</div>"; $__ltt .= "<div id=\"filter_tabs\" class=\"filter_tab_container\">"; $__ltt .= "<ul>"; $__ltt .= "<li><a href=\"#filter_tabs_1\">Logic</a></li>"; $__ltt .= "<li><a href=\"#filter_tabs_2\">List of IDs/Values</a></li>"; $__ltt .= "</ul>"; $__ltt .= "<div id=\"filter_tabs_1\" class=\"filter_tab\">"; $__ltt .= "<div class=\"filter_tab_inner\">"; $__ltt .= "<div class=\"search_options_box\">"; $__ltt .= "<label class=\"status_label\">Respondent Status:</label><br>"; $__ltt .= "<select id=\"status\" name=\"status\">\n"; $__ltt .= "<option value=\"\">All</option>\n"; $__ltt .= "<option value=\"5\">Qualified / Complete</option>\n"; $__ltt .= "<option value=\"2\">Incomplete</option>\n"; $__ltt .= "<option value=\"4\">Disqualified</option>\n"; $__ltt .= "</select>\n"; my ($__ltw, $__ltx) = _bml(0); $__ltt .= $__ltw; $__ltt .= "</div>"; $__ltt .= "</div>"; $__ltt .= "<div class=\"filter_button_container\">"; $__ltt .= "<button class=\"filter_cancel secondary_button\">Cancel</button>"; $__ltt .= "<button id=\"view_data_search\" type=\"button\" class=\"green_button prompt_link\">Filter</button>"; $__ltt .= "</div>"; $__ltt .= "</div>"; $__ltt .= "<div id=\"filter_tabs_2\" class=\"filter_tab\">"; $__ltt .= "<div class=\"filter_tab_inner\">"; $__ltt .= "<div class=\"row\">"; $__ltt .= "<div class=\"data_records_container\">"; $__ltt .= "<div class=\"col\">"; $__ltt .= "<label>IDs/Values</label>"; my $__ltu = "data_list"; $__ltt .= "<textarea name=\"" . $__ltu . "\" id=\"" . $__ltu . "\" class=\"data_list\" placeholder=\"Enter or paste in a list here\"></textarea>"; $__ltt .= "</div>"; $__ltt .= "<div class=\"data_record_button_col col\">"; $__ltt .= "<label>Variable Name</label>"; $__ltt .= "<br>"; my $__ltv = "reference_variable"; my ($__lty, $__ltz) = authlib9_14_2::_aee(0, 0, 0, 0, 0, 0, ""); $__ltt .= "<select name=\"" . $__ltv . "\" id=\"" . $__ltv . "\">\n"; $__ltt .= $__lty; $__ltt .= "</select>"; $__ltt .= "</div>"; $__ltt .= "</div>"; $__ltt .= "</div>"; $__ltt .= "</div>"; $__ltt .= "<div class=\"filter_button_container\">"; $__ltt .= "<button class=\"filter_cancel secondary_button\">Cancel</button>"; $__ltt .= "<button id=\"view_data_search_list\" type=\"button\" class=\"green_button prompt_link\">Filter</button>"; $__ltt .= "</div>"; $__ltt .= "</div>"; $__ltt .= "</div>"; return $__ltt; } sub _bml { my ($__luk) = @_; my $__lua = ""; my $__lub = 0; my $__luc = 0; my $__lud = 5; my $__lue = ""; my $__luf = ""; my $__lug = ""; my $__luh = ""; my $__lui = ""; my @__luj = (); my ($__lul, $__lum) = authlib9_14_2::_aee(0, 0, 0, 0, 0, 0, ""); $__lua .= "<div class=\"filter_box\">\n"; $__lua .= "<ul class=\"filter_labels\">\n"; $__lua .= "<li>Variable Name</li>\n"; $__lua .= "<li>Operator</li>\n"; $__lua .= "<li>Value</li>\n"; $__lua .= "<li>And/Or</li>\n"; $__lua .= "</ul>"; for ($__luc = 1; $__luc <= $__lud; $__luc++) { $__lua .= "<ul class=\"row_" . $__luc . "\">\n"; $__luf = "variable_" . $__luc; $__lua .= "<li class=\"filter_var_col\">\n"; $__lua .= "<label class=\"mobile-filter-label\">Variable Name</label>"; $__lua .= "<select name=\"" . $__luf . "\" id=\"" . $__luf . "\">\n"; $__lua .= "<option value=\"\" selected></option>\n"; $__lua .= $__lul; $__lua .= "</select>"; $__lua .= "</li>\n"; $__lug = "operator_" . $__luc; $__lua .= "<li class=\"filter_operator_col\">\n"; $__lua .= "<label class=\"mobile-filter-label\">Operator</label>"; $__lua .= "<select name=\"" . $__lug . "\" id=\"" . $__lug . "\">\n"; $__lua .= "<option value=\"\" selected></option>\n"; $__lua .= "<option value=\"=\" id=\"" . _bmm("=") . "\"> = </option>\n"; $__lua .= "<option value=\"<>\" id=\"" . _bmm("<>") . "\"> <> </option>\n"; $__lua .= "<option value=\"<\" id=\"" . _bmm("<") . "\"> &lt; </option>\n"; $__lua .= "<option value=\">\" id=\"" . _bmm(">") . "\"> &gt; </option>\n"; $__lua .= "<option value=\"<=\" id=\"" . _bmm("<=") . "\"> &lt;= </option>\n"; $__lua .= "<option value=\">=\" id=\"" . _bmm(">=") . "\"> &gt;= </option>\n"; $__lua .= "<option value=\"contains\" id=\"" . _bmm("contains") . "\"> contains </option>\n"; $__lua .= "<option value=\"does not contain\" id=\"" . _bmm("does not contain") . "\"> does not contain </option>\n"; $__lua .= "</select>"; $__lua .= "</li>\n"; $__luh = "value_" . $__luc; $__lua .= "<li class=\"filter_value_col\">"; $__lua .= "<label class=\"mobile-filter-label\">Value</label>"; $__lua .= "<input name=\"" . $__luh . "\" id=\"" . $__luh . "\" type=\"text\" class=\"text_input\">"; $__lua .= "</li>"; $__lua .= "<li class=\"filter_joiner_col\">"; if ($__luc < $__lud) { $__lua .= "<label class=\"mobile-filter-label\">And/Or</label>"; $__lui = "joiner_" . $__luc; $__lua .= "<select name=\"" . $__lui . "\" id=\"" . $__lui . "\">\n"; $__lua .= "<option value=\"\" selected></option>\n"; $__lua .= "<option value=\"AND\" id=\"AND\"> AND </option>\n"; $__lua .= "<option value=\"OR\" id=\"OR\"> OR </option>\n"; $__lua .= "</select>"; } else { $__lua .= "&nbsp;"; } $__lua .= "</li>\n"; $__lua .= "</ul>\n"; if ($__luk) { if (exists $authlib9_14_2::_akn{$__luf}) { $__lub = 1; push @__luj, "jQuery(\".row_" . $__luc . " #" . $authlib9_14_2::_akn{$__luf} . "\")[0].selected = true;"; } if (exists $authlib9_14_2::_akn{$__lug}) { push @__luj, "jQuery(\".row_" . $__luc . " #" . _bmm($authlib9_14_2::_akn{$__lug}) . "\")[0].selected = true;"; } if (exists $authlib9_14_2::_akn{$__luh}) { push @__luj, "jQuery(\".row_" . $__luc . " #" . $__luh . "\")[0].value = \"" . $authlib9_14_2::_akn{$__luh} . "\";"; } if ($__luc < $__lud && exists $authlib9_14_2::_akn{$__lui}) { push @__luj, "jQuery(\".row_" . $__luc . " #" . $authlib9_14_2::_akn{$__lui} . "\")[0].selected = true;"; } } } $__lua .= "</div>\n"; if (@__luj) { my $__lue = "jQuery(document).ready(function() {" . join("\n", @__luj) . "});"; $__lua .= authlib9_14_2::_xh($__lue); } return ($__lua, $__lub); } sub _bmm { my ($__luo) = @_; my $__lun = ""; if ($__luo eq "=") { $__lun = "equal"; } elsif ($__luo eq "<>") { $__lun = "not_equal"; } elsif ($__luo eq "<") { $__lun = "less_than"; } elsif ($__luo eq ">") { $__lun = "greater_than"; } elsif ($__luo eq "<=") { $__lun = "less_than_equal"; } elsif ($__luo eq ">=") { $__lun = "greater_than_equal"; } elsif ($__luo eq "contains") { $__lun = "contains"; } elsif ($__luo eq "does not contain") { $__lun = "does_not_contain"; } return $__lun; } sub _bmn { my $__lup = ""; my $__luq = 0; my $__lur = 0; my $__lus = 0; my @__lut = (); my @__luu = (); my @__luv = (); my $__luw = ""; my $__lux = 0; my $__luy = {}; push @__lut, authlib9_14_2::_aev($__luy, 1); push @__luu, authlib9_14_2::_aev($__luy, 0); if ($authlib9_14_2::_aku) { _bps(&authlib9_14_2::_API, \@__lut); _bps(&authlib9_14_2::_API, \@__luu); } my ($__lvd, $__lve, $__lvf) = _bmr($__luy); if ($__lvd) { push @__lut, $__lvd; push @__luu, $__lvd; push @__luv, @{$__lve}; $__lux = 1; } $__luw = "SELECT "; if ($authlib9_14_2::_aku && $authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__luw .= "TOP " . &authlib9_14_2::_API . " "; } $__luw .= "`" . $authlib9_14_2::_akj . "_data1`.`sys_RespNum` FROM "; my $__luz = authlib9_14_2::_aeu($__luw, \@__lut, $__luy); my $__lva = authlib9_14_2::_aeu($__luw, \@__luu, $__luy); if ($authlib9_14_2::_aku && $authlib9_14_2::_ahn->{'_pj'} ne "odbc") { $__luz .= " LIMIT " . &authlib9_14_2::_API; $__lva .= " LIMIT " . &authlib9_14_2::_API; } $__luq = _bmp(authlib9_14_2::_wh($__luz), \@__luv); $__lur = _bmp(authlib9_14_2::_wh($__lva), \@__luv); my $__lvb = "{"; my $__lvc = "{"; while(my ($__lvg, $__lvh) = each %{$__lvf}) { if ($__lvg eq "data_list" || $__lvg eq "reference_variable") { $__lvc .= "\"" . $__lvg . "\": \"" . $__lvh . "\","; } else { $__lvb .= "\"" . $__lvg . "\": \"" . $__lvh . "\","; } } $__lvb =~ s/,$//g; $__lvc =~ s/,$//g; $__lvb .= "}"; if ($__lvb eq "{}") { $__lvb = undef; } $__lvc .= "}"; if ($__lvc eq "{}") { $__lvc = undef; } $__lup .= _bmj($__lup, $__lvb, $__lvc); $__lup .= _bmk(); $__lup .= _bmo($__luq, $__lux, $__lvf, 0); $__lup .= _bmo($__lur, $__lux, $__lvf, 1); return $__lup; } sub _bmo { my ($__lvz, $__lwa, $__lwb, $__lwc) = @_; my $__lvi = ""; my $__lvj = @{$__lvz}; my $__lvk = "select_all"; my $__lvl = "result_list"; my $__lvm = "Select"; my $__lvn = "ToggleResultListButtons"; my $__lvo = "Remove Selected Records"; my $__lvp = "view_data_remove"; my $__lvq = "view_data_next1"; my $__lvr = "mass_edit_records"; my $__lvs = "View Data"; my $__lvt = "filter_list_values"; my $__lvu = "filter_list_field"; my $__lvv = "filter_conditions"; if ($__lwc){ $__lvk = "select_all_removed"; $__lvl = "removed_list"; $__lvm = "SelectRemoved"; $__lvn = "ToggleRemovedListButtons"; $__lvo = "Permanently Delete Selected Records"; $__lvp = "view_data_delete"; $__lvq = "view_data_removed"; $__lvr = "mass_edit_records_removed"; $__lvs = "Removed Records <button id='removed_list_toggle' type='button'"; if ($__lvj == 0) { $__lvs .= "class='collapsed'"; } $__lvs .= "><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.293 9.29297L12 13.586L7.70697 9.29297L6.29297 10.707L12 16.414L17.707 10.707L16.293 9.29297Z\" fill=\"black\"/></svg>"; $__lvs .= "</button>\n"; } $__lvi .= "<div class=\"data_results_box row\">"; $__lvi .= "<div class=\"data_records_box col\">\n"; $__lvi .= "Data Records ($__lvj)\n"; $__lvi .= "<select name=\"$__lvl\" multiple size=\"15\" id=\"$__lvl\" class=\"data_list\""; $__lvi .= " onclick='document.mainform[\"$__lvk\"].checked = false;'>\n"; foreach my $__lvw (@{$__lvz}) { $__lvi .= "<option selected value=\"" . $__lvw . "\">" . $__lvw . "</option>\n"; } $__lvi .= "</select>\n"; $__lvi .= "<div style=\"margin-bottom: 10px;\"><input checked type=\"checkbox\" onclick=\"$__lvm();\" name=\"$__lvk\" id=\"$__lvk\" value=\"1\"> <label for=\"$__lvk\">Select All</label></div>\n"; $__lvi .= "</div>"; $__lvi .= "<div class=\"data_record_button_col col\">\n"; $__lvi .= "<div class=\"button_container\">\n"; $__lvi .= "<button id=\"$__lvq\" class=\"green_button same_width\">View Individual Records</button>\n"; $__lvi .= "</div>\n"; if (exists $ssiwebadmin9_14_2::_btf{"full_access"}) { $__lvi .= "<div class=\"button_container\">\n"; $__lvi .= "<button id=\"$__lvr\" class=\"green_button same_width\">Mass Edit Selected Records</button>\n"; $__lvi .= "</div>\n"; } my $__lvx = ""; if (exists $ssiwebadmin9_14_2::_btf{"full_access"}) { my $__lvy = "bold_link text_button prompt_link"; $__lvi .= "<div class=\"button_container\">\n"; if ($__lwc){ $__lvi .= "<button href=\"#\" id=\"view_data_restore\" class=\"bold_link text_button prompt_link\">Restore Selected Records</button>\n"; $__lvy .= " warning"; } $__lvi .= "<button href=\"#\" id=\"$__lvp\" class=\"$__lvy\">$__lvo</button>\n"; $__lvi .= "</div>\n"; } $__lvi .= "</div></div>\n"; $__lvx .= "function $__lvm(){\n"; $__lvx .= "if (document.mainform[\"$__lvk\"].checked){\n"; $__lvx .= "var i = 0;\n"; $__lvx .= "var SelBoxObj = document.mainform[\"$__lvl\"];\n"; $__lvx .= "for(i = 0; i < SelBoxObj.options.length; i++){\n"; $__lvx .= "SelBoxObj.options[i].selected = true;}\n"; $__lvx .= "}else{document.mainform[\"$__lvl\"].selectedIndex = -1;}\n"; $__lvx .= "$__lvn();"; $__lvx .= "}\n"; $__lvi .= authlib9_14_2::_xh($__lvx); $__lvi = _boe($__lvs, $__lvi); return $__lvi; } sub _bmp { my ($__lwg, $__lwh) = @_; my $__lwd = 0; eval { $__lwd = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__lwg, 0), undef, @{$__lwh}); }; if ($@) { authlib9_14_2::_zq(214, "Database error.", "Database error. Cannot get data results.", $@); } my @__lwe = (); my $__lwf = 0; foreach $__lwf (@{$__lwd}) { push @__lwe, $__lwf->[0]; } return \@__lwe; } sub _bmq { my ($__lwi) = @_; if ((defined $__lwi) && $__lwi ne "") { return 1; } else { return 0; } } sub _bmr { my ($__lxo) = @_; my $__lwj = ""; my @__lwk = (); my $__lwl = ""; my $__lwm = ""; my $__lwn = ""; my $__lwo = ""; my $__lwp = ""; my $__lwq = 0; my $__lwr = 0; my $__lws = 0; my $__lwt = ""; my %__lwu = (); my $__lwv = ""; my $__lww = ""; my $__lwx = ""; my $__lwy = ""; my $__lwz = 1; my $__lxa = ""; my $__lxb = 5; my $__lxc = 0; for ($__lwq = 1; $__lwq <= $__lxb; $__lwq++) { $__lwv = "variable_" . $__lwq; $__lww = "operator_" . $__lwq; $__lwx = "value_" . $__lwq; if (exists $authlib9_14_2::_akn{$__lwv} || exists $authlib9_14_2::_akn{$__lww} || exists $authlib9_14_2::_akn{$__lwx} || exists $authlib9_14_2::_akn{"status"}) { $__lxc = 1; last; } } my $__lxd; if ($__lxc == 0 && exists $authlib9_14_2::_akn{"filter_object"}) { eval { my $__lxe = $authlib9_14_2::_akn{"filter_object"}; if (_bmq($__lxe)) { $__lxd = JSON::PP::decode_json($__lxe); } }; if ($@) { $__lxd = {}; } } if ($__lxc == 1 || $__lxd) { my $__lxf = $__lxc ? int($authlib9_14_2::_akn{"status"}) : int($__lxd->{"status"}); if (_bmq($__lxf) && $__lxf != 0) { $__lwj .= "(`$authlib9_14_2::_akj\_data1`.`sys_RespStatus` = ? )"; push @__lwk, $__lxf; $__lwu{"status"} = $__lxf; } for ($__lwq = 1; $__lwq <= $__lxb; $__lwq++) { $__lwl = ""; $__lwm = ""; $__lwo = ""; $__lwp = ""; $__lwr = 0; $__lwv = "variable_" . $__lwq; $__lwl = $__lxc == 1 ? $authlib9_14_2::_akn{$__lwv} : $__lxd->{$__lwv}; if (_bmq($__lwl)) { $__lwl = authlib9_14_2::_zo($__lwl); if (_bmq($__lwl)) { $__lwu{$__lwv} = $__lwl; ($__lwz, $__lxa) = authlib9_14_2::_xk($__lwl); $__lwt = $authlib9_14_2::_akj . "_data" . $__lwz; $__lxo->{$__lwt} = 1; $__lwl = "`" . $__lwt . "`.`" . $__lwl . "`"; } } else { last; } $__lww = "operator_" . $__lwq; $__lwn = $__lxc == 1 ? $authlib9_14_2::_akn{$__lww} : $__lxd->{$__lww}; if (_bmq($__lwn)) { $__lwn = authlib9_14_2::_zo($__lwn); if (_bmq($__lwn)) { $__lwu{$__lww} = $__lwn; if ($__lwn eq "=") { $__lwm = "="; } elsif ($__lwn eq "<>") { $__lwm = "<>"; } elsif ($__lwn eq "<") { $__lwm = "<"; } elsif ($__lwn eq ">") { $__lwm = ">"; } elsif ($__lwn eq "<=") { $__lwm = "<="; } elsif ($__lwn eq ">=") { $__lwm = ">="; } elsif ($__lwn eq "contains") { $__lwm = "LIKE"; $__lwr = 1; } elsif ($__lwn eq "does not contain") { $__lwm = "NOT LIKE"; $__lwr = 1; } else { authlib9_14_2::_zq(0, "Error.", "Filter operator does not exist.", $@); } } } $__lwx = "value_" . $__lwq; $__lwo = $__lxc == 1 ? $authlib9_14_2::_akn{$__lwx} : $__lxd->{$__lwx}; if (_bmq($__lwo)) { $__lwo = authlib9_14_2::_zo($__lwo); $__lwu{$__lwx} = $__lwo; if ($__lwr) { $__lwo = "\%" . $__lwo . "\%"; } } if (_bmq($__lwl) && _bmq($__lwm) && _bmq($__lwo)) { my $__lxg = ""; if ($__lwm eq "=" && $__lwo eq "''") { $__lxg = $__lwl . " IS NULL OR "; } elsif ($__lwm eq "<>" && $__lwo eq "''") { $__lxg = $__lwl . " IS NOT NULL OR "; } elsif ($__lwm eq "<>") { $__lxg = $__lwl . " IS NULL OR "; } if ($__lwq == 1 && _bmq($__lxf) && $__lxf != 0) { $__lwj .= " AND "; } $__lwj .= "("; if ($__lxg) { $__lwj .= $__lxg; } $__lwj .= $__lwl . " " . $__lwm . " ? )"; push @__lwk, $__lwo; } $__lwy = "joiner_" . $__lwq; $__lwp = $__lxc == 1 ? $authlib9_14_2::_akn{$__lwy} : $__lxd->{$__lwy}; if (_bmq($__lwp)) { $__lwp = uc(authlib9_14_2::_zo($__lwp)); if ($__lwp eq "AND" || $__lwp eq "OR") { $__lwu{$__lwy} = $__lwp; $__lwj .= " " . $__lwp . " "; } } } } my $__lxh = 0; if (exists $authlib9_14_2::_akn{"data_list"} || exists $authlib9_14_2::_akn{"reference_variable"}) { $__lxh = 1; } my $__lxi; if ($__lxh == 0 && exists $authlib9_14_2::_akn{"filter_list_object"}) { eval { my $__lxe = $authlib9_14_2::_akn{"filter_list_object"}; if (_bmq($__lxe)) { $__lxi = JSON::PP::decode_json($__lxe); } }; if ($@) { $__lxi = {}; } } if ($__lxh == 1 || $__lxi) { my $__lxj = $__lxh ? $authlib9_14_2::_akn{"data_list"} : $__lxi->{"data_list"}; my $__lxk = $__lxh ? $authlib9_14_2::_akn{"reference_variable"} : $__lxi->{"reference_variable"}; $__lxj =~ s/(\n)+/,/g; $__lxj =~ s/^(\s|,)+|(\s|,)+$//g; $__lxj =~ s/,\s+|\s+,/,/g; $__lxj =~ s/,+/,/g; if ($__lxj && $__lxk) { my @__lxl = split(',', $__lxj); my $__lxm = scalar @__lxl; my ($__lxp, $__lxq) = authlib9_14_2::_xk($__lxk); my $__lxn = "`" . $authlib9_14_2::_akj . "_data" . $__lxp . "`.`" . $__lxk . "` IN (" . join(',', ('?') x $__lxm) . ")"; if ($__lxp > 1) { $__lxo->{$authlib9_14_2::_akj . "_data" . $__lxp} = 1; } $__lwj .= $__lxn; push @__lwk, @__lxl; $__lwu{"data_list"} = $__lxj; $__lwu{"reference_variable"} = $__lxk; } } if ($__lwj) { $__lwj = "(" . $__lwj . ")"; } return ($__lwj, \@__lwk, \%__lwu); } sub _bms { my ($__lxu) = @_; my $__lxr = ""; if (exists $authlib9_14_2::_akn{$__lxu}) { my $__lxs = $authlib9_14_2::_akn{$__lxu}; my $__lxt = ref $__lxs; if ($__lxt eq "ARRAY") { $__lxr = join(",", @{$__lxs}); } else { $__lxr = $__lxs; } } return $__lxr; } sub _bmt { my $__lxv = ""; $__lxv .= "<div class=\"button_container\">"; $__lxv .= "You must select one or more data records.<br><br>"; $__lxv .= "<a id=\"view_data_next1\" class=\"bold_link\">Return to data list</a>\n"; $__lxv .= authlib9_14_2::_xh(_bnu("view_data_next1")); $__lxv .= "</div>"; return _boe("Error", $__lxv); } sub _bmu { my ($__lzb) = @_; my $__lxw = "result_list"; if ($__lzb) { $__lxw = "removed_list"; } my $__lxx = _bms($__lzb ? "removed_list" : "result_list"); my @__lxy = split(",", $__lxx); if (@__lxy == 0) { return _bmt(); } my ($__lxz, $__lzc, $__lzd, $__lze, $__lzf) = _bnx(); my $__lxz = ""; my $__lya = ""; my $__lyb = 0; my @__lyc = (); my $__lyd = @{$__lzf}; my $__lye = 1; my $__lyf = ""; my $__lyg = ""; my $__lyh = ""; my $__lyi = ""; my $__lyj = 0; my $__lyk = 0; my %__lyl = (); my $__lym = ""; my $__lyn = ""; my $__lyo = "Multiple Responses"; my $__lyp = "Multiple Records Selected"; if ($__lyd) { for ($__lyb = 0; $__lyb < $__lyd; $__lyb++) { my $__lyq = undef; $__lyj = 0; $__lyk = 0; $__lye = 1; @__lyc = (); $__lya = $__lzf->[$__lyb]->[0]; my ($__lzg, $__lzh) = _bmv(\@__lxy, $__lya); if ($__lzg == 1) { if (!(defined $__lzh->[0])) { $__lyq = ""; } else { $__lyq = $__lzh->[0]; } } if ($__lya =~ m/^sys_/i) { if (defined $__lyq) { $__lyl{$__lya} = $__lyq; } else { $__lyl{$__lya} = $__lyo; } next; } ($__lyg, $__lyh, $__lyi) = authlib9_14_2::_abt($__lya); $__lyk = authlib9_14_2::_aed($__lyg); if ($__lyk) { $__lyj = $__lyk->{'_pj'}; } $__lym .= _bnf($__lya, $__lyq, $__lyj, 1, 1); } $__lxz .= "<div class=\"warning\"><b>Warning:</b> You are editing multiple records. Saving changes will override any fields changed for all selected records.</div>\n"; $__lxz .= "<div class=\"warning\"><b>Warning:</b> Be careful editing data. Entering an invalid response may cause problems in data analysis.</div>\n"; $__lxz .= "<input type=\"hidden\" name=\"hid_timestamp\" value=\"" . time() . "\">"; $__lxz .= "<div id=\"view_data_box\">"; $__lxz .= _bnb(1); $__lxz .= "<div class=\"section_header\">General Information</div>\n"; $__lxz .= _bne("Internal Respondent Number", "", $__lyp, -1, 0); $__lxz .= _bne("Status", "", $__lyl{"sys_RespStatus"} eq $__lyo ? undef : $__lyl{"sys_RespStatus"}, -1, 1, 1); $__lxz .= _bne("Respondent Computer", "", $__lyp, -1, 0); if (length($__lyl{"sys_DispositionCode"}) > 0) { if ($__lyl{"sys_DispositionCode"} ne "") { $__lxz .= _bne("Disposition", "", $__lyl{"sys_DispositionCode"} eq $__lyo ? undef : $__lyl{"sys_DispositionCode"}, -1, 1, 1); } } $__lxz .= _bne("Time Interview Began", "", $__lyp, -1, 0); $__lxz .= _bne("Time Interview Finished", "", $__lyp, -1, 0); $__lxz .= _bne("Elapsed Time", "", $__lyp, -1, 0); if (!exists($authlib9_14_2::_akn{"hid_admin_test_mode"})) { $__lxz .= _bne("Restart Question", "", $__lyl{"sys_LastQuestion"} eq $__lyo ? undef : $__lyl{"sys_LastQuestion"}, -1, 1, 1); } $__lxz .= "<div id=\"data_responses_header\" class=\"section_header row\">\n"; $__lxz .= "<div class=\"col data_cell_label\">Question</div>\n"; $__lxz .= "<div class=\"col data_cell_value\">Response</div>\n"; $__lxz .= "</div>\n"; $__lxz .= $__lym; my $__lyr = _bmz($__lxx, 1); my $__lys = 0; foreach $__lys (@{$__lyr}) { my $__lyq = undef; my ($__lzg, $__lzh) = _bmw(\@__lxy, $__lys->[0]); if ($__lzg == 1) { if (!(defined $__lzh->[0])) { $__lyq = ""; } else { $__lyq = $__lzh->[0]; } } $__lxz .= _bnf($__lys->[0], $__lyq, 0, 1, 1); } $__lxz .= _bnb(2); $__lxz .= "</div>"; $__lxz .= "<input type=\"hidden\" name=\"result_list\" value=\"" . $__lxx . "\">\n"; $__lxz .= "<style type=\"text/css\">.stage{width: auto;}</style>"; my $__lyt = "Mass Edit Data"; $__lyn = _boe($__lyt, $__lxz); } else { $__lyn = _bmn(); } return $__lyn; } sub _bmv() { my ($__lzi, $__lzj) = @_; my @__lyu = @{$__lzi}; my $__lyv = 0; my $__lyw = 0; my @__lyx = (); my $__lyy = $authlib9_14_2::_akm->{"num_data_tables"}; my $__lyz = ""; $__lzj = "`" . $__lzj . "`"; for (my $__lza = 1; $__lza <= $__lyy; $__lza++) { if ($__lza == 1) { if ($__lzj eq "`sys_RespNum`") { $__lzj = $authlib9_14_2::_akj . "_data1.sys_RespNum"; } $__lyz .= "SELECT DISTINCT " . $__lzj . " FROM " . $authlib9_14_2::_akj . "_data" . $__lza } else { $__lyz .= " INNER JOIN ". $authlib9_14_2::_akj . "_data" . $__lza . " ON " . $authlib9_14_2::_akj . "_data1.sys_RespNum = " . $authlib9_14_2::_akj . "_data" . $__lza . ".sys_RespNum"; } }; if ($__lyz) { $__lyz .= " WHERE " . $authlib9_14_2::_akj . "_data1.sys_RespNum IN (" . join(",", ("?") x scalar @__lyu) . ")"; } eval { $__lyw = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__lyz, 0), undef, @__lyu); @__lyx = @{$__lyw}; $__lyv = scalar @__lyx; }; if ($@) { authlib9_14_2::_zq(322, "Database error.", "Database error. Cannot read data record in view data.", $@); } return ($__lyv, $__lyw->[0]); } sub _bmw() { my ($__lzi, $__lzk) = @_; my @__lyu = @{$__lzi}; my $__lyv = 0; my $__lyw = 0; my @__lyx = (); my $__lyz = "SELECT DISTINCT `value` FROM `" . $authlib9_14_2::_akj . "_clists` WHERE `sys_RespNum` IN (" . join(",", ("?") x scalar @__lyu) . ") AND `list_name` = ?"; eval { $__lyw = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__lyz, 0), undef, @__lyu, $__lzk); @__lyx = @{$__lyw}; $__lyv = scalar @__lyx; }; if ($@) { authlib9_14_2::_zq(322, "Database error.", "Database error. Cannot read data record in view data.", $@); } return ($__lyv, $__lyw->[0]); } sub _bmx { my $__lzl = ""; my $__lzm = ""; my ($__mac, $__mad) = _bni(); if ($__mac) { $__lzl = _bmu(); } else { my ($__lzm, $__mae) = _bnj(); my @__lzn = @{$__mae}; if ($__lzm) { $__lzl = "<div class=\"error_msg\" style=\"padding: 10px;\">Error: " . $__lzm . " Please backup and fix the error.</div>"; } else { my $__lzo = 0; my $__lzp = $authlib9_14_2::_akn{"result_list"}; my @__lzq = split(",", $__lzp); authlib9_14_2::_xj(\@__lzn, \@__lzq, 1, 1); my $__lzr = _bmz($__lzp, 1); my $__lzs = 0; my $__lzt = 0; my $__lzu = 0; my @__lzv = (); foreach $__lzs (@{$__lzr}) { my $__lzw = $__lzs->[0]; if (exists $authlib9_14_2::_akn{$__lzw}) { my $__lzx = authlib9_14_2::_zo($authlib9_14_2::_akn{$__lzw}); $__lzt = 1; eval { my $__lzy = "UPDATE `" . $authlib9_14_2::_akj . "_clists` SET `value` = ? WHERE `sys_RespNum` IN (" . join(",", ("?") x scalar @__lzq) . ") AND `list_name` = ?"; $__lzu = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__lzy, 0)); $__lzu->execute(authlib9_14_2::_wh($__lzx), @__lzq, authlib9_14_2::_wh($__lzw)); $__lzu->finish; }; if ($@) { authlib9_14_2::_zq(257, "Database error.", "Database error. Cannot update clist on Admin Save Data.", $@); } push @__lzv, ($__lzw . " changed to " . $__lzx); } } if ($__lzt) { $authlib9_14_2::_ake->commit(); } my $__lzz = "A mass edit was performed for the following respondents: " . $__lzp . ". "; foreach my $__maa (@__lzn) { $__lzz .= $__maa->[0] . " changed to " . $__maa->[1] . "\n"; } foreach my $__mab (@__lzv) { $__lzz .= $__mab . "\n"; } _bsg("Mass Edit Data", $__lzz, $__mad); $__lzl .= "<center><div class=\"para\">" . scalar @__lzq . " respondents were successfully updated.</div>\n"; $__lzl .= "<div class=\"para\"><a id=\"view_all_data\" class=\"bold_link\">Return to View All Records</a></div>\n"; $__lzl .= authlib9_14_2::_xh(_bnu("view_all_data")); $__lzl .= "</center>"; } } return _boe("Mass Edit Successful", $__lzl); } sub _bmy { my ($__mbo, $__mbp, $__mbq) = @_; my $__maf = 0; my $__mag = ""; my $__mah = 0; my $__mai = 0; my $__maj = 0; my $__mak = 0; my $__mal = "result_list"; if ($__mbq){ $__mal = "removed_list"; } $__mak = _bms($__mal); my @__mam = split(",", $__mak); if (exists $authlib9_14_2::_akn{"result_list_index"}) { $__maj = $authlib9_14_2::_akn{"result_list_index"}; $__maj += $__mbp; } if (!$__mbo && (@__mam == 0 || $__maj >= @__mam || $__maj < 0)) { if (exists $authlib9_14_2::_akn{"view_data_results"}) { return _bmt(); } else { return _bmn(); } } if ($__mbo) { if (exists $authlib9_14_2::_akn{"hid_respnum"}) { $__maf = $authlib9_14_2::_akn{"hid_respnum"}; } } else { $__maf = $__mam[$__maj]; } my $__man = _bng($__maf); my $__mao = ""; my $__map = ""; my $__maq = 0; my @__mar = (); my $__mas = @{$__man}; my $__mat = 1; my $__mau = ""; my $__mav = ""; my $__maw = ""; my $__max = ""; my $__may = 0; my $__maz = 0; my %__mba = (); my $__mbb = ""; my $__mbc = ""; if ($__mas) { for ($__maq = 0; $__maq < $__mas; $__maq++) { $__may = 0; $__maz = 0; $__mat = 1; @__mar = (); $__mao = $__man->[$__maq]->[0]; $__map = $__man->[$__maq]->[1]; if ($__mao =~ m/^sys_/i) { $__mba{$__mao} = $__map; next; } ($__mav, $__maw, $__max) = authlib9_14_2::_abt($__mao); $__maz = authlib9_14_2::_aed($__mav); if ($__maz) { $__may = $__maz->{'_pj'}; } $__mbb .= _bnf($__mao, $__map, $__may, $__mbo); } if ($__mbo) { $__mag .= "<div class=\"warning\"><b>Warning:</b> Be careful editing data. Entering an invalid response may cause problems in data analysis.</div>\n"; $__mag .= "<input type=\"hidden\" name=\"hid_timestamp\" value=\"" . time() . "\">"; } $__mag .= "<div id=\"view_data_box\">"; $__mag .= _bnc(1, $__maf, $__mbo, $__maj, $__mbq); $__mag .= "<div class=\"section_header\">General Information</div>\n"; $__mag .= _bne("Internal Respondent Number", "", $__maf, -1, 0); $__mag .= _bne("Status", "", $__mba{"sys_RespStatus"}, -1, $__mbo); my @__mbd = (); if (exists $__mba{"sys_Browser"}) { push @__mbd, "Browser = " . htmlentity::encode($__mba{"sys_Browser"}); } if (exists $__mba{"sys_ScreenWidth"}) { push @__mbd, "Screen Width = " . htmlentity::encode($__mba{"sys_ScreenWidth"}); } if (exists $__mba{"sys_UserJavaScript"}) { my $__mbe = $__mba{"sys_UserJavaScript"}; my $__mbf = ""; if ($__mbe) { $__mbf = "Yes"; } else { $__mbf = "No"; } push @__mbd, "JavaScript = " . $__mbf; } if (exists $__mba{"sys_OperatingSystem"}) { push @__mbd, "Operating System = " . htmlentity::encode($__mba{"sys_OperatingSystem"}); } if (exists $__mba{"sys_IPAddress"}) { push @__mbd, "I.P. Address = " . htmlentity::encode($__mba{"sys_IPAddress"}); } if ($__mba{"sys_CAPIDeviceID"}) { push @__mbd, "Offine Surveys Device Id = " . htmlentity::encode($__mba{"sys_CAPIDeviceID"}); } if (@__mbd) { $__mag .= _bne("Respondent Computer", "", join("<br>", @__mbd), -1, 0); } if (length($__mba{"sys_DispositionCode"}) > 0) { $__mag .= _bne("Disposition", "", $__mba{"sys_DispositionCode"}, -1, $__mbo); } my $__mbg = "Eastern Standard Time"; my $__mbh = ""; my $__mbi = ""; my $__mbj = ""; my $__mbk = ""; if (exists $authlib9_14_2::_akp->{'_ow'}) { $__mbg = $authlib9_14_2::_akp->{'_ow'}; } $__mbh = authlib9_14_2::_aep($__mba{"sys_StartTimeStamp"}, $__mbg); $__mbi = authlib9_14_2::_aep($__mba{"sys_EndTimeStamp"}, $__mbg); $__mbj = authlib9_14_2::_aeq($__mba{"sys_ElapsedTime"}); $__mag .= _bne("Time Interview Began", "", $__mbh, -1, 0); $__mag .= _bne("Time Interview Finished", "", $__mbi, -1, 0); $__mag .= _bne("Elapsed Time", "", $__mbj, -1, 0); if ($__mbo && !exists($authlib9_14_2::_akn{"hid_admin_test_mode"})) { $__mag .= _bne("Restart Question", "", $__mba{"sys_LastQuestion"}, -1, 1); } $__mag .= "<div id=\"data_responses_header\" class=\"section_header row\">\n"; $__mag .= "<div class=\"col data_cell_label\">Question</div>\n"; $__mag .= "<div class=\"col data_cell_value\">Response</div>\n"; $__mag .= "</div>\n"; $__mag .= $__mbb; my $__mbl = _bmz($__maf); my $__mbm = 0; foreach $__mbm (@{$__mbl}) { $__mag .= _bnf($__mbm->[1], $__mbm->[2], 0, $__mbo); } $__mag .= _bnc(2, $__maf, $__mbo, $__maj, $__mbq); $__mag .= "</div>"; if ($__mbq){ $__mag .= "<input type=\"hidden\" name=\"removed_record\" value=\"1\">\n"; } $__mag .= "<input type=\"hidden\" name=\"$__mal\" value=\"" . $__mak . "\">\n"; $__mag .= "<input type=\"hidden\" name=\"result_list_index\" value=\"" . $__maj . "\">\n"; $__mag .= "<input type=\"hidden\" name=\"task\" value=\"vd_view\">\n"; $__mag .= "<input type=\"hidden\" name=\"hid_respnum\" value=\"" . $__maf . "\">\n"; $__mag .= "<style type=\"text/css\">.stage{width: auto;}</style>"; my $__mbn = ""; if ($__mbo) { $__mbn = "Edit Data"; } else { $__mbn = "View Data"; } $__mbc = _boe($__mbn, $__mag); } else { $__mbc = _bmn(); } return $__mbc; } sub _bmz { my ($__mbu, $__mbv) = @_; my @__mbr = split(",", $__mbu); my $__mbs = "SELECT " . ($__mbv ? "DISTINCT list_name" : "*") . " FROM `" . $authlib9_14_2::_akj . "_clists`"; if ($__mbu) { $__mbs .= " WHERE `sys_RespNum` IN (" . join(",", ("?") x scalar @__mbr) . ")"; } my $__mbt = 0; eval { if ($__mbu) { $__mbt = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mbs, 0), undef, @__mbr); } else { $__mbt = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mbs, 0)); } }; if ($@) { authlib9_14_2::_zq(256, "Database error.", "Database error. Cannot read clist record.", $@); } return $__mbt; } sub _bna { my $__mbw = _bmz(0); my $__mbx = 0; my @__mby = (); my %__mbz = (); my $__mca = ""; my %__mcb = (); my $__mcc = 0; my $__mcd = ""; foreach $__mbx (@{$__mbw}) { $__mcc = $__mbx->[0]; $__mca = $__mbx->[1]; $__mcd = $__mbx->[2]; if (not exists $__mbz{$__mca}) { $__mbz{$__mca} = 1; } $__mcb{$__mcc . "_" . $__mca} = $__mcd; } my @__mce = sort keys(%__mbz); return (\@__mce, \%__mcb); } sub _bnb { my ($__mcg) = @_; my $__mcf = "<div id=\"record_edit_row" . $__mcg . "\" class=\"row record_edit_row\">\n"; $__mcf .= "<button class=\"mass_edit_records_save green_button prompt_link\" disabled>Save Changes</button>\n"; $__mcf .= "<a class=\"mass_edit_records_cancel bold_link view_data_cancel\">Cancel</a>\n"; $__mcf .= "</div>"; return $__mcf; } sub _bnc { my ($__mci, $__mcj, $__mck, $__mcl, $__mcm) = @_; my $__mch = ""; $__mch .= "<div id=\"record_edit_row" . $__mci . "\" class=\"row"; if ($__mck) { $__mch .= " record_edit_row\">\n"; $__mch .= "<a id=\"view_data_save" . $__mci . "\" class=\"green_button prompt_link\">Save Changes</a>\n"; $__mch .= "<a id=\"view_data_cancel" . $__mci . "\" class=\"bold_link view_data_cancel\">Cancel</a>\n"; } else { $__mch .= "\">\n"; $__mch .= "<a id=\"view_data_previous" . $__mci . "\" class=\"next_button ui-corner-tl ui-corner-bl\">&lt;</a>"; $__mch .= "<a id=\"view_data_next" . $__mci . "\" class=\"next_button ui-corner-tr ui-corner-br\" style=\"border-left-width: 0px;\">&gt;</a>"; if (exists $ssiwebadmin9_14_2::_btf{"full_access"}) { $__mch .= "<a id=\"view_data_edit" . $__mci . "\" class=\"bold_link floating_button\">Edit</a>\n"; } if (exists $ssiwebadmin9_14_2::_btf{"full_access"}) { if ($__mci == 1) { $__mch .= "<input type=\"hidden\" id=\"delete_list\" name=\"delete_list\" value=\"" . $__mcj . "\">\n"; } if (!$__mcm) { $__mch .= "<a id=\"view_data_remove" . $__mci . "\" class=\"bold_link prompt_link floating_button\">Remove</a>\n"; } else { $__mch .= "<a id=\"view_data_restore" . $__mci . "\" class=\"bold_link prompt_link floating_button\">Restore</a>\n"; $__mch .= "<a id=\"view_data_delete" . $__mci . "\" class=\"bold_link prompt_link floating_button warning\">Permanently Delete</a>\n"; } } } $__mch .= "</div>\n"; return $__mch; } sub _bnd { my ($__mco, $__mcp) = @_; if (!(defined $__mcp)) { $__mcp = "Multiple Responses"; } my $__mcn .= "<label class=\"override\"><input name=\"" . $__mco . "_override\" type=\"checkbox\">Override</label>"; $__mcn .= "<input type=\"text\" class=\"text_input dummy_input\" size=\"20\" placeholder=\"" . $__mcp . "\" disabled>"; return $__mcn; } sub _bne { my ($__mde, $__mdf, $__mdg, $__mdc, $__mdh, $__mdi) = @_; my $__mcq = ""; my $__mcr = 0; my $__mcs = ""; my $__mct = 0; if (length(authlib9_14_2::_zo($__mdg)) > 0 || ($__mdi && !(defined $__mdg))) { $__mct = 1; } $__mcs .= "<div class=\"row "; if ($ssiwebadmin9_14_2::_btz) { $__mcs .= " alt_color1"; $ssiwebadmin9_14_2::_btz = 0; } else { $ssiwebadmin9_14_2::_btz = 1; } $__mcs .= "\"><div class=\"col data_cell_label\" "; $__mcs .= ">\n"; $__mcs .= $__mde; $__mcs .= "</div><div class=\"col data_cell_value\">"; my $__mcu = $__mdg; if ($__mde eq "Status" && $__mdc == -1 && (!$__mdh || $__mdi)) { if ($__mdg eq "5") { $__mdg = "Complete"; } elsif ($__mdg eq "4") { $__mdg = "Disqualified"; } elsif ($__mdg eq "2") { $__mdg = "Incomplete"; } } if ($__mdh) { if ($__mde eq "Status" && $__mdc == -1) { if ($__mdi) { $__mcs .= _bnd("sys_RespStatus", $__mdg); } $__mcs .= "\n<select name=\"sys_RespStatus\">\n"; $__mcs .= "<option value=\"2\" id=\"sys_RespStatus_2\">Incomplete</option>\n"; $__mcs .= "<option value=\"4\" id=\"sys_RespStatus_4\">Disqualified</option>\n"; $__mcs .= "<option value=\"5\" id=\"sys_RespStatus_5\">Complete</option>\n"; $__mcs .= "</select>\n"; if (defined $__mdg) { $__mcs .= authlib9_14_2::_xh("jQuery(\"#sys_RespStatus_" . authlib9_14_2::_wj($__mcu) . "\")[0].selected = true;\n"); } } elsif ($__mde eq "Restart Question" && $__mdc == -1) { my $__mcv = @{$authlib9_14_2::_ako}; my $__mcw = 0; my $__mcx = 0; my $__mcy = 0; my $__mcz = 0; my $__mda = 0; my $__mdb = 0; my $__mdc = 0; if ($__mdi) { $__mcs .= _bnd("sys_LastQuestion", $__mdg); } $__mcs .= "\n<select name=\"sys_LastQuestion\">\n"; my ($__mdj, $__mdk) = authlib9_14_2::_aee(0, 1, 0, 0, 0, 0, ""); $__mcs .= $__mdj; $__mcs .= "</select>\n"; my %__mdd = map { $_->[0] => 1 } @{$__mdk}; if ((defined $__mdg) && exists($__mdd{$__mdg})) { $__mcs .= authlib9_14_2::_xh("jQuery(\"#" . authlib9_14_2::_aek(authlib9_14_2::_wj($__mdg)) . "\")[0].selected = true;\n"); } } elsif ($__mde eq "Disposition" && $__mdc == -1) { if ($__mdi) { $__mcs .= _bnd("sys_DispositionCode", $__mdg); } $__mcs .= "<input type=\"tel\" class=\"numeric_input\" name=\"sys_DispositionCode\" size=\"3\" maxlength=\"3\" value=\"" . htmlentity::encode($__mdg) . "\">\n"; } else { if ($__mdi) { $__mcs .= _bnd(htmlentity::encode($__mde), htmlentity::encode($__mdg)); } $__mcs .= "<input type=\"text\" class=\"text_input\" name=\"" . htmlentity::encode($__mde) . "\" size=\"20\" value=\"" . htmlentity::encode($__mdg) . "\">\n"; } } else { if ($__mdc == &authlib9_14_2::_ANM || $__mdc == &authlib9_14_2::_ANN || $__mdc == &authlib9_14_2::_ANO) { $__mcr = index($__mdg, ","); $__mcq = substr($__mdg, $__mcr + 1); $__mdg = substr($__mdg, 0, $__mcr); $__mcs .= htmlentity::encode($__mdg); if ($__mcq) { $__mcs .= "&nbsp; Levels = " . htmlentity::encode($__mcq); } } else { if (length(authlib9_14_2::_zo($__mdg)) == 0) { $__mdg = "&nbsp;"; } else { if ($__mdc != -1) { $__mdg = htmlentity::encode($__mdg); } } $__mcs .= $__mdg; } } if ($__mdf ne "" && $__mct) { $__mcs .= _bnp($__mdf, 150, 1) . "\n"; } $__mcs .= "</div></div>\n"; return $__mcs; } sub _bnf { my ($__mdw, $__mdx, $__mdy, $__mdz, $__mea) = @_; my $__mdl = ""; my $__mdm = ""; my $__mdn = ""; my $__mdo = ""; my $__mdp = 0; my $__mdq = ""; my $__mdr = ""; my $__mds = ""; my $__mdt = 0; my $__mdu = ""; $__mdl = ""; ($__mdm, $__mdn, $__mdo) = authlib9_14_2::_abt($__mdw); if ($__mdy == 0 && $__mdm =~ m/^ACAIMP/i) { $__mdy = &authlib9_14_2::_ANM; } if (($__mdy == &authlib9_14_2::_ANG) || ($__mdy == &authlib9_14_2::_ANS) || ($__mdy == &authlib9_14_2::_ANT) || ($__mdy == &authlib9_14_2::_ANU) || ($__mdy == &authlib9_14_2::_ANW) || ($__mdy == &authlib9_14_2::_AOE)) { if ($__mdw !~ m/_other/) { if ($__mdy == &authlib9_14_2::_ANS) { ($__mdq, $__mdr, $__mds, $__mdt) = _bnl($__mdw, $__mdx); if (!$__mdt) { $__mdl = $__mdq . " - " . $__mdr; if ($__mds ne "") { $__mdl .= " - " . $__mds; } } } elsif ($__mdy == &authlib9_14_2::_AOE) { my ($__meb, $__mec) = _bnm($__mdw); $__mdl = $__meb . " - " . $__mec; } else { ($__mdl, $__mdp) = authlib9_14_2::_abu($__mdw, 1, $__mdx, 1); } } } elsif ($__mdy == &authlib9_14_2::_ANL) { $__mdl = _bnn($__mdw); } elsif ($__mdy == &authlib9_14_2::_ANM) { $__mdl = _bno($__mdw); } elsif ($__mdy == &authlib9_14_2::_ANX) { $__mdl = authlib9_14_2::_yx($__mdw, $__mdx) } elsif ($__mdy == &authlib9_14_2::_ANY) { my $__mdv = 0; if ($__mdw =~ m/BYO_(\d+)/i) { $__mdv = $1; } my ($__med, $__mee) = authlib9_14_2::_aas($__mdw, $__mdv, $__mdx, 1); if ($__med || $__mee) { $__mdl = $__med . " - " . $__mee; } } elsif ($__mdy == 0) { if ($__mdw =~ m/_others$/i) { next; } } $__mdu .= _bne($__mdw, $__mdl, $__mdx, $__mdy, $__mdz, $__mea); return $__mdu; } sub _bng { my ($__mep) = @_; my $__mef = 0; my $__meg = $authlib9_14_2::_akm->{"num_data_tables"}; my $__meh = ""; my $__mei = 0; my $__mej = 0; my @__mei = (); my @__mek = (); my ($__meq, $__mer, $__mes, $__met, $__meu) = _bnx(); for ($__mef = 1; $__mef <= $__meg; $__mef++) { $__meh = "SELECT * FROM `" . $authlib9_14_2::_akj . "_data" . $__mef . "` WHERE `sys_RespNum` = ?"; eval { $__mej = $authlib9_14_2::_ake->selectrow_arrayref(authlib9_14_2::_wn($__meh, 0), undef, $__mep); }; if ($@) { authlib9_14_2::_zq(322, "Database error.", "Database error. Cannot read data record in view data.", $@); } if ($__mej == 0) { $__mej = _bnz($__met->{$__mef}); } push @__mei, @{$__mej}; } my $__mel = ""; my $__mem = 0; my $__men = 0; my $__meo = 0; foreach $__meo (@{$__meu}) { $__mel = $__meo->[0]; if (exists $__mer->{$__mel}) { $__mem = $__mer->{$__mel}; $__men = $__mei[$__mem]; if (authlib9_14_2::_wq($__meo->[1])) { $__men = authlib9_14_2::_wi($__men); } else { $__men = authlib9_14_2::_abp($__men); } push @__mek, [$__mel, $__men]; } } return \@__mek; } sub _bnh { my ($__mfu) = @_; my $__mev = ""; my $__mew = ""; my $__mex = $authlib9_14_2::_akn{"hid_respnum"}; my ($__mfl, $__mfk) = _bni(); if ($__mfl) { $__mev = _bmy(0, 0, $__mfu); } else { my ($__mew, $__mfv) = _bnj(); my @__mey = @{$__mfv}; if ($__mew) { $__mev = "<div class=\"error_msg\" style=\"padding: 10px;\">Error: " . $__mew . " Please backup and fix the error.</div>"; } else { my $__mez = _bng($__mex); authlib9_14_2::_xj(\@__mey, $__mex, 1); my $__mfa = _bmz($__mex); my $__mfb = 0; my $__mfc = 0; my $__mfd = 0; my @__mfe = (); foreach $__mfb (@{$__mfa}) { my $__mff = $__mfb->[1]; if (exists $authlib9_14_2::_akn{$__mff}) { my $__mfg = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mff}); $__mfc = 1; eval { my $__mfh = "UPDATE `" . $authlib9_14_2::_akj . "_clists` SET `value` = ? WHERE `sys_RespNum` = ? AND `list_name` = ?"; $__mfd = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mfh, 0)); $__mfd->execute(authlib9_14_2::_wh($__mfg), $__mex, authlib9_14_2::_wh($__mff)); $__mfd->finish; }; if ($@) { authlib9_14_2::_zq(257, "Database error.", "Database error. Cannot update clist on Admin Save Data.", $@); } if ($__mfb->[2] ne $__mfg) { push @__mfe, ($__mff . " changed " . $__mfb->[2] . " to " . $__mfg); } } } if ($__mfc) { $authlib9_14_2::_ake->commit(); } $__mev = _bmy(0, 0, $__mfu); my $__mfi = _bnk($__mez, \@__mey, $__mex); foreach my $__mfj (@__mfe) { $__mfi .= $__mfj . "\n"; } _bsg("Edit Data", $__mfi, $__mfk); } } return $__mev; } sub _bni() { my $__mfk = 0; my $__mfl = 0; if (exists $authlib9_14_2::_akn{"hid_timestamp"}) { if ($authlib9_14_2::_akn{"hid_timestamp"} =~ m/^\d+$/) { $__mfk = $authlib9_14_2::_akn{"hid_timestamp"}; } else { authlib9_14_2::_acg(&authlib9_14_2::_AOU, 0, "hid_timestamp contains an invalid character: " . $authlib9_14_2::_akn{"hid_timestamp"}); delete $authlib9_14_2::_akn{"hid_timestamp"}; } } eval { my $__mfh = "SELECT `time_stamp` FROM `" . $authlib9_14_2::_akj . "_admin_log` WHERE `time_stamp` = " . $__mfk; $__mfl = @{$authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mfh, 0))}; }; if ($@) { authlib9_14_2::_zq(276, "Database error.", "Database error. Error checking Admin Log.", $@); } return ($__mfl, $__mfk); } sub _bnj() { my $__mew = ""; my $__mfg = ""; my $__mfm = 1; my $__mfn = 0; my $__mfo = 0; my $__mfp = 0; my $__mfq = 0; my $__mfr = 1; my @__mey = (); my $__mfs = ""; my $__mft = 0; my ($__mfw, $__mfx, $__mfy, $__mfz, $__mga) = _bnx(); foreach $__mft (@{$__mga}) { $__mfs = $__mft->[0]; if (exists $authlib9_14_2::_akn{$__mfs}) { $__mfg = authlib9_14_2::_zo($authlib9_14_2::_akn{$__mfs}); if (!authlib9_14_2::_wq($__mft->[1])) { if ($__mfg ne "" && !authlib9_14_2::_adv($__mfg)) { $__mew = "Invalid input. \"" . $__mfs . "\" should be a number."; last; } } push @__mey, [$__mfs, $__mfg]; } } return ($__mew, \@__mey); } sub _bnk { my ($__mge, $__mgf, $__mgg) = @_; my %__mgb = (); my $__mgc = ""; my $__mgd = 0; foreach $__mgd (@{$__mge}) { $__mgb{$__mgd->[0]} = $__mgd->[1]; } foreach $__mgd (@{$__mgf}) { if ($__mgb{$__mgd->[0]} ne $__mgd->[1]) { $__mgc .= $__mgd->[0] . " changed " . $__mgb{$__mgd->[0]} . " to " . $__mgd->[1] . "\n"; } } if ($__mgc) { $__mgc = "Respondent Number " . $__mgg . " values were changed.\n" . $__mgc; } return $__mgc; } sub _bnl { my ($__mhc, $__mhd) = @_; my $__mgh = 0; my $__mgi = 0; my $__mgj = ""; my $__mgk = ""; my $__mgl = ""; my $__mgm = 0; my $__mgn = 0; my $__mgo = 0; my $__mgp = 0; if ($__mhc =~ m/(.*?)\./) { $__mhc = $1; } if ($__mhc =~ m/^(.*?)_r(\d+)_c(\d+)$/) { $__mgj = $1; $__mgh = $2; $__mgi = $3; } elsif ($__mhc =~ m/^(.*?)_r(\d+)_c\*$/) { $__mgj = $1; $__mgh = $2; $__mgi = $__mhd; } elsif ($__mhc =~ m/^(.*?)_r\*_c(\d+)$/) { $__mgj = $1; $__mgh = $__mhd; $__mgi = $2; } elsif ($__mhc =~ m/^(.*?)_r(\d+)$/) { $__mgj = $1; $__mgh = $2; $__mgi = $__mhd; $__mgo = 1; } elsif ($__mhc =~ m/^(.*?)_c(\d+)$/) { $__mgj = $1; $__mgh = $__mhd; $__mgi = $2; $__mgo = 1; } if ($__mgj eq "") { return ("", "", "", $__mgp); } elsif ($__mgo && $__mhd eq "") { $__mgp = 1; return ("", "", "", $__mgp); } else { my $__mgq = tell $authlib9_14_2::_ajm; my $__mgr = $authlib9_14_2::_ahp{$__mgj}; my $__mgs = $__mgr->{'_pj'}; my $__mgt = $__mgr->{'_iz'}; seek $authlib9_14_2::_ajm, ($__mgt), 0; my $__mgu = authlib9_14_2::_zi(0); my $__mgv = 0; if ($__mgu->{'_pu'} eq "rows") { $__mgv = $__mgh - 1; } else { $__mgv = $__mgi - 1; } my $__mgw = ""; if ($__mgv >= 0) { my $__mgx = $__mgu->{'_pv'}->[$__mgv]; my $__mgy = ref($__mgx); if ($__mgy eq "ComboVar") { my $__mgz = authlib9_14_2::_adc($__mgx->{'_hj'}); $__mgw = authlib9_14_2::_abw($__mgz->[$__mhd - 1]); } } $__mgk = $__mgu->{'_mw'}; $__mgl = $__mgu->{'_co'}; $__mgm = authlib9_14_2::_adc($__mgk); $__mgn = authlib9_14_2::_adc($__mgl); my $__mha = ""; my $__mhb = ""; if ($__mgh > 0) { $__mha = authlib9_14_2::_abw($__mgm->[$__mgh - 1]); } if ($__mgi > 0) { $__mhb = authlib9_14_2::_abw($__mgn->[$__mgi - 1]); } seek $authlib9_14_2::_ajm, $__mgq, 0; return ($__mha, $__mhb, $__mgw, $__mgp); } } sub _bnm { my ($__mhs) = @_; my $__mhe = 0; my $__mhf = 0; my $__mhg = 0; my ($__mht, $__mhu, $__mhv) = authlib9_14_2::_abt($__mhs); my $__mhh = tell $authlib9_14_2::_ajm; my $__mhi = $authlib9_14_2::_ahp{$__mht}; my $__mhj = $__mhi->{'_iz'}; seek $authlib9_14_2::_ajm, ($__mhj), 0; my $__mhk = authlib9_14_2::_zi(0); my $__mhl = $__mhu; my $__mhm = authlib9_14_2::_adc($__mhk->{'_hj'}); my $__mhn = authlib9_14_2::_adc($__mhk->{'_hz'}); my $__mho = authlib9_14_2::_abw($__mhm->[$__mhl - 1]); my $__mhp = authlib9_14_2::_abw($__mhn->[$__mhl - 1]); my $__mhq = ""; my $__mhr = ""; if ($__mhk->{'_ee'} eq "left") { $__mhq = $__mho; $__mhr = $__mhp; } else { $__mhq = $__mhp; $__mhr = $__mho; } seek $authlib9_14_2::_ajm, $__mhh, 0; return ($__mhq, $__mhr); } sub _bnn { my ($__mic) = @_; my $__mhw = 0; my $__mhx = 0; my $__mhy = ""; my $__mhz = ""; if ($__mic =~ m/_Rating(\d+)_(\d+)/i) { $__mhw = $1; $__mhx = $2; my $__mia = authlib9_14_2::_za($__mic, 0); my $__mib = $__mia->{'_ae'}; $__mhy = $__mib->[$__mhw - 1]->{'_if'}; $__mhz = $__mib->[$__mhw - 1]->{'_hf'}->[$__mhx - 1]; return (authlib9_14_2::_zo($__mhy) . " - " . authlib9_14_2::_zo($__mhz)); } else { return ""; } } sub _bno { my ($__mih) = @_; my $__mid = 0; my $__mie = ""; if ($__mih =~ m/_Importance(\d+)/i) { $__mid = $1; my $__mif = authlib9_14_2::_za($__mih, 0); my $__mig = $__mif->{'_ae'}; $__mie = $__mig->[$__mid - 1]->{'_if'}; return authlib9_14_2::_zo($__mie); } else { return ""; } } sub _bnp { my ($__mii, $__mij, $__mik) = @_; if ($__mii ne "") { $__mii = _bse($__mii); if (length($__mii) > $__mij) { $__mii = substr($__mii, 0, $__mij) . "..."; } if ($__mik) { $__mii = " &nbsp;(" . $__mii . ")"; } } return $__mii; } sub _bnq { my $__mil = ""; my $__mim = "delete_list"; if (!exists $authlib9_14_2::_akn{$__mim}) { $__mim = "result_list"; } if (exists $authlib9_14_2::_akn{$__mim}) { my $__min = _bms($__mim); my @__mio = split(",", $__min); my $__mip = @__mio; my ($__miu, $__miv) = authlib9_14_2::_xk("sys_RespRemoved"); my $__miq = 0; eval { my $__mir = "UPDATE `$authlib9_14_2::_akj\_data$__miu` SET `sys_RespRemoved` = 1 WHERE `sys_RespNum` IN (" . join(',', ('?') x $__mip) . ");"; my $__mis = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mir, 0)); $__mis->execute(@__mio); $__miq = $__mis->rows; }; if ($@) { authlib9_14_2::_zq(371, "Database error.", "Database error. Cannot remove row.", $@); } $authlib9_14_2::_ake->commit(); my $__mit = " was"; if ($__miq > 1) { $__mit = "s were"; } $__mil .= "<center><div class=\"para\">$__miq record$__mit successfully removed from the study data set.</div><div class=\"para\">These records can now be found in the \"Removed Records\" section on the \"View/Edit\" page.</div>\n"; $__mil .= "<div class=\"para\"><a id=\"view_data_next1\" class=\"bold_link\">Return to data list</a></div>\n"; $__mil .= authlib9_14_2::_xh(_bnu("view_data_next1")); $__mil .= "</center>"; _bsg("Remove Records", "The following records were removed: $__min", 0); } return _boe("Remove Data", $__mil); } sub _bnr { my $__miw = ""; my $__mix = "delete_list"; if (!exists $authlib9_14_2::_akn{$__mix}) { $__mix = "removed_list"; } if (exists $authlib9_14_2::_akn{$__mix}) { my $__miy = _bms($__mix); my @__miz = split(",", $__miy); my $__mja = @__miz; my $__mjb = 0; my ($__mjj, $__mjk) = authlib9_14_2::_xk("sys_RespRemoved"); my $__mjc = "$authlib9_14_2::_akj\_data$__mjj"; my $__mjd = 0; eval { _bns($__mjc, \@__miz); $__mjb = @__miz; if ($__mjb > 0) { my $__mje = "UPDATE `$__mjc` SET `sys_RespRemoved` = 0 WHERE `sys_RespNum` IN (" . join(',', ('?') x $__mjb) . ");"; my $__mjf = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mje, 0)); $__mjf->execute(@__miz); $__mjd = $__mjf->rows; } }; if ($@) { authlib9_14_2::_zq(371, "Database error.", "Database error. Cannot restore row.", $@); } $authlib9_14_2::_ake->commit(); if ($__mjb == $__mja) { my $__mjg = " has"; if ($__mjd > 1) { $__mjg = "s have"; } $__miw .= "<center><div class=\"para\">$__mjd record$__mjg been restored successfully.</div>\n"; } else { my $__mjh = $__mja - $__mjb; my $__mjg = " was"; if ($__mjh > 1) { $__mjg = "s were"; } my $__mji = 0; if ($authlib9_14_2::_akv) { $__mji = &authlib9_14_2::_APK; } elsif ($authlib9_14_2::_akw) { $__mji = &authlib9_14_2::_APL; } $__miw .= "<center><div class=\"para\">$__mjb of $__mja records have been restored successfully. The remaining $__mjh record$__mjg not been restored because the per survey data record limit on your license ($__mji completed records) has been reached.</div>\n"; } $__miw .= "<div class=\"para\"><a id=\"view_data_next1\" class=\"bold_link\">Return to data list</a></div>\n"; $__miw .= authlib9_14_2::_xh(_bnu("view_data_next1")); $__miw .= "</center>"; _bsg("Restore Records", "The following records were restored: $__miy", 0); } return _boe("Restore Data", $__miw); } sub _bns { my ($__mjv, $__mjw) = @_; if ($authlib9_14_2::_akv || $authlib9_14_2::_akw) { my $__mjl = @{$__mjw}; my ($__mjx, $__mjy) = authlib9_14_2::_xk("sys_RespStatus"); my $__mjm = "$authlib9_14_2::_akj\_data$__mjx"; my %__mjn = (); $__mjn{$__mjv} = 1; $__mjn{$__mjm} = 1; my $__mjo = join(", ", map { "`$_`" } sort keys %__mjn); my $__mjp = "SELECT COUNT(*) FROM $__mjo WHERE (`sys_RespRemoved` IS NULL OR `sys_RespRemoved` = 0) AND `sys_RespStatus` = " . &authlib9_14_2::_AOH . ";"; my $__mjq = $authlib9_14_2::_ake->selectrow_arrayref(authlib9_14_2::_wn($__mjp, 0))->[0]; my $__mjr = 0; if ($authlib9_14_2::_akv) { $__mjr = &authlib9_14_2::_APK - $__mjq; } elsif ($authlib9_14_2::_akw) { $__mjr = &authlib9_14_2::_APL - $__mjq; } my @__mjs = (); $__mjp = "SELECT sys_RespNum, sys_RespStatus FROM $__mjo WHERE sys_RespNum IN (" . join(',', ('?') x $__mjl) . ");"; my $__mjt = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mjp, 0)); $__mjt->execute(@{$__mjw}); while (my $__mju = $__mjt->fetchrow_arrayref) { my ($__mjz, $__mka) = @{$__mju}; if ($__mka == &authlib9_14_2::_AOF || $__mka == &authlib9_14_2::_AOG) { push @__mjs, $__mjz; } elsif ($__mka == &authlib9_14_2::_AOH && $__mjr > 0) { push @__mjs, $__mjz; $__mjr--; } } @{$__mjw} = @__mjs; } } sub _bnt { my $__mkb = ""; if (exists $authlib9_14_2::_akn{"removed_list"}) { my $__mkc = _bms("removed_list"); my @__mkd = split(",", $__mkc); my $__mke = @__mkd; my $__mkf = join(',', ('?') x $__mke); my $__mkg = $authlib9_14_2::_akm->{"num_data_tables"}; my $__mkh = 0; for (my $__mki = 1; $__mki <= $__mkg; $__mki++) { eval { my $__mkj = "DELETE FROM `$authlib9_14_2::_akj\_data$__mki` WHERE `sys_RespNum` IN ($__mkf);"; my $__mkk = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mkj, 0)); $__mkk->execute(@__mkd); $__mkh = $__mkk->rows; }; if ($@) { authlib9_14_2::_zq(235, "Database error.", "Database error. Cannot delete row.", $@); } } eval { my $__mkj = "DELETE FROM `$authlib9_14_2::_akj\_history` WHERE `sys_RespNum` IN ($__mkf);"; my $__mkk = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mkj, 0)); $__mkk->execute(@__mkd); }; if ($@) { authlib9_14_2::_zq(358, "Database error.", "Database error. Cannot delete respondent from history.", $@); } $authlib9_14_2::_ake->commit(); my $__mkl = " was"; if ($__mkh > 1) { $__mkl = "s were"; } $__mkb .= "<center><div class=\"para\">$__mkh record$__mkl successfully deleted from the study data set.</div>\n"; $__mkb .= "<div class=\"para\"><a id=\"view_data_next1\" class=\"bold_link\">Return to data list</a></div>\n"; $__mkb .= authlib9_14_2::_xh(_bnu("view_data_next1")); $__mkb .= "</center>"; _bsg("Delete Records", "The following records were deleted: $__mkc", 0); } return _boe("Delete Data", $__mkb); } sub _bnu { my ($__mkn, $__mko) = @_; my $__mkm = ""; $__mkm .= "CreateLink(\"" . $__mkn . "\", " . $__mko . ");\n"; return $__mkm; } sub _bnv { my ($__mld, $__mle, $__mlf, $__mlg) = @_; my $__mkp = "\r\n"; my $__mkq = 0; my $__mkr = 0; my $__mks = 0; my $__mkt = 0; my $__mku = ""; my $__mkv = ""; my $__mkw = {}; my @__mkx = (); my $__mky = ""; my $__mkz = "Eastern Standard Time"; if (exists $authlib9_14_2::_akp->{'_ow'}) { $__mkz = $authlib9_14_2::_akp->{'_ow'}; } binmode STDOUT; print _bod($ssiwebadmin9_14_2::_bts . "_data.csv"); my ($__mlh, $__mli) = _bna(); my $__mla = ""; my @__mlb = (); foreach $__mla (@{$__mlh}) { my $__mlc = _boa($__mla); push @__mlb, $__mlc; } eval { $__mku = "SELECT "; if ($authlib9_14_2::_aku && $authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__mku .= "TOP " . &authlib9_14_2::_API . " "; } $__mku .= "`" . "$authlib9_14_2::_akj\_data1" . "`.`sys_RespNum` FROM "; if ($__mld) { $__mkv .= "`sys_RespStatus` = " . &authlib9_14_2::_AOH; } if ($__mle) { if ($__mkv) { $__mkv .= " OR "; } $__mkv .= "`sys_RespStatus` = " . &authlib9_14_2::_AOF; } if ($__mlf) { if ($__mkv) { $__mkv .= " OR "; } $__mkv .= "`sys_RespStatus` = " . &authlib9_14_2::_AOG; } if ($__mkv) { push @__mkx, "($__mkv)"; } if (!$__mlg) { push @__mkx, authlib9_14_2::_aev($__mkw, 1); } $__mku = authlib9_14_2::_aeu($__mku, \@__mkx, $__mkw); if ($authlib9_14_2::_akv || $authlib9_14_2::_akw) { $__mky = " ORDER BY `sys_RespStatus` DESC"; $__mku .= $__mky; } if ($authlib9_14_2::_aku && $authlib9_14_2::_ahn->{'_pj'} ne "odbc") { $__mku .= " LIMIT " . &authlib9_14_2::_API; } $__mkt = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mku, 0)); $__mks = @{$__mkt}; }; if ($@) { authlib9_14_2::_zq(264, "Database error.", "Database error. Cannot read respnum column in download area.", $@); } my ($__mlj, $__mlk, $__mll, $__mlm, $__mln) = _bnx(\@__mlb); print $__mlj . $__mkp; _bnw($__mkt, $__mlk, $__mll, $__mkp, $__mlh, $__mli, $__mkz, $__mlm, $__mky); _bsg("Download Data", "Downloaded " . $__mks . " records.", 0); } sub _bnw { my ($__mmg, $__mmh, $__mmi, $__mmj, $__mmk, $__mml, $__mmm, $__mmn, $__mmo) = @_; my $__mlo = 0; my @__mlp = (); my $__mlq = 200; foreach $__mlo (@{$__mmg}) { push @__mlp, $__mlo->[0]; } my $__mlr = $authlib9_14_2::_akm->{"num_data_tables"}; my $__mls = 1; my $__mlt = ""; my $__mlu = 0; my $__mlv = 0; my $__mlw = 0; my $__mlx = {}; my $__mly = 0; my $__mlz = {}; my $__mma = 0; my $__mmb = 0; my $__mmc = 0; my $__mmd = 0; my @__mme = (); while(@__mlp) { $__mlw = 0; $__mlx = {}; $__mly = 0; $__mlz = {}; if ($__mlq > @__mlp) { $__mlq = @__mlp; } @__mme = splice @__mlp, 0, $__mlq; for ($__mls = 1; $__mls <= $__mlr; $__mls++) { $__mlz = {}; $__mlt = "SELECT * FROM `$authlib9_14_2::_akj\_data$__mls` WHERE `sys_RespNum` IN (" . join(",", @__mme) . ")"; if ($__mmo && $__mls == 1) { $__mlt .= $__mmo; } eval { my $__mmf = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mlt, 0)); $__mmf->execute(); $__mly = $__mmf->fetchall_arrayref(undef, $__mlq); $__mmf->finish; }; if ($@) { authlib9_14_2::_zq(320, "Database error.", "Database error. Cannot read data record in multi table download area. $__mlt", $@); } foreach $__mma (@{$__mly}) { $__mlz->{$__mma->[0]} = $__mma; } if ($__mlw == 0) { $__mlw = $__mly; $__mlx = $__mlz; } else { foreach $__mmb (keys %{$__mlx}) { $__mmc = $__mlx->{$__mmb}; if (exists $__mlz->{$__mmb}) { $__mmd = $__mlz->{$__mmb}; } else { $__mmd = _bnz($__mmn->{$__mls}); } push @{$__mmc}, @{$__mmd}; } } } _bob($__mlw, $__mmh, $__mmi, $__mmj, $__mmk, $__mml, $__mmm); } } sub _bnx { my ($__mmz) = @_; my $__mmp = 0; my $__mmq = ""; my $__mmr = 0; my $__mms = 0; my $__mmt = ""; my $__mmu = ""; my $__mmv = 0; my @__mmw = (); my $__mmx = $authlib9_14_2::_akm->{"num_data_tables"}; my $__mmy = {}; for ($__mmp = 1; $__mmp <= $__mmx; $__mmp++) { ($__mmq, $__mmr, $__mms, $__mmt, $__mmu) = authlib9_14_2::_wm($authlib9_14_2::_akj . "_data" . $__mmp); eval { $__mmv = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mmq, 0)); $__mmy->{$__mmp} = @{$__mmv}; }; if ($@) { authlib9_14_2::_zq(321, "Database error.", "Database error. Cannot get table description.", $@); } push @__mmw, @{$__mmv}; } my ($__mna, $__mnb) = _boc(\@__mmw, $__mmr, $__mms, 0); my ($__mnc, $__mnd, $__mne, $__mnf) = _brg($authlib9_14_2::_akm->{"layout_build"}, 0, 1); if ($__mnf) { $__mnc = $__mna; } my ($__mng, $__mnh) = _bny($__mnc, $__mnb, $__mmz); return ($__mng, $__mnb, $__mnh, $__mmy, $__mnc); } sub _bny { my ($__mnn, $__mno, $__mnp) = @_; my $__mni = 0; my $__mnj = ""; my $__mnk = 0; my @__mnl = (); my $__mnm = ""; foreach $__mni (@{$__mnn}) { $__mnm = $__mni->[0]; $__mnj .= _boa($__mnm) . ","; if ($__mnm eq "sys_RespNum") { $__mnj .= _boa("sys_StartTime") . ","; $__mnj .= _boa("sys_EndTime") . ","; } $__mnk = 0; if (authlib9_14_2::_wq($__mni->[1])) { $__mnk = 1; } if (exists $__mno->{$__mnm}) { push @__mnl, [$__mno->{$__mnm}, $__mnk]; } } if ($__mnp) { $__mnj .= join(",", @{$__mnp}); } $__mnj =~ s/,$//; return ($__mnj, \@__mnl); } sub _bnz { my ($__mns) = @_; my @__mnq = (); my $__mnr = 0; for ($__mnr = 0; $__mnr < $__mns; $__mnr++) { push @__mnq, undef; } return \@__mnq; } sub _boa { my ($__mnu) = @_; $__mnu =~ s/(?:\r\n)+|\n+/ /og; my $__mnt = 0; if ($__mnu =~ s/"/""/go) { $__mnt = 1; } if ($__mnu =~ m/,/o) { $__mnt = 1; } if ($__mnu =~ m/\r|\n/o) { $__mnt = 1; } if ($__mnt) { $__mnu = '"' . $__mnu . '"'; } return $__mnu; } sub _bob { my ($__moi, $__moj, $__mok, $__mol, $__mom, $__mon, $__moo) = @_; my $__mnv = 0; my $__mnw = ""; my $__mnx = ""; my $__mny = 0; my $__mnz = ""; my $__moa = 0; my $__mob = @{$__mok}; my $__moc = 0; my $__mod = 0; foreach $__mnv (@{$__moi}) { $__mny = $__mnv->[0]; $__mnx = ""; for ($__moa = 0; $__moa < $__mob; $__moa++) { $__moc = $__mok->[$__moa][0]; $__mnw = $__mnv->[$__moc]; if ($__mok->[$__moa][1]) { $__mnw = _boa(authlib9_14_2::_wi($__mnw)); } else { $__mnw = authlib9_14_2::_abp($__mnw); } $__mnx .= $__mnw . ","; if ($__moa == 0) { my $__moe = $__moj->{"sys_StartTimeStamp"}; my $__mof = $__mnv->[$__moe]; $__mnx .= _boa(authlib9_14_2::_aep($__mof, $__moo)) . ","; my $__mog = $__moj->{"sys_EndTimeStamp"}; my $__moh = $__mnv->[$__mog]; $__mnx .= _boa(authlib9_14_2::_aep($__moh, $__moo)) . ","; } } foreach $__mnz (@{$__mom}) { $__mnx .= _boa(authlib9_14_2::_wi($__mon->{$__mny . "_" . $__mnz})) . ","; } $__mnx =~ s/,$//; print $__mnx; print $__mol; } } sub _boc { my ($__mox, $__moy, $__moz, $__mpa) = @_; my $__mop = 0; my $__moq = 0; my $__mor = 0; my $__mos = ""; my @__mot = (); my %__mou = (); my %__mov = (); my $__mow = ""; foreach $__mop (@{$__mox}) { $__moq++; $__mor = 0; $__mow = ""; $__mos = $__mop->[$__moy]; if ($__mos eq "sys_ShowPrev" || $__mos eq "sys_CheckSum") { next; } if ($__mos =~ m/^sys_RespNum$/i) { $__mor = 1; } if ($__mos !~ m/^_OLD/i && !($__mor && $__mpa)) { if (authlib9_14_2::_wq($__mop->[$__moz])) { $__mow = "text"; } push @__mot, [$__mos, $__mow]; $__mou{$__mos} = $__moq - 1; } if ($__mor) { $__mpa = 1; } } return (\@__mot, \%__mou); } sub _bod { my ($__mpg) = @_; my $__mpb = ""; my $__mpc = 0; my $__mpd = 0; my $__mpe = ""; $__mpe .= "Content-Type: application/octet-stream;\n"; $__mpe .= "Content-Disposition: attachment; filename=\"" . $__mpg . "\"\r\n\r\n"; if (exists($ENV{'MOD_PERL'}) && defined($ENV{'MOD_PERL'})) { $__mpc = 1; $__mpd = $ENV{'MOD_PERL'}; $__mpd =~ s/mod_perl\/(\d\.\d)(.*?)$/$1/i; } if ($ENV{'PERL_SEND_HEADER'} || ($__mpc == 0)) { $__mpb .= $__mpe; } else { if ($__mpd < 1.9) { my $__mpf = Apache->request; $__mpf->content_type('application/octet-stream;'); $__mpf->header_out("Content-Disposition" => "attachment; filename=\"" . $__mpg . "\""); $__mpf->send_http_header; } else { $__mpb .= $__mpe; } } $__mpb .= chr(239) . chr(187) . chr(191); return $__mpb; } sub _boe { my ($__mpi, $__mpj, $__mpk) = @_; my $__mph = "<div class=\"stage\">"; $__mph .= "<div class=\"stage_title\">" . $__mpi . "</div>"; $__mph .= "<div class=\"stage_content\">"; if ($__mpk) { $__mph .= "<div class=\"warning\">" . $__mpk . "</div>"; } $__mph .= $__mpj . "</div>"; $__mph .= "</div>"; return $__mph; } sub _bof { my $__mpl = 0; my $__mpm = 0; my $__mpn = 0; my $__mpo = 0; my $__mpp = ""; my $__mpq = {}; eval { $__mpp = "SELECT `sys_RespStatus`, COUNT(*) FROM "; my @__mpr = (); push @__mpr, authlib9_14_2::_aev($__mpq, 1); if ($authlib9_14_2::_aku) { _bps(&authlib9_14_2::_API, \@__mpr); } $__mpp = authlib9_14_2::_aeu($__mpp, \@__mpr, $__mpq); $__mpp .= " GROUP BY `sys_RespStatus` ORDER BY `sys_RespStatus`"; $__mpo = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mpp, 0)); }; if ($@ || $__mpo == 0) { return(0, "Database error. Cannot read all rows to get status in data1 table.", $@); } my $__mps = 0; foreach $__mps (@{$__mpo}) { if ($__mps->[0] == &authlib9_14_2::_AOH) { $__mpl += $__mps->[1]; } elsif ($__mps->[0] == &authlib9_14_2::_AOF) { $__mpm += $__mps->[1]; } elsif ($__mps->[0] == &authlib9_14_2::_AOG) { $__mpn += $__mps->[1]; } } return($__mpl, $__mpm, $__mpn); } sub _bog { my ($__mqd, $__mqe, $__mqf) = @_; my $__mpt = ""; my $__mpu = 0; $__mpt .= _bsb(); if (!$__mqe) { $__mpt .= "<style type=\"text/css\">\n"; $__mpt .= ".stage{display: none;}\n"; $__mpt .= "</style>\n"; $__mpt .= "<script type=\"text/javascript\">\n"; $__mpt .= "var global_chart_data = [];\n"; $__mpt .= "var global_path = \"admin" . $authlib9_14_2::_aib . "\";\n"; $__mpt .= "jQuery(document).ready(function(){InitializePage();});\n"; $__mpt .= "function InitializePage(){\n"; $__mpt .= "SetUpPage();\n"; if (($__mqd eq "study_summary") && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { my ($__mqg, $__mqh) = _bmb(); if (!$__mqg) { my $__mpv = (-s $authlib9_14_2::_ahv{'_aml'} . $authlib9_14_2::_akh . "_config.cgi"); my $__mpw = $__mqh . $authlib9_14_2::_akh . "_config.cgi"; $__mpt .= "RunSecurityTest(" . $__mpv . ",\"" . $__mpw . "\",\"" . $__mqh . "\");"; } } $__mpt .= "}\n"; $__mpt .= "\n</script>\n"; } $__mpt .= "</head>\n"; $__mpt .= "<body"; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"} || exists $authlib9_14_2::_akn{"hid_c2_test_mode"} || $ssiwebadmin9_14_2::_btt) { $__mpt .= " class=\""; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"} || exists $authlib9_14_2::_akn{"hid_c2_test_mode"}) { $__mpt .= "test_mode"; } if ($ssiwebadmin9_14_2::_btt) { $__mpt .= " c2_mode"; } $__mpt .= "\""; } $__mpt .= ">\n"; $__mpt .= "<form method=\"post\" action=\"" . "admin" . $authlib9_14_2::_aib . "\" name=\"mainform\" id=\"mainform\">\n"; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"}) { $__mpt .= "<div id=\"test_mode_header\"><span id=\"test_title\">"; $__mpt .= "Test Mode - Test Survey Data"; $__mpt .= "</span></div>"; $__mpt .= "<input type=\"hidden\" name=\"hid_admin_test_mode\" value=\"" . $authlib9_14_2::_akn{"hid_admin_test_mode"} . "\">\n"; } elsif (exists $authlib9_14_2::_akn{"hid_c2_test_mode"}) { $__mpt .= "<div id=\"test_mode_header\"><span id=\"test_title\">"; $__mpt .= "Test Survey Data"; $__mpt .= "</span></div>"; $__mpt .= "<input type=\"hidden\" name=\"hid_c2_test_mode\" value=\"" . $authlib9_14_2::_akn{"hid_c2_test_mode"} . "\">\n"; } if (exists $authlib9_14_2::_akn{"hid_session"}) { $__mpt .= "<input type=\"hidden\" name=\"hid_session\" value=\"" . $authlib9_14_2::_akn{"hid_session"} . "\">\n"; } $__mpt .= "<input type=\"hidden\" name=\"hid_studyname\" value=\"" . htmlentity::encode($authlib9_14_2::_akh) . "\">\n"; $__mpt .= "<input type=\"hidden\" name=\"hid_page\" id=\"hid_page\" value=\"" . htmlentity::encode($authlib9_14_2::_akn{"hid_page"}) . "\">\n"; $__mpt .= "<input type=\"hidden\" name=\"hid_original_page\" id=\"hid_original_page\" value=\"" . htmlentity::encode($authlib9_14_2::_akn{"hid_page"}) . "\">\n"; $__mpt .= "<input type=\"hidden\" name=\"hid_report_settings\" id=\"hid_report_settings\" value=\"\">"; $__mpt .= _bsa(); if (!$__mqe) { my $__mpx = ""; my $__mpy = 0; my $__mpz = 0; my $__mqa = ""; my $__mqb = 0; if (exists $ssiwebadmin9_14_2::_btf{"full_access"}) { my $__mqc = 0; ($__mqa, $__mqc) = _bru($__mqf, 0); if (!$ssiwebadmin9_14_2::_bua) { ($__mpy, $__mpz, $__mqb) = _bpc(); } } if (exists $ssiwebadmin9_14_2::_btf{"study_summary"} || exists $ssiwebadmin9_14_2::_btf{"download_data"} || exists $ssiwebadmin9_14_2::_btf{"view_data"}) { $__mpx .= "<li class=\"menu_header\" style=\"margin-top: 0px;\">Data Management</li>\n"; } if (exists $ssiwebadmin9_14_2::_btf{"study_summary"}) { $__mpx .= _boh("Summary", "study_summary"); } if (exists $ssiwebadmin9_14_2::_btf{"download_data"}) { $__mpx .= _boh("Download", "download_data"); } if (exists $ssiwebadmin9_14_2::_btf{"view_data"}) { $__mpx .= _boh("View / Edit", "view_all_data"); } if (exists $ssiwebadmin9_14_2::_btf{"view_data"}) { $__mpx .= _boh("Search", "search_data"); } if (exists $ssiwebadmin9_14_2::_btf{"data_reports"} || exists $ssiwebadmin9_14_2::_btf{"password_reports"} || exists $ssiwebadmin9_14_2::_btf{"incompletes_report"}) { $__mpx .= "<li class=\"menu_header\">Reports</li>\n"; } if (exists $ssiwebadmin9_14_2::_btf{"data_reports"}) { $__mpx .= _boh("Data", "data_reports"); } if (exists $ssiwebadmin9_14_2::_btf{"password_reports"}) { authlib9_14_2::_yo(); if ($authlib9_14_2::_aky && exists $authlib9_14_2::_aky->{'_ju'}) { $__mpx .= _boh("Identifiers", "password_reports"); } } if (exists $ssiwebadmin9_14_2::_btf{"incompletes_report"}) { $__mpx .= _boh("Incompletes", "incompletes_report"); } if (exists $ssiwebadmin9_14_2::_btf{"test_survey"} || exists $ssiwebadmin9_14_2::_btf{"advanced"} || exists $ssiwebadmin9_14_2::_btf{"close_survey"} || exists $ssiwebadmin9_14_2::_btf{"reset_survey"}) { $__mpx .= "<li class=\"menu_header\">Survey Admin</li>\n"; } if (exists $ssiwebadmin9_14_2::_btf{"close_survey"}) { $__mpx .= _boh("Close Survey", "close_survey"); } if (exists $ssiwebadmin9_14_2::_btf{"test_survey"} && !$ssiwebadmin9_14_2::_btt && $authlib9_14_2::_ahn->{'_pj'} ne "sqlite") { $__mpx .= _boh("Test Mode", "test_survey"); } if (exists $ssiwebadmin9_14_2::_btf{"advanced"}) { $__mpx .= _boh("Advanced", "advanced"); } if ($__mpz && exists $ssiwebadmin9_14_2::_btf{"survey_log"}) { $__mpx .= _boh("Survey Log", "survey_log"); } if (exists $ssiwebadmin9_14_2::_btf{"reset_survey"}) { $__mpx .= _boh("Reset Survey", "reset_survey"); } if (exists($authlib9_14_2::_akn{"hid_admin_test_mode"}) && !$ssiwebadmin9_14_2::_btt) { $__mpx .= _boh(_bqt("test_survey_run2", 1), "test_survey_run2", 1); $__mpx .= _boh("Exit Test Mode", "test_survey_return2"); } if ($__mpx) { $__mpt .= "<div id=\"menu\"><ul>" . $__mpx . "</ul></div>\n"; $__mpu = 1; } if ($__mqa && (($__mqd eq "study_summary" || $__mqd eq "test_survey") && !(exists $authlib9_14_2::_akn{"hid_admin_test_mode"}))) { $__mpt .= $__mqa; } if (($__mqd eq "study_summary") && (exists $ssiwebadmin9_14_2::_btf{"full_access"})) { $__mpt .= _bma(); if ($__mpy) { $__mpt .= "<div class=\"error_log_alert\"><span class=\"error_msg\">A new error or warning has been generated for this survey.</span>\n"; $__mpt .= "<a href=\"#\" id=\"view_survey_log_link\" class=\"bold_link\">View Survey Log</a>\n"; $__mpt .= "</div>\n"; } if ($__mqb) { $__mpt .= "<div class=\"error_log_alert\"><span class=\"error_msg\">An error occurred while trying to read in the error_log.cgi file. Contact Sawtooth Software.</div>\n"; } } $__mpt .= "<div class=\"loading\">\n"; $__mpt .= "<img src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/loading.gif\" alt=\"Processing...\">\n"; $__mpt .= "</div>\n"; } if ($__mqd eq "study_summary" && $authlib9_14_2::_akm && $authlib9_14_2::_akm->{"close_survey"} == 1) { $__mpt .= "<div id=\"closed_survey_global_note\" class=\"stage\">\n"; $__mpt .= "<div class=\"stage_title\">Survey Closed</div>"; $__mpt .= "<div class=\"stage_content\">\n"; $__mpt .= "The survey is now <span class=\"sans_bold\">closed</span>."; $__mpt .= "&nbsp;Respondents are <span class=\"sans_bold\">not</span> able to enter the survey."; $__mpt .= "<a id=\"open_survey_link\" class=\"bold_link\">Open the survey</a>"; $__mpt .= "</div></div>"; } if (!$__mqe && !$__mpu) { $__mpt .= "<div style=\"padding: 10px;\">No menu items are available for this user. Check your Admin Module settings.</div>"; } return $__mpt; } sub _boh { my ($__mqj, $__mqk, $__mql) = @_; my $__mqi .= ""; $__mqi .= "<li"; if ($__mql) { $__mqi .= " id=\"test_mode_menu_item\""; } $__mqi .= " class=\"menu_item\"><a href=\"#\" id=\"" . $__mqk . "\" class=\"menu_link\">" . $__mqj . "</a></li>\n"; return $__mqi; } sub _boi { my ($__mqn, $__mqo) = @_; my $__mqm = ""; print authlib9_14_2::_zu(); $__mqm .= _boj(); $__mqm .= "</form>\n"; $__mqm .= "</body></html>"; return $__mqm; } sub _boj { my $__mqp = ""; $__mqp .= "<div id=\"alert_dialog\" class=\"dialog\">\n"; $__mqp .= "</div>"; return $__mqp; } sub _bok { my ($__mqr) = @_; my $__mqq = authlib9_14_2::_zb(); $__mqq .= _brz(); $__mqq .= "<div id=\"sign_in_greeting\">Sign in to Lighthouse Admin</div>\n"; if ($__mqr) { $__mqq .= "<div id=\"sign_in_error\">"; $__mqq .= $__mqr; $__mqq .= "</div>"; } $__mqq .= "<noscript>"; $__mqq .= "<center><span style='color:#ff0000'><b>JavaScript is disabled. Please enable JavaScript to continue.</b></span></center><br><br>"; $__mqq .= "</noscript>"; $__mqq .= "<script type=\"text/javascript\">\n"; $__mqq .= "var strVersion = navigator.appVersion;\n"; $__mqq .= "var intVersion = 0;\n"; $__mqq .= "var indexMSIE = strVersion.indexOf(\"MSIE\");\n"; $__mqq .= "if (indexMSIE > -1){\n"; $__mqq .= "intVersion = parseFloat(strVersion.substring(indexMSIE + 4));\n"; $__mqq .= "if (intVersion < 6){\n"; $__mqq .= "document.write(\"<center><span style='color:#ff0000'><b>The Admin Module does not support Microsoft Internet Explorer version 5 or less.</b></span></center><br>\");\n"; $__mqq .= "}}\n"; $__mqq .= "\n</script>\n"; $__mqq .= _bsc(); $__mqq .= _bsd(); $__mqq .= _boj(); $__mqq .= "</form>"; $__mqq .= "</div>"; return $__mqq; } sub _bol { my $__mqs = $authlib9_14_2::_ahv{'_aml'} . $authlib9_14_2::_akh . "_access.cgi"; my $__mqt = {}; if (-e $__mqs) { my ($__mqv, $__mqw) = authlib9_14_2::_yg($__mqs, "read", 0, 1); authlib9_14_2::_zd($__mqv, 0); my $__mqu = ""; while(!eof($__mqv)) { $__mqu .= <$__mqv>; } close $__mqv; $__mqt = eval($__mqu); if ($@) { authlib9_14_2::_zq(192, "", "Problem reading " . $__mqs, $@); } } return $__mqt; } sub _bom { my ($__mrj) = @_; my $__mqx = 0; my $__mqy = 0; my $__mqz = ""; my $__mra = ""; if (exists $authlib9_14_2::_akn{"expired"}) { $__mqz = "Your session has expired. Please sign in again."; } elsif (exists $authlib9_14_2::_akn{"hid_session"}) { my $__mrb = $authlib9_14_2::_akn{"hid_session"}; my $__mrc = {}; foreach my $__mrd (keys %{$__mrj}) { my $__mre = $__mrj->{$__mrd}->{"Password"}; $__mrc->{$__mrd . "|" . $__mre} = $__mrj->{$__mrd}->{"FullAccess"}; } ($__mqx, $__mqy) = _bop($__mrb, $__mrc); if (!$__mqx) { $__mqz = "Your session has expired. Please sign in again."; } } else { if (exists $authlib9_14_2::_akn{"username"} && exists $authlib9_14_2::_akn{"password"}) { my $__mrf = $authlib9_14_2::_akn{"username"}; my $__mrg = $authlib9_14_2::_akn{"password"}; foreach my $__mrd (keys %{$__mrj}) { if ($__mrd eq $__mrf) { my $__mrh = $__mrj->{$__mrd}->{"Salt"}; my $__mri = Digest::SHA::sha256_base64($__mrh . $__mrg); while (length($__mri) % 4) { $__mri .= '='; } my $__mre = $__mrj->{$__mrd}->{"Password"}; if ($__mri eq $__mre) { $__mqx = 1; $__mqy = $__mrj->{$__mrd}->{"FullAccess"}; $authlib9_14_2::_akn{"hid_session"} = _bon($__mrd . "|" . $__mre); $__mra = $__mrd; } } } if ($__mqx == 0) { $__mqz = "Invalid user name or password. Please try again."; } } } if ($__mqx) { if ($__mqy) { $ssiwebadmin9_14_2::_btf{"full_access"} = 1; $ssiwebadmin9_14_2::_btf{"study_summary"} = 1; $ssiwebadmin9_14_2::_btf{"download_data"} = 1; $ssiwebadmin9_14_2::_btf{"view_data"} = 1; $ssiwebadmin9_14_2::_btf{"data_reports"} = 1; $ssiwebadmin9_14_2::_btf{"password_reports"} = 1; $ssiwebadmin9_14_2::_btf{"incompletes_report"} = 1; $ssiwebadmin9_14_2::_btf{"test_survey"} = 1; $ssiwebadmin9_14_2::_btf{"close_survey"} = 1; $ssiwebadmin9_14_2::_btf{"reset_survey"} = 1; $ssiwebadmin9_14_2::_btf{"advanced"} = 1; $ssiwebadmin9_14_2::_btf{"survey_log"} = 1; } else { $ssiwebadmin9_14_2::_btf{"read_access"} = 1; $ssiwebadmin9_14_2::_btf{"study_summary"} = 1; $ssiwebadmin9_14_2::_btf{"view_data"} = 1; $ssiwebadmin9_14_2::_btf{"data_reports"} = 1; $ssiwebadmin9_14_2::_btf{"password_reports"} = 1; $ssiwebadmin9_14_2::_btf{"incompletes_report"} = 1; $ssiwebadmin9_14_2::_btf{"test_survey"} = 1; } if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"} || exists $authlib9_14_2::_akn{"hid_c2_test_mode"}) { delete $ssiwebadmin9_14_2::_btf{"password_reports"}; delete $ssiwebadmin9_14_2::_btf{"close_survey"}; } if (exists $authlib9_14_2::_akn{"hid_c2_test_mode"}) { delete $ssiwebadmin9_14_2::_btf{"test_survey"}; } } else { if ($authlib9_14_2::_ajz) { _bsr(0, "error", $__mqz, 1); } else { print _bok($__mqz); authlib9_14_2::_act(); } } return ($__mqx, $__mra); } sub _bon { my ($__mrl) = @_; my $__mrk = _boo($__mrl); return $__mrk . time(); } sub _boo { my ($__mrr) = @_; my @__mrm = split("", $__mrr); my $__mrn = "1"; my $__mro = ""; my $__mrp = 0; my $__mrq = @__mrm; for ($__mrp = 0; $__mrp < $__mrq; $__mrp++) { $__mro = ord($__mrm[$__mrp]); if (length($__mro) < 3) { $__mro = "0" . $__mro; } $__mrn .= $__mro; } return $__mrn; } sub _bop { my ($__msb, $__msc) = @_; my $__mrs = ""; my $__mrt = ""; my $__mru = 0; my $__mrv = 0; my $__mrw = ""; if ($__msb =~ m/^(\d)(\d*?)(\d{10})$/) { $__mrs = $2; $__mrt = $3; my @__mrx = split("", $__mrs); my $__mry = ""; my $__mrz = 0; for ($__mrz = 0; $__mrz < @__mrx; $__mrz = $__mrz + 3) { $__mry .= chr($__mrx[$__mrz] . $__mrx[$__mrz + 1] . $__mrx[$__mrz + 2]); } if (exists $__msc->{$__mry}) { $__mru = 1; $__mrv = $__msc->{$__mry}; $__mrw = time(); my $__msa = 60; if ($authlib9_14_2::_ajw->{"admin_timeout"}) { $__msa = $authlib9_14_2::_ajw->{"admin_timeout"}; } if (($__mrt + $__msa * 60) < $__mrw) { $__mru = 0; $authlib9_14_2::_akn{"hid_session"} = 0; } else { $authlib9_14_2::_akn{"hid_session"} = "1" . $__mrs . $__mrw; } } } return ($__mru, $__mrv); } sub _boq { my $__msd = ""; $__msd .= "<div id=\"password_report_box\">\n"; $__msd .= "<ul>"; $__msd .= "<li><a id=\"password_report_not_started\" class=\"bold_link\">Never started the survey</a></li>\n"; $__msd .= "<li><a id=\"password_report_not_finished\" class=\"bold_link\">Started the survey but did not finish (incompletes)</a></li>\n"; $__msd .= "<li><a id=\"password_report_completes\" class=\"bold_link\">Finished the survey (completes)</a></li>\n"; $__msd .= "<li><a id=\"password_report_disqualified\" class=\"bold_link\">Disqualified from the survey</a></li>\n"; $__msd .= "</ul>\n"; $__msd .= "</div>\n"; return _boe("Identifier Reports", $__msd); } sub _bor { my $__mse = ""; my $__msf = 0; my $__msg = 0; my $__msh = 0; my %__msi = (); my $__msj = ""; my $__msk = {}; my @__msl = (); eval { $__msj = "SELECT `sys_RespStatus`, `sys_LastQuestion` FROM "; push @__msl, authlib9_14_2::_aev($__msk, 1); $__msj = authlib9_14_2::_aeu($__msj, \@__msl, $__msk); $__msh = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__msj, 0)); }; if ($@) { authlib9_14_2::_zq(221, "Database error.", "Database error. Error getting information for Incompletes Report.", $@); } my $__msm = @{$__msh}; my $__msn = 0; my $__mso = ""; my $__msp = 0; foreach $__msn (@{$__msh}) { $__msp = $__msn->[0]; $__mso = $__msn->[1]; if ($__msp == &authlib9_14_2::_AOF) { if (exists $__msi{$__mso}) { $__msi{$__mso}++; } else { $__msi{$__mso} = 1; } } } $__mse .= "<div id=\"incompletes_report_table\">\n"; if (keys %__msi) { $__mse .= "<ul class=\"section_header\">\n"; $__mse .= "<li>Last Question Seen</li>\n"; $__mse .= "<li>Incompletes</li>\n"; $__mse .= "<li>\% of Respondents</li>\n"; $__mse .= "</ul>\n"; my $__msq = 0; my ($__mss, $__mst) = authlib9_14_2::_aee(0, 1, 0, 0, 0, 0, ""); foreach my $__msr (@{$__mst}) { $__mso = $__msr->[0]; if (exists $__msi{$__mso}) { $__mse .= "<ul "; if ($ssiwebadmin9_14_2::_btz) { $__mse .= "class=\"alt_color1\""; $ssiwebadmin9_14_2::_btz = 0; } else { $ssiwebadmin9_14_2::_btz = 1; } $__mse .= ">"; $__msq = $__msi{$__mso}; $__mse .= "<li>" . $__mso . "</li>\n"; $__mse .= "<li>" . $__msq . "</li>\n"; $__mse .= "<li>" . int(($__msq / $__msm) * 100) . "%</li>\n"; $__mse .= "</ul>"; } } } else { $__mse .= "There are no incomplete data records."; } $__mse .= "</div>\n"; return _boe("Incompletes Report", $__mse); } sub _bos { my ($__mtr) = @_; my $__msu = "\r\n"; authlib9_14_2::_yo(); if (exists $authlib9_14_2::_aky->{'_ju'}) { my $__msv = $authlib9_14_2::_aky->{'_ju'}; my $__msw = 0; if (exists $__msv->{'_jt'}) { my $__msx = $__mtr; $__msx =~ s/password_report//i; my $__msy = $ssiwebadmin9_14_2::_bts . $__msx . ".csv"; my $__msu = "\r\n"; binmode STDOUT; print _bod($__msy); my @__msz = (); my @__mta = (); my @__mtb = (); my $__mtc = ""; my %__mtd = (); my $__mte = 0; my $__mtf = ""; my %__mtg = (); my @__mth = (); my @__mti = (); $__mtg{1} = 1; foreach $__msw (@{$__msv->{'_jt'}}) { $__mtc = $__msw->{'_if'}; ($__mte, $__mtf) = authlib9_14_2::_xk($__mtc); $__mtg{$__mte} = 1; push @__mtb, "`" . $authlib9_14_2::_akj . "_data" . $__mte . "`.`" . $__mtc . "`"; if ($__mte != 1) { push @__mti, "`" . $authlib9_14_2::_akj . "_data1`.`sys_RespNum` = `" . $authlib9_14_2::_akj . "_data" . $__mte . "`.`sys_RespNum`"; } push @__mta, "`" . $__mtc . "`"; push @__msz, authlib9_14_2::_acj($__mtc); } foreach $__mte (sort {$a <=> $b} keys %__mtg) { push @__mth, "`" . $authlib9_14_2::_akj . "_data" . $__mte . "`"; } if ($__mtr eq "password_report_not_finished") { push @__mti, "`" . $authlib9_14_2::_akj . "_data1`.`sys_RespStatus` = " . &authlib9_14_2::_AOF; } elsif ($__mtr eq "password_report_completes") { push @__mti, "`" . $authlib9_14_2::_akj . "_data1`.`sys_RespStatus` = " . &authlib9_14_2::_AOH; } elsif ($__mtr eq "password_report_disqualified") { push @__mti, "`" . $authlib9_14_2::_akj . "_data1`.`sys_RespStatus` = " . &authlib9_14_2::_AOG; } my $__mtj = 0; my $__mtk = 0; my $__mtl = ""; my %__mtm = (); my $__mtn = ""; my @__mto = (); my $__mtp = ""; eval { $__mtp = "SELECT " . join(",", @__mtb) . " FROM " . join(",", @__mth); if (@__mti) { $__mtp .= " WHERE " . join(" AND ", @__mti); } $__mtj = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mtp, 0)); }; if ($@) { authlib9_14_2::_zq(227, "Database error.", "Database error reading data for identifier report.", $@); } print join(",", @__msz) . $__msu; if ($__mtr eq "password_report_not_started") { my $__mtq = 1; foreach $__mtk (@{$__mtj}) { $__mtn = uc(join("_", @{$__mtk})); $__mtm{$__mtn} = 1; } eval { $__mtp = "SELECT " . join(",", @__mta) . " FROM `" . $authlib9_14_2::_akj . "_passwords`"; $__mtj = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mtp, 0)); }; if ($@) { if (exists $__msv->{'_mm'}) { $__mtq = 0; } else { authlib9_14_2::_zq(228, "Database error.", "Database error reading identifier table for identifier report.", $@); } } if ($__mtq) { foreach $__mtk (@{$__mtj}) { $__mtn = uc(join("_", @{$__mtk})); if (!exists $__mtm{$__mtn}) { @__mto = map {authlib9_14_2::_acj(authlib9_14_2::_wi($_))} @{$__mtk}; print join(",", @__mto) . $__msu; } } } } else { foreach $__mtk (@{$__mtj}) { @__mto = map {authlib9_14_2::_acj(authlib9_14_2::_wi($_))} @{$__mtk}; print join(",", @__mto) . $__msu; } } } } } sub _bot { my $__mts = ""; my $__mtt = ""; my ($__muh, $__mui) = authlib9_14_2::_yg($authlib9_14_2::_ahv{'_aml'} . "error_log.cgi", "read", 0, 1); binmode $__muh; authlib9_14_2::_zd($__muh, 0); $__mtt = authlib9_14_2::_yb($__muh); close $__muh; my @__mtu = split("\n", $__mtt); my $__mtv = ""; my @__mtw = (); my $__mtx = ""; my @__mty = (); my $__mtz = 0; my %__mua = (); my $__mub = 0; my $__muc = authlib9_14_2::_aca(); my $__mud = 0; foreach $__mud (@{$__muc}) { push @__mtw, $__mud->{"name"}; } foreach $__mtv (@__mtu) { @__mty = (); $__mtv = authlib9_14_2::_zo($__mtv); my $__mue = ""; my $__muf = ""; my $__mug = 0; while($__mtv =~ m/^"(.*?)"(.*?)$/) { $__mug = 0; $__mue = $1; $__muf = $2; if ($__muf =~ m/^,(.*?)$/) { $__mug = 1; $__mtv = $1; } elsif ($__muf =~ m/^"(.*?)$/) { $__mtv =~ s/""/\a/; } else { $__mug = 1; $__mtv = ""; } if ($__mug) { $__mue =~ s/\a/"/g; push @__mty, $__mue; } } for ($__mtz = 0; $__mtz < @__mty; $__mtz++) { $__mty[$__mtz] =~ s/\a/"/g; $__mua{$__mtw[$__mtz]} = $__mty[$__mtz]; } $__mub = authlib9_14_2::_ach(\%__mua, 1); if ($__mub) { last; } } if (!$__mub) { _bpf(); } return $__mub; } sub _bou { my $__muj = ""; my $__muk = 0; my $__mul = ""; if ($authlib9_14_2::_akm->{"close_survey"} == 1) { $__muk = 1; } if ($authlib9_14_2::_akm->{"close_survey_msg"}) { $__mul = $authlib9_14_2::_akm->{"close_survey_msg"}; } if ($__mul eq "" && !$__muk) { $__mul = $ssiwebadmin9_14_2::_bto; } my $__mum = ""; $__mum .= "<div style=\"margin-top: 20px; margin-bottom: 20px;\">"; $__mum .= "Close Survey Message:<br>\n"; $__mum .= "<textarea name=\"message\" id=\"message\" rows=\"10\" cols=\"80\" wrap=\"virtual\" style=\"width:99%\">\n"; $__mum .= $__mul; $__mum .= "</textarea></div>\n"; $__muj .= "<div class=\"close_survey_box"; if ($__muk) { $__muj .= " survey_closed"; } else { $__muj .= " survey_open"; } $__muj .= "\">"; my $__mun = "<div id=\"closed_message\">The survey is now <b>CLOSED</b>. Respondents are <b>NOT</b> able to enter the survey.</div>"; my $__muo = "<div id=\"open_message\">The survey is now <b>OPEN</b>. Respondents are able to enter the survey.</div>"; my $__mup = "<div id=\"update_link_box\"><a id=\"close_survey_update\" class=\"bold_link\">Update Message</a></div>\n"; my $__muq = "<div id=\"open_link\"><a id=\"close_survey_open\" class=\"green_button\">Open Survey</a></div>\n"; my $__mur = "<div id=\"close_link\"><a id=\"close_survey_close\" class=\"green_button\">Close Survey and Show Message</a></div>\n"; if ($__muk) { $__muj .= $__mun; $__muj .= $__mum; $__muj .= "<div class=\"button_container\">\n"; $__muj .= $__muq; $__muj .= $__mup; $__muj .= "</div>"; } else { $__muj .= $__muo; $__muj .= $__mum; $__muj .= "<div class=\"button_container\">\n"; $__muj .= $__mur; $__muj .= "</div>"; } $__muj .= "</div>"; $__muj .= "<div id=\"close_survey_note\" class=\"note\"><b>NOTE:</b> Close Survey allows you to display a message to all respondents who are entering the survey (this includes restarts)."; $__muj .= "&nbsp;&nbsp;When the survey is closed, respondents <b>entering</b> the survey see the specified message and are not able to take (or restart) the survey."; $__muj .= "&nbsp;&nbsp;Respondents who have already entered the survey do not see the message and are allowed to finish.</div>"; return _boe("Close Survey", $__muj); } sub _bov { _box(); authlib9_14_2::_xr(); _bsg("Close Survey", "Survey closed.", 0); return _bou(); } sub _bow { eval { my $__mus = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `close_survey` = 0"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__mus, 0)); $authlib9_14_2::_ake->commit(); $authlib9_14_2::_akm->{"close_survey"} = 0; }; if ($@) { authlib9_14_2::_zq(220, "Database error.", "Database error. Error opening survey.", $@); } _bsg("Open Survey", "Survey opened.", 0); return _bou(); } sub _box { my $__mut = ""; if (exists($authlib9_14_2::_akn{"message"})) { $__mut = $authlib9_14_2::_akn{"message"}; $__mut =~ s/\r\n/\n/g; } eval { my $__muu = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `close_survey_msg` = ?"; my $__muv = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__muu, 0)); $__muv->execute(authlib9_14_2::_wh($__mut)); $authlib9_14_2::_ake->commit(); $authlib9_14_2::_akm->{"close_survey_msg"} = $__mut; }; if ($@) { authlib9_14_2::_zq(218, "Database error.", "Database error. Error writing close survey message.", $@); } return _bou(); } sub _boy { my $__muw = ""; $__muw .= "Clicking \"Reset Survey\" below will cause this survey" . " (<b>" . $ssiwebadmin9_14_2::_bts . "</b>) to be reset. Resetting a survey includes:"; $__muw .= "<ol class=\"reset_list\">\n"; $__muw .= "<li>"; $__muw .= "Deleting <b>ALL</b> respondent data.\n"; $__muw .= "<div class=\"note reset_note\">All of the collected respondent data will be removed. The internal respondent counter will be reset.</div>"; $__muw .= "</li>"; if (!$ssiwebadmin9_14_2::_btt) { $__muw .= "<li>"; $__muw .= "Resetting all respondent identifier information.\n"; $__muw .= "<div class=\"note reset_note\">All identifiers will be reset and ready to use again.</div>"; $__muw .= "</li>"; } if ($authlib9_14_2::_aja) { $__muw .= "<li>"; $__muw .= "Resetting Quota Control information.\n"; $__muw .= "<div class=\"note reset_note\">All quota cells will be reset and ready to use again. Changes made to Quota Cell Limits in the Admin Module will remain.</div>"; $__muw .= "</li>"; } if ($authlib9_14_2::_akm->{"close_survey"} == 1) { $__muw .= "<li>"; $__muw .= "Opening the survey to respondents.\n"; $__muw .= "<div class=\"note reset_note\">This includes removing any \"Close Survey\" message.</div>"; $__muw .= "</li>"; } $__muw .= "</ol>\n"; $__muw .= "<div class=\"para\">\n"; $__muw .= "Please note the following:"; $__muw .= "<ol class=\"reset_list\">"; $__muw .= "<li>Only reset a survey if you have been testing and want to clean out test data and restart, or if you are finished with your survey and no longer have use for the data.</li>"; if (!$ssiwebadmin9_14_2::_btt) { $__muw .= "<li>All respondent data collected for this survey on devices using <b>Offline Surveys</b> will be deleted. If there are respondent data records that have not yet been synced to the server, they too will be deleted the next time the device syncs to the server.</li>"; } $__muw .= "<li>Saved Data Reports will <b>NOT</b> be deleted.</li>"; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"} || exists $authlib9_14_2::_akn{"hid_c2_test_mode"}) { $__muw .= "<li>Only data collected in <b>Test Mode</b> will be deleted.</li>"; } elsif (!$ssiwebadmin9_14_2::_btt) { $__muw .= "<li>Test data collected in <b>Test Mode</b> will <b>NOT</b> be deleted. To delete <b>Test Mode</b> data go to Test Mode, Enter Test Mode, Reset Survey.</li>"; } $__muw .= "</ol>"; $__muw .= "</div>\n"; $__muw .= "<div style=\"margin-top: 40px;\">"; $__muw .= "<span class=\"warning\">WARNING</span>: Clicking \"Reset Survey\" below will <span class=\"warning\">DELETE ALL "; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"}) { $__muw .= " <u>TEST MODE</u>"; } elsif (exists $authlib9_14_2::_akn{"hid_c2_test_mode"}) { $__muw .= " <u>TEST</u>"; } $__muw .= " DATA</span> collected for this survey!</div>"; $__muw .= "<div class=\"button_container\"><a id=\"reset_survey_reset\" class=\"green_button prompt_link\">Reset Survey</a></div>\n"; return _boe("Reset Survey", $__muw); } sub _boz { my $__mux = ""; my $__muy = 0; my ($__muz, $__mva, $__mvb) = _bpa(0); $__mux .= "<div id=\"survey_log_div\">"; $__mux .= "<div id=\"survey_log_control_row\" class=\"row\">\n"; $__mux .= "<div id=\"survey_log_view_div\" class=\"col\">View <select id=\"survey_log_filter\" name=\"survey_log_filter\">"; $__mux .= "<option value=\"0\">All</option>\n"; $__mux .= "<option value=\"" . &authlib9_14_2::_AOS . "\""; if ($__mvb == &authlib9_14_2::_AOS) { $__mux .= " SELECTED "; } $__mux .= ">Errors</option>\n"; $__mux .= "<option value=\"" . &authlib9_14_2::_AOT . "\""; if ($__mvb == &authlib9_14_2::_AOT) { $__mux .= " SELECTED "; } $__mux .= ">Warnings</option>\n"; $__mux .= "<option value=\"" . &authlib9_14_2::_AOU . "\""; if ($__mvb == &authlib9_14_2::_AOU) { $__mux .= " SELECTED "; } $__mux .= ">Notices</option>\n"; $__mux .= "</select></div>\n"; $__mux .= "<div id=\"download_log_div\" class=\"col\"><a href=\"#\" id=\"download_survey_log\" class=\"bold_link\">Download Log</a></div>\n"; $__mux .= "</div>\n"; $__mux .= "<div class=\"section_header\">"; if ($__mva) { if ($__mvb == &authlib9_14_2::_AOS) { $__mux .= "All Errors"; } elsif ($__mvb == &authlib9_14_2::_AOT) { $__mux .= "All Warnings"; } elsif ($__mvb == &authlib9_14_2::_AOU) { $__mux .= "All Notices"; } else { $__mux .= "All Activity"; } } else { $__mux .= "Recent Activity"; } $__mux .= "</div>"; if (@{$__muz}) { foreach $__muy (@{$__muz}) { $__mux .= _bpb($__muy); } } else { $__mux .= "<div id=\"no_log_items_msg\">No log entries where found.</div>"; } if (!$__mva) { $__mux .= "<div id=\"survey_log_bottom_control_div\"><a href=\"#\" id=\"show_all_log_activity\" class=\"bold_link\">Show All Activity</a></div>\n"; } $__mux .= "</div>\n"; return _boe("Survey Log", $__mux); } sub _bpa { my ($__mwa) = @_; my $__mvc = 0; my $__mvd = 0; if ($authlib9_14_2::_akm) { $__mvc = $authlib9_14_2::_akm->{"log_last_viewed"}; } my $__mve = "SELECT * FROM `" . $authlib9_14_2::_akj . "_survey_log`"; my $__mvf = " ORDER BY `time_stamp` DESC"; my $__mvg = ""; my $__mvh = 0; my $__mvi = 0; my $__mvj = 0; my $__mvk = 0; my $__mvl = ""; my $__mvm = 0; my $__mvn = 0; my $__mvo = ""; my $__mvp = 0; my $__mvq = ""; my $__mvr = ""; my $__mvs = ""; my $__mvt = ""; my $__mvu = ""; my $__mvv = ""; my $__mvw = ""; my @__mvx = (); my @__mvy = (); my $__mvz = "Eastern Standard Time"; if (exists $authlib9_14_2::_akp->{'_ow'}) { $__mvz = $authlib9_14_2::_akp->{'_ow'}; } if (exists $authlib9_14_2::_akn{"survey_log_filter"}) { $__mvj = $authlib9_14_2::_akn{"survey_log_filter"}; } if (exists $authlib9_14_2::_akn{"survey_log_all"} && $authlib9_14_2::_akn{"survey_log_all"} == 1) { $__mvc = 0; } eval { @__mvx = (); push(@__mvx, authlib9_14_2::_wh($__mvc)); $__mvg = $__mve . " WHERE `time_stamp` > ?"; if ($__mvj > 0) { $__mvg .= " AND `type` = ?"; push(@__mvx, authlib9_14_2::_wh($__mvj)); } $__mvg .= $__mvf; $__mvh = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mvg, 0)); $__mvh->execute(@__mvx); $__mvi = $__mvh->fetchall_arrayref({}); }; if ($@) { authlib9_14_2::_zq(334, "Database error.", "Database error selecting from survey_log.", $@); } if (@{$__mvi} == 0 && !$__mwa) { eval { $__mvx[0] = 0; $__mvh->execute(@__mvx); $__mvi = $__mvh->fetchall_arrayref({}); }; if ($@) { authlib9_14_2::_zq(336, "Database error.", "Database error selecting from survey_log.", $@); } $__mvd = 1; } foreach $__mvk (@{$__mvi}) { $__mvm = $__mvk->{"type"}; $__mvl = ""; $__mvq = ""; $__mvo = ""; if ($__mvm == &authlib9_14_2::_AOS) { $__mvl = "log_error"; $__mvq = "Error"; } elsif ($__mvm == &authlib9_14_2::_AOT) { $__mvl = "log_warning"; $__mvq = "Warning"; } elsif ($__mvm == &authlib9_14_2::_AOU) { $__mvl = "log_notice"; $__mvq = "Notice"; } $__mvk->{"type_class"} = $__mvl; $__mvk->{"type_text"} = $__mvq; $__mvp = $__mvk->{"error_number"}; $__mvn = $__mvk->{"time_stamp"}; if ($__mvn) { $__mvk->{"time"} = authlib9_14_2::_aep($__mvn, $__mvz); } push(@__mvy, $__mvk); } eval { $__mvg = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `log_last_viewed`=?"; my $__mvh = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__mvg, 0)); $__mvh->execute(time()); $__mvh->finish; }; if ($@) { authlib9_14_2::_zq(335, "Database error.", "Database error updating info table.", $@); } return (\@__mvy, $__mvd, $__mvj); } sub _bpb { my ($__mwc) = @_; my $__mwb = ""; $__mwb .= "<div class=\"log_row"; if (exists $__mwc->{"type_class"}) { $__mwb .= " " . $__mwc->{"type_class"}; } $__mwb .= "\">\n"; $__mwb .= "<div class=\"row\">\n"; $__mwb .= "<div class=\"time col\">" . $__mwc->{"time"} . "</div>\n"; $__mwb .= "<div class=\"message col\">\n"; $__mwb .= "<div class=\"title sans_bold\">" . $__mwc->{"type_text"} . "</div>\n"; if ($__mwc->{"message"}) { $__mwb .= $__mwc->{"message"}; if ($__mwc->{"error_number"}) { $__mwb .= " <span class=\"log_id\">[ID: " . $__mwc->{"error_number"} . "]</span>"; } } $__mwb .= "<div class=\"details\">\n"; if ($__mwc->{"system_error"}) { $__mwb .= "<div class=\"detail_title\">System Error:</div>\n"; $__mwb .= "<div class=\"detail_content\">" . $__mwc->{"system_error"} . "</div>\n"; } if ($__mwc->{"form_input"}) { $__mwb .= "<div class=\"detail_title\">Form Input:</div>\n"; $__mwb .= "<div class=\"detail_content\">" . $__mwc->{"form_input"} . "</div>\n"; } if ($__mwc->{"ssi_version"}) { $__mwb .= "<div class=\"detail_title\">Lighthouse Studio Version:</div>\n"; $__mwb .= "<div class=\"detail_content\">" . $__mwc->{"ssi_version"} . "</div>\n"; } if ($__mwc->{"ip_address"}) { $__mwb .= "<div class=\"detail_title\">IP Address:</div>\n"; $__mwb .= "<div class=\"detail_content\">" . $__mwc->{"ip_address"} . "</div>\n"; } if ($__mwc->{"user_agent"}) { $__mwb .= "<div class=\"detail_title\">User Agent:</div>\n"; $__mwb .= "<div class=\"detail_content\">" . $__mwc->{"user_agent"} . "</div>\n"; } $__mwb .= "</div>\n"; $__mwb .= "</div>"; $__mwb .= "<div class=\"details_link col\"><a href=\"#\" class=\"toggle_log_details_link\">Show Details</a></div>\n"; $__mwb .= "</div>\n"; $__mwb .= "</div>\n"; return $__mwb; } sub _bpc { my $__mwd = 0; my $__mwe = 0; my $__mwf = 0; my $__mwg = 0; if ($authlib9_14_2::_akm) { $__mwf = $authlib9_14_2::_akm->{"log_last_viewed"}; } if (-e $authlib9_14_2::_ahv{'_aml'} . "error_log.cgi") { $__mwg = _bot(); } my $__mwh = "SELECT `type`, MAX(`time_stamp`), COUNT(*) FROM `" . $authlib9_14_2::_akj . "_survey_log` GROUP BY `type`"; my $__mwi = 0; eval { $__mwi = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mwh, 0)); }; if ($@) { authlib9_14_2::_zq(333, "Database error.", "Database error selecting from survey_log.", $@); } my $__mwj = 0; my $__mwk = 0; my $__mwl = 0; foreach $__mwj (@{$__mwi}) { $__mwd = 1; $__mwl = $__mwj->[0]; $__mwk = $__mwj->[1]; if ($__mwk > $__mwf && ($__mwl == &authlib9_14_2::_AOS || $__mwl == &authlib9_14_2::_AOT)) { $__mwe = 1; last; } } return ($__mwe, $__mwd, $__mwg); } sub _bpd { my ($__mwn, $__mwo) = @_; my $__mwm = "jQuery(document).ready(function() {\n"; $__mwm .= "jQuery(\"" . "#" . $__mwn . "\").click(function(){\n"; $__mwm .= $__mwo . "\n"; $__mwm .= "return false;\n"; $__mwm .= "});\n"; $__mwm .= "});\n"; return $__mwm; } sub _bpe { if ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { if (-e $authlib9_14_2::_ahv{'_aml'} . $authlib9_14_2::_akj . ".sqlite") { authlib9_14_2::_we(); unlink $authlib9_14_2::_ahv{'_aml'} . $authlib9_14_2::_akj . ".sqlite" or authlib9_14_2::_zq(236, "Database error.", "Database error. During Survey Reset, cannot delete SQLite file.", $@); } } else { _bpg(0, 1); _bsg("Reset Survey", "", 0); } _bpf(); my $__mwp = _bqv(1, 1, 0, 1, 0); $authlib9_14_2::_ake->commit(); return $__mwp; } sub _bpf { if (-e $authlib9_14_2::_ahv{'_aml'} . "error_log.cgi") { unlink $authlib9_14_2::_ahv{'_aml'} . "error_log.cgi"; } } sub _bpg { my ($__mxd, $__mxe) = @_; my $__mwq = $__mxd; my @__mwr = (); my $__mws = 0; my $__mwt = ""; my $__mwu = $authlib9_14_2::_akj; my $__mwv = 0; my $__mww = ""; if ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite" && $__mxd) { authlib9_14_2::_we(); my $__mwx = 0; if (-e $authlib9_14_2::_ahv{'_aml'} . $__mwu . ".sqlite") { unlink $authlib9_14_2::_ahv{'_aml'} . $__mwu . ".sqlite" or {$__mwx = 1}; } $__mwu = authlib9_14_2::_aem(); if (-e $authlib9_14_2::_ahv{'_aml'} . $__mwu . ".sqlite") { unlink $authlib9_14_2::_ahv{'_aml'} . $__mwu . ".sqlite" or {$__mwx = 1}; } if ($__mwx) { $__mwv = 1; $__mww = "Database error. Cannot delete SQLite tables."; } } else { my $__mwy = 0; do { if ($__mwy) { $__mxd = 0; $__mwu = authlib9_14_2::_aem(); } if ($authlib9_14_2::_akm) { my $__mwz = $authlib9_14_2::_akm->{"num_data_tables"}; my $__mxa = 0; for ($__mxa = 1; $__mxa <= $__mwz; $__mxa++) { push @__mwr, $__mwu . "_data" . $__mxa; } } push @__mwr, $__mwu . "_data1"; push @__mwr, $__mwu . "_map"; push @__mwr, $__mwu . "_history"; push @__mwr, $__mwu . "_design_log"; push @__mwr, $__mwu . "_info"; push @__mwr, $__mwu . "_clists"; push @__mwr, $__mwu . "_passwords"; push @__mwr, $__mwu . "_quotas"; push @__mwr, $__mwu . "_aca_avg_imp"; push @__mwr, $__mwu . "_url_restore"; push @__mwr, $__mwu . "_survey_log"; push @__mwr, $__mwu . "_maxdiff_banditdata"; if (!$__mxe) { push @__mwr, $__mwu . "_admin_log"; push @__mwr, $__mwu . "_saved_reports"; } if ($__mxd) { $__mwy = 1; } } while($__mxd); my $__mxb = ""; my $__mxc = ""; foreach $__mxc (@__mwr) { eval { $__mxb = authlib9_14_2::_wl($__mxc); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__mxb, 0)); }; if ($@) { if ($__mwq) { $__mwv = 1; $__mww = "Database error. Cannot drop tables."; last; } else { authlib9_14_2::_zq(217, "Database error.", "Database error. Cannot drop tables.", $@); } } } $authlib9_14_2::_ake->commit(); } return ($__mwv, $__mww); } sub _bph { my ($__myf) = @_; my $__mxf = ""; my $__mxg = ""; my $__mxh = 0; my $__mxi = ""; my $__mxj = 0; my $__mxk = 0; my $__mxl = 0; if ($__myf && exists $authlib9_14_2::_akn{"hid_report_settings"}) { my $__mxm = $authlib9_14_2::_akn{"hid_report_settings"}; _bpi($__mxm); $__mxk = 1; if (exists $authlib9_14_2::_akn{"hid_edit_report_id"}) { $__mxl = $authlib9_14_2::_akn{"hid_edit_report_id"}; } } else { $authlib9_14_2::_akn{"report_rows"} = ""; $authlib9_14_2::_akn{"report_columns"} = ""; $authlib9_14_2::_akn{"saved_reports"} = ""; } $__mxf .= "<div id=\"data_report_options_box\">\n"; if ($__mxl) { if (exists $authlib9_14_2::_akn{"hid_report_name"} && $authlib9_14_2::_akn{"hid_report_name"}) { $__mxf .= "<div id=\"edit_report_name_box\">\n"; $__mxf .= "Report Name <input type=\"text\" class=\"text_input\" name=\"report_name\" id=\"report_name\" value='" . $authlib9_14_2::_akn{"hid_report_name"} . "'>"; $__mxf .= "<input name=\"hid_report_id\" type=\"hidden\" value=\"" . $__mxl . "\">\n"; $__mxf .= "</div>"; $__mxk = 1; } } else { $__mxj = 1; } $__mxf .= "<div class=\"row\">\n"; $__mxf .= "<div class=\"col\">\n"; $__mxf .= "<div class=\"checkbox_title\">Rows (stubs)</div>"; $__mxf .= "<div id=\"rows_select_box\" class=\"select_scroll_box\">\n"; my ($__myg, $__myh) = authlib9_14_2::_aee(1, 0, 0, 1, $__mxk, 0, ""); $__mxf .= authlib9_14_2::_aeh($__myg, "report_rows"); $__mxf .= "</div></div>\n"; $__mxf .= "<div id=\"banners_col\" class=\"col\">\n"; $__mxf .= "<div class=\"checkbox_title\">Columns (banners)</div>"; $__mxf .= "<div id=\"cols_select_box\" class=\"select_scroll_box\">\n"; ($__myg, $__myh) = authlib9_14_2::_aee(1, 0, 0, 1, $__mxk, 0, ""); $__mxf .= authlib9_14_2::_aeh($__myg, "report_columns"); $__mxf .= "</div></div>\n"; $__mxf .= "</div>"; $__mxf .= "<div class=\"filters_header\">Filters</div>"; $__mxf .= "<div id=\"filters_box\">"; $__mxf .= "Respondent Status: <select name=\"status\" id=\"status\">\n"; $__mxf .= "<option value=\"\">All</option>\n"; my $__mxn = ""; my $__mxo = ""; my $__mxp = ""; if ($__mxk) { if (exists $authlib9_14_2::_akn{"status"}) { my $__mxq = $authlib9_14_2::_akn{"status"}; if ($__mxq == 5) { $__mxn = " selected "; } elsif ($__mxq == 2) { $__mxo = " selected "; } elsif ($__mxq == 4) { $__mxp = " selected "; } } } $__mxf .= "<option value=\"5\"" . $__mxn . ">Qualified / Complete</option>\n"; $__mxf .= "<option value=\"2\"" . $__mxo . ">Incomplete</option>\n"; $__mxf .= "<option value=\"4\"" . $__mxp . ">Disqualified</option>\n"; $__mxf .= "</select>\n"; my ($__myi, $__myj) = _bml($__mxk); if (!$__myj) { $__mxf .= "<a id=\"show_filters\">Add additional filters</a>"; } $__mxf .= "<div id=\"filter_settings\""; if (!$__myj) { $__mxf .= " class=\"display_class_hide\""; } $__mxf .= ">"; $__mxf .= $__myi; $__mxf .= "</div></div>"; if ($__mxk && $__mxl) { $__mxf .= "<table id=\"chart_display_settings_table\">"; my $__mxr = ""; my $__mxs = 0; my $__mxt = ""; $__mxf .= "<tr class=\"chart_display_row chart_display_template\"><td style=\"text-align: right;\"><span class=\"report_row_name\"></span> chart:</td><td style=\"text-align: left;\">"; $__mxf .= "<select name=\"\" class=\"chart_drop_down\">\n"; $__mxf .= "<option value=\"0\" class=\"chart_display_none\">None</option>"; $__mxf .= "<option value=\"1\" class=\"chart_display_column\" selected>Column</option>"; $__mxf .= "<option value=\"2\" class=\"chart_display_pie\">Pie</option>"; $__mxf .= "</select>\n"; $__mxf .= "</td></tr>"; my @__mxu = (); if (exists $authlib9_14_2::_akn{"report_rows"}) { my $__mxv = $authlib9_14_2::_akn{"report_rows"}; @__mxu = split(",", $__mxv); } foreach $__mxr (@__mxu) { $__mxs = 0; $__mxt = "chart_display_" . $__mxr; if (exists $authlib9_14_2::_akn{$__mxt}) { $__mxs = $authlib9_14_2::_akn{$__mxt}; } $__mxf .= "<tr class=\"chart_display_row\"><td style=\"text-align: right;\">" . $__mxr . " chart:</td><td style=\"text-align: left;\">"; $__mxf .= "<select name=\"" . $__mxt . "\" class=\"chart_drop_down\">\n"; $__mxf .= "<option value=\"0\" class=\"chart_display_none\""; if ($__mxs == 0) { $__mxf .= " SELECTED"; } $__mxf .= ">None</option>"; $__mxf .= "<option value=\"1\" class=\"chart_display_column\""; if ($__mxs == 1) { $__mxf .= " SELECTED"; } $__mxf .= ">Column</option>"; $__mxf .= "<option value=\"2\" class=\"chart_display_pie\""; if ($__mxs == 2) { $__mxf .= " SELECTED"; } $__mxf .= ">Pie</option>"; $__mxf .= "</select>\n"; $__mxf .= "</td></tr>"; } $__mxf .= "</table>"; } $__mxf .= "<div class=\"button_container\">\n"; if ($__mxl) { $__mxf .= "<a href=\"#\" id=\"update_report\" class=\"green_button prompt_link\">Update Report</a>"; } else { $__mxf .= "<a href=\"#\" id=\"question_report\" class=\"green_button prompt_link\">Create Report</a>"; } $__mxf .= "</div></div>"; if (!$__mxl) { my @__mxw = (); eval { my $__mxx = ""; my $__mxy = 1; my $__mxz = $authlib9_14_2::_akj . "_saved_reports"; if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__mxx = "SELECT OBJECT_ID('" . $__mxz . "')"; my $__mya = $authlib9_14_2::_ake->selectrow_arrayref(authlib9_14_2::_wn($__mxx, 0)); if (!$__mya->[0]) { $__mxy = 0; } } if ($__mxy) { $__mxx = "SELECT `id`, `name` FROM `" . $__mxz . "` ORDER BY `id` ASC"; my $__myb = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__mxx, 0)); my $__myc = 0; foreach $__myc (@{$__myb}) { push @__mxw, [$__myc->[0], authlib9_14_2::_wi($__myc->[1])]; } } }; if (@__mxw) { $__mxf .= "<div class=\"section_separator_line\"></div>"; $__mxf .= "<div id=\"saved_reports_box\" class=\"row\">\n"; $__mxf .= "<div id=\"report_names_col\" class=\"col\">"; $__mxf .= "<div id=\"saved_reports_title\">Saved Reports</div>"; $__mxf .= "<div id=\"saved_report_list\" class=\"select_scroll_box\">\n"; my $__myd = 0; my $__mye = ""; foreach $__myd (@__mxw) { $__mye .= authlib9_14_2::_aeg($__myd->[0], $__myd->[1], 0, 0); } $__mxf .= authlib9_14_2::_aeh($__mye, "saved_reports"); $__mxf .= "</div></div>"; $__mxf .= "<div id=\"report_buttons_col\" class=\"col\">\n"; $__mxf .= "<div class=\"button_container\">"; $__mxf .= "<a id=\"view_saved_report\" class=\"green_button prompt_link\">View Selected Reports</a>\n"; $__mxf .= "</div>\n"; $__mxf .= "<a id=\"delete_saved_report\" class=\"bold_link prompt_link\">Delete Selected Reports</a>\n"; $__mxf .= "<div id=\"delete_report_dialog\" class=\"dialog\">\n"; $__mxf .= "Delete the selected reports?\n"; $__mxf .= "</div>\n"; $__mxf .= "</div></div>"; } } return _boe("Data Reports", $__mxf); } sub _bpi { my ($__mym) = @_; my $__myk = eval($__mym); if ($@) { authlib9_14_2::_zq(248, "Report settings error.", "Error evaluating prior report settings.", $@); } else { my $__myl = ""; foreach $__myl (keys %authlib9_14_2::_akn) { if ($__myl !~ m/^hid_/i) { delete $authlib9_14_2::_akn{$__myl}; } } foreach $__myl (keys %{$__myk}) { $authlib9_14_2::_akn{$__myl} = $__myk->{$__myl}; } } } sub _bpj { my ($__nbd, $__nbe, $__nbf) = @_; if (!defined $__nbd) { $__nbd = ""; } if (!defined $__nbe) { $__nbe = 0; } if (!defined $__nbf) { $__nbf = 0; } my @__myn = (); my @__myo = (); my $__myp = _bpn(); my ($__nbg, $__nbh, $__nbi, $__nbj) = _bpo(); @__myn = @$__nbi; @__myo = @$__nbj; my ($__nbk, $__nbl, $__nbm, $__nbn) = _bpp(); my @__myq = @$__nbk; my @__myr = @$__nbl; my $__mys = _bpu($__nbg, $__nbh, $__nbn, 0); _bsg("Run Report", "Report Settings: " . $__mys, 0); my $__myt = ""; my $__myu = 0; $__myt .= "<div class=\"data_report_box\" data-report_settings='" . $__mys . "'"; $__myt .= " data-report_id=\"" . $__nbe . "\" data-report_name=\"" . $__nbd . "\">\n"; if ($__nbd eq "") { $__nbd = "newreport"; $__myu = 1; } if ($__myu && !$__nbf) { $__myt .= _bqc(); $__myt .= authlib9_14_2::_xh("jQuery(document).ready(function() {SaveReportDialog(\"admin" . $authlib9_14_2::_aib . "\");});"); $__myt .= "<div id=\"save_report_dialog\">\n"; $__myt .= "<div id=\"save_report_name_box\">Report Name: <input type=\"text\" class=\"text_input\" name=\"report_name\" id=\"report_name\">"; $__myt .= "<div id=\"save_report_note\" class=\"note\">Note: This will save only the report settings. Each time this report is viewed it will be updated using the live data from the server.</div>"; $__myt .= "</div>\n"; $__myt .= "<div id=\"save_report_progress\" style=\"text-align: center; margin-top: 20px;\">\n"; $__myt .= "Saving... <img src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/green_squares_loading.gif\" alt=\"Saving...\">\n"; $__myt .= "</div>\n"; $__myt .= "</div>\n"; } if (!$__nbf) { $__myt .= _bqd(); } my $__myv = _bpm($__nbi, $__nbj); my $__myw = 0; my $__myx = 0; my $__myy = 0; my $__myz = 0; my $__mza = 0; my %__mzb = (); my @__mzc = (); my @__mzd = (); my @__mze = (); my @__mzf = (); my @__mzg = (); my $__mzh = 0; my $__mzi = 0; my $__mzj = 0; my $__mzk = 0; my $__mzl = 0; my $__mzm = ""; my $__mzn = 0; my $__mzo = 0; my $__mzp = 0; my $__mzq = 0; my $__mzr = 0; my $__mzs = 0; my $__mzt = 20; my $__mzu = "Value"; my $__mzv = "Label"; my $__mzw = "Total"; if (@__myn) { foreach $__myx(@__myn) { $__myw = authlib9_14_2::_ww($__myp, $__mzt); if ($__myw) { last; } @__mze = (); @__mzd = (); @__mzc = (); %__mzb = {}; @__mzg = (); my ($__nbo, $__nbp, $__nbq, $__nbr, $__nbs) = _bpl($__myx, \@__myo, \@__myr, \@__myq, $__nbm, $__myv); my $__mzx = $__myx->{'_gr'}; my $__mzy = $__mzx; $__mzy = _bpt($__mzy); $__myt .= "<div class=\"question_report_box\" data-var_name=\"" . $__mzy . "\">"; $__myt .= "<div class=\"row\"><div class=\"question_report_title col\">" . $__mzx . "</div>"; if ($__mzx =~ m/_/) { my ($__nbt, $__nbu) = authlib9_14_2::_abu($__mzx, 1, 0, 1); my $__mzz = $__nbu->{'_pj'}; if ($__mzz == &authlib9_14_2::_ANS) { $__nbt = ""; my $__naa = 0; my $__nab = 0; my $__nac = 0; if ($__mzx =~ m/_r(\d+)/i) { $__naa = $1; $__nac = authlib9_14_2::_adc($__nbu->{'_uf'}->{'_mw'}); $__nbt = authlib9_14_2::_abw($__nac->[$__naa - 1]); } if ($__mzx =~ m/_c(\d+)/i) { $__nab = $1; $__nac = authlib9_14_2::_adc($__nbu->{'_uf'}->{'_co'}); if ($__nbt) { $__nbt .= " - "; } $__nbt .= authlib9_14_2::_abw($__nac->[$__nab - 1]); } } elsif ($__mzz == &authlib9_14_2::_AOE) { my ($__nbv, $__nbw) = _bnm($__mzx); $__nbt = $__nbv . " - " . $__nbw; } $__nbt = _bse($__nbt); if ($__nbt) { $__myt .= "<div class=\"question_title_label col\">(" . $__nbt . ")</div>"; } } $__myt .= "</div>"; $__myt .= "<div class=\"question_report_body\">"; if (exists $__myx->{'_op'}) { $__myt .= "<div class=\"question_text\">" . $__myx->{'_op'} . "</div>"; } if ($__nbo) { if ($__myv) { $__mzh = 5; $__mzi = 20; $__mzl = 5; $__mzm = 70; my $__nad = _bpq($__myx); if (!$__nad) { $__mzm = 90; } $__myt .= "<table class=\"crosstabs_table\">"; $__myt .= "<tr class=\"report_table_header\">"; $__myt .= "<td max-width=\"200px\" align=\"center\" rowspan=\"2\" valign=\"bottom\"><b>" . $__mzu . "</b></td>"; if ($__nad) { $__myt .= "<td max-width=\"200px\" align=\"left\" rowspan=\"2\" valign=\"bottom\"><b>" . $__mzv . "</b></td>"; } $__myt .= "<td max-width=\"200px\" align=\"center\" rowspan=\"2\" valign=\"bottom\" class=\"crosstab_separator\"><b>" . $__mzw . "</b></td>"; $__mzn = $__mzm / @__myo; my ($__nbx, $__nby, $__nbz) = _bpr($__myx, \@__myo, $__nbp, $__nbq); @__mzd = @$__nbz; my $__nae = ""; foreach $__nae (@__mzd) { my $__naf = $__nae; my $__nag = $__nby->{$__naf}; $__myt .= "<td colspan=\"" . $__nag . "\" align=\"center\" width=\"" . $__mzn . "%\" max-width=\"200px\" class=\"crosstab_separator\"><b>Question: " . $__naf . "</b></td>"; } $__myt .= "</tr>"; $__myt .= "<tr class=\"report_table_header\">"; foreach $__myy(@__myo) { my @__nah = (); if (exists $__myy->{'_bud'}) { if ($__nbx) { $__mzo = int(70 / $__nbx); } my $__nai = 1; foreach $__myz (@{$__myy->{'_bud'}}) { $__myt .= "<td align=\"center\" valign=\"top\" width=\"" . $__mzo . "%\" max-width=\"200px\""; if ($__nai == @{$__myy->{'_bud'}}) { $__myt .= " class=\"crosstab_separator\""; } my $__naj = _bnp(authlib9_14_2::_abw($__myz), 150, 0); if ($__naj) { push @__nah, $__naj; } else { push @__nah, $__myz->{'_pt'}; } $__myt .= ">" . $__myz->{'_pt'} . "<br>" . $__naj . "</td>"; $__nai++; } } push @__mzc, \@__nah; } $__myt .= "</tr>"; if (exists $__myx->{'_bud'}) { foreach $__myz (@{$__myx->{'_bud'}}) { my $__nak = ""; my @__nal = (); my $__nam = 1; my $__nan = 0; $__myt .= "<tr"; if ($__nan) { $__nan = 0; $__myt .= " class=\"alt_row\""; } else { $__nan = 1; } $__myt .= "><td align=\"center\" valign=\"top\" max-width=\"200px\">" . $__myz->{'_pt'} . "</td>"; if ($__nad) { $__nak = _bnp(authlib9_14_2::_abw($__myz), 150, 0); push @__mze, $__nak; $__myt .= "<td valign=\"top\" max-width=\"200px\">" . $__nak . "</td>"; } else { push @__mze, $__myz->{'_pt'}; } foreach $__myy(@__myo) { my $__mzr = $__nbp->{$__myz->{'_pt'} . ",total"}; if ($__nam) { $__myt .= "<td align=\"center\" valign=\"top\" class=\"crosstab_separator\" max-width=\"200px\">" . $__mzr; my $__nao = 0; if ($__mzr) { $__nao = authlib9_14_2::_abj(($__mzr / $__nbp->{"total"}) * 100, 1); $__myt .= "<br>" . $__nao . "%"; } $__myt .= "</td>"; $__nam = 0; } if (exists $__myy->{'_bud'}) { my $__naf = $__myy->{'_if'}; my @__nap = (); my $__nai = 1; foreach $__mza (@{$__myy->{'_bud'}}) { my $__naq = $__nbp->{$__naf . "," . $__myz->{'_pt'} . "," . $__mza->{'_pt'}}; $__myt .= "<td align=\"center\" valign=\"top\" max-width=\"200px\""; if ($__nai == @{$__myy->{'_bud'}}) { $__myt .= " class=\"crosstab_separator\""; } $__myt .= ">" . $__naq; my $__nao = 0; $__mzr = 0; if ($__naq) { $__mzr = $__nbp->{$__naf . ",total," . $__mza->{'_pt'}}; if ($__mzr) { $__nao = authlib9_14_2::_abj(($__naq / $__mzr) * 100, 1); $__myt .= "<br>" . $__nao . "%"; } } push @__nap, $__nao; $__myt .= "</td>"; $__nai++; } if (!exists $__mzb{$__naf}) { $__mzb{$__naf} = []; } push @{$__mzb{$__naf}}, \@__nap; } } $__myt .= "</tr>"; } } $__myt .= "<tr class=\"cross_tab_summary_row\"><td"; if ($__nad) { $__myt .= " colspan=\"2\""; } $__myt .= " align=\"right\" valign=\"top\" max-width=\"200px\"><b>Summary:</b></td>"; my $__nam = 1; foreach $__myy(@__myo) { if ($__nam) { $__myt .= "<td align=\"center\" valign=\"top\" class=\"crosstab_separator\" max-width=\"200px\">\n"; $__myt .= "<table class=\"crosstab_summary_table\"><tr><td align=\"right\">N:</td><td align=\"left\">" . $__nbp->{"total"} . "</td></tr>"; if (exists $__nbp->{"min"}) { $__myt .= "<tr><td align=\"right\">Min:</td><td>" . $__nbp->{"min"} . "</td></tr>"; } if (exists $__nbp->{"max"}) { $__myt .= "<tr><td align=\"right\">Max:</td><td align=\"left\">" . $__nbp->{"max"} . "</td></tr>"; } if ($__nbr && exists $__nbp->{"mean_total"}) { $__myt .= "<tr><td align=\"right\">Mean:</td><td align=\"left\">" . authlib9_14_2::_abj($__nbp->{"mean_total"} / $__nbp->{"total"}, 2) . "</td></tr>"; } $__myt .= "</table></td>"; $__nam = 0; } if (exists $__myy->{'_bud'}) { my $__naf = $__myy->{'_if'}; my $__nai = 1; foreach $__mza (@{$__myy->{'_bud'}}) { my $__mzr = $__nbp->{$__naf . ",total," . $__mza->{'_pt'}}; $__myt .= "<td align=\"center\" valign=\"top\" max-width=\"200px\""; if ($__nai == @{$__myy->{'_bud'}}) { $__myt .= " class=\"crosstab_separator\""; } $__myt .= "><table class=\"crosstab_summary_table\">\n"; if ($__mzr) { $__myt .= "<tr><td align=\"right\" max-width=\"200px\">N:</td><td align=\"left\">" . $__mzr . "</td></tr>"; } if (exists $__nbp->{$__naf . ",min," . $__mza->{'_pt'}}) { $__myt .= "<tr><td align=\"right\" max-width=\"200px\">Min:</td><td align=\"left\">" . $__nbp->{$__naf . ",min," . $__mza->{'_pt'}} . "</td></tr>"; } if (exists $__nbp->{$__naf . ",max," . $__mza->{'_pt'}}) { $__myt .= "<tr><td align=\"right\" max-width=\"200px\">Max:</td><td align=\"left\">" . $__nbp->{$__naf . ",max," . $__mza->{'_pt'}} . "</td></tr>"; } if ($__nbr && exists $__nbp->{$__naf . ",mean_total," . $__mza->{'_pt'}} && $__mzr) { $__myt .= "<tr><td align=\"right\" max-width=\"200px\">Mean:</td><td align=\"left\">" . authlib9_14_2::_abj($__nbp->{$__naf . ",mean_total," . $__mza->{'_pt'}} / $__mzr, 2) . "</td></tr>"; } $__myt .= "</table></td>"; $__nai++; } } } $__myt .= "</tr></table>"; $__myt .= "<div class=\"row report_summary_row\">\n"; $__myt .= "<div class=\"col\">\n"; my $__nar = 1; if (exists $authlib9_14_2::_akn{"chart_display_" . $__mzx}) { $__nar = $authlib9_14_2::_akn{"chart_display_" . $__mzx}; } $__myt .= "<b>Chart</b>: <select class=\"chart_display_dropdown\">\n"; $__myt .= "<option value=\"0\""; if ($__nar == 0) { $__myt .= " selected"; } $__myt .= ">None</option>\n"; $__myt .= "<option value=\"1\""; if ($__nar == 1) { $__myt .= " selected"; } $__myt .= ">Column</option>\n"; $__myt .= "</select>\n"; $__myt .= "</div>"; $__myt .= "<div class=\"col report_download_col\">\n"; $__myt .= "<a class=\"bold_link prompt_link download_crosstabs_report\">Download</a>\n"; $__myt .= "</div></div>"; } else { if (keys %{$__nbp} && exists $__nbp->{"total"} && $__nbp->{"total"} > 0) { my $__nad = 1; if (exists $__myx->{'_bue'}) { $__myx->{'_bud'} = _bqe($__nbp); $__nad = 0; } my @__nas = (); my $__nat = "Value"; my $__nau = "Label"; my $__nav = "Count"; my $__naw = "Percent"; $__myt .= "<div class=\"report_table_box\">"; $__myt .= "<ul class=\"report_table_header\">\n"; $__myt .= "<li class=\"value_col\">" . $__nat . "</li>\n"; if ($__nad) { $__myt .= "<li>" . $__nau . "</li>\n"; } $__myt .= "<li class=\"count_col\">" . $__nav . "</li>\n"; $__myt .= "<li class=\"percent_col\">" . $__naw . "</li>\n"; $__myt .= "</ul>\n"; if (exists $__myx->{'_bud'}) { my $__nan = 0; $__mzp = 0; $__mzq = 0; $__mzr = 0; $__mzs = 0; foreach $__myz (@{$__myx->{'_bud'}}) { my @__nax = (); my $__nay = ""; $__myt .= "<ul"; if ($__nan) { $__nan = 0; $__myt .= " class=\"alt_row\""; } else { $__nan = 1; } $__myt .= "><li class=\"value_col\">" . $__myz->{'_pt'} . "</li>"; if ($__nad) { $__nay = _bnp(authlib9_14_2::_abw($__myz), 150, 0); $__myt .= "<li>" . $__nay . "</li>"; } my $__naq = $__nbp->{$__myz->{'_pt'} . ",total"}; if ($__naq) { if ($__mzs == 0 || ($__myz->{'_pt'} < $__mzp)) { $__mzp = $__myz->{'_pt'}; } if ($__mzq < $__myz->{'_pt'}) { $__mzq = $__myz->{'_pt'}; } $__mzr += $__naq * $__myz->{'_pt'}; } $__myt .= "<li class=\"count_col\">" . $__naq . "</li>"; $__myt .= "<li class=\"percent_col\">"; my $__nao = authlib9_14_2::_abj(($__naq / $__nbp->{"total"}) * 100, 0); $__myt .= $__nao . "%"; $__myt .= "</li>"; $__myt .= "</ul>"; push @__nax, $__myz->{'_pt'}; if ($__nad) { push @__nax, $__nay; } push @__nax, $__naq; push @__nax, $__nao; push @__mzg, \@__nax; $__mzs++; } $__myt .= "</div>"; } $__myt .= "<div class=\"row report_summary_row\">\n"; $__myt .= "<div class=\"col\">\n"; my $__naz = authlib9_14_2::_aek($__nbs); my $__nar = 1; if (exists $authlib9_14_2::_akn{"chart_display_" . $__mzx}) { $__nar = $authlib9_14_2::_akn{"chart_display_" . $__mzx}; } $__myt .= "<b>Chart</b>: <select class=\"chart_display_dropdown\">\n"; $__myt .= "<option value=\"0\""; if ($__nar == 0) { $__myt .= " selected "; } $__myt .= ">None</option>\n"; $__myt .= "<option value=\"1\""; if ($__nar == 1) { $__myt .= " selected "; } $__myt .= ">Column</option>\n"; $__myt .= "<option value=\"2\""; if ($__nar == 2) { $__myt .= " selected "; } $__myt .= ">Pie</option>\n"; $__myt .= "</select>\n"; $__myt .= "</div>\n"; $__myt .= "<div class=\"col summary_stats_col\">\n"; $__myt .= "<ul>"; $__myt .= "<li><b>N</b>: " . $__nbp->{"total"} . "</li>"; $__myt .= "<li><b>Min</b>: " . $__mzp . "</li>"; $__myt .= "<li><b>Max</b>: " . $__mzq . "</li>"; if ($__nbr) { $__myt .= "<li><b>Mean</b>: " . authlib9_14_2::_abj(($__mzr / $__nbp->{"total"}), 2) . "</li>"; } $__myt .= "</ul></div>\n"; $__myt .= "<div class=\"col report_download_col\">\n"; $__myt .= "<a class=\"bold_link download_marginals_report\">Download</a>\n"; $__myt .= "</div>"; $__myt .= "</div>"; } else { $__myt .= _bqq(); $__nbo = 0; } } } else { $__myt .= _bqq(); foreach $__myy(@__myo) { my $__naf = $__myy->{'_if'}; push @__mzd, $__naf; } } if ($__myv) { my $__nba = authlib9_14_2::_aek($__nbs . "_" . join("_", @__mzd)); push @__mzf, $__nba; if ($__nbo) { $__myt .= _bpx($__nbs, \@__mze, \@__mzd, \@__mzc, \%__mzb, $__nba, $__nbe); } } else { push @__mzf, $__nbs; if ($__nbo) { $__myt .= _bpy($__nbs, \@__mzg, $__nbe); } } $__myt .= "</div></div>"; $ssiwebadmin9_14_2::_btm++; } } if (!@__myn) { $__myt .= _bqq(); } if ($__myu && !$__nbf) { $__myt .= _bqc(); } $__myt .= "</div>"; my $__nbb = ""; my $__nbc = ""; if (!$__nbf) { $__nbb .= "Data Report<span id=\"report_name_label\">"; if (!$__myu) { $__nbb .= " - " . $__nbd } $__nbb .= "</span>"; if ($__myw) { $__nbc = "Report generation timed out and was not generated completely. Please try again or select fewer rows or columns."; } $__myt = _boe($__nbb, $__myt, $__nbc); } return $__myt; } sub _bpk { my @__nca = (); my @__ncb = (); my $__ncc = _bpn(); my ($__ndr, $__nds, $__ndt, $__ndu) = _bpo(); @__nca = @$__ndt; @__ncb = @$__ndu; my ($__ndv, $__ndw, $__ndx, $__ndy) = _bpp(); my @__ncd = @$__ndv; my @__nce = @$__ndw; my $__ncf = 1; if (exists $authlib9_14_2::_akn{"hid_download_crosstab_type"}) { $__ncf = $authlib9_14_2::_akn{"hid_download_crosstab_type"}; } my $__ncg = _bpm($__ndt, $__ndu); my $__nch = 0; my $__nci = 0; my $__ncj = 0; my $__nck = 0; my $__ncl = 0; my %__ncm = (); my $__ncn = 0; my $__nco = 0; my $__ncp = 0; my @__ncq = (); my @__ncr = (); my @__ncs = (); my $__nct = 20; my $__ncu = "Value"; my $__ncv = "Label"; my $__ncw = "Total"; if (@__nca) { foreach $__nci(@__nca) { @__ncr = (); $__nch = authlib9_14_2::_ww($__ncc, $__nct); if ($__nch) { last; } my ($__ndz, $__nea, $__neb, $__nec, $__ned) = _bpl($__nci, \@__ncb, \@__nce, \@__ncd, $__ndx, $__ncg); if ($__ndz) { my $__ncx = $__nci->{'_gr'}; push @__ncs, [$__ncx]; if ($__ncg) { my @__ncy = (); my $__ncz = _bpq($__nci); push @__ncy, $__ncu; if ($__ncz) { push @__ncy, $__ncv; } push @__ncy, $__ncw; my ($__nee, $__nef, $__neg) = _bpr($__nci, \@__ncb, $__nea, $__neb); @__ncq = @$__neg; foreach $__ncj(@__ncb) { if (exists $__ncj->{'_bud'}) { foreach $__nck (@{$__ncj->{'_bud'}}) { my $__nda = _bnp(authlib9_14_2::_abw($__nck), 150, 0); my $__ndb = $__nck->{'_pt'}; if ($__nda) { $__ndb .= " - " . $__nda; } push @__ncy, $__ndb; } } } push @__ncs, \@__ncy; if (exists $__nci->{'_bud'}) { foreach $__nck (@{$__nci->{'_bud'}}) { my @__ndc = (); my $__ndd = 1; push @__ndc, $__nck->{'_pt'}; if ($__ncz) { my $__nde = _bnp(authlib9_14_2::_abw($__nck), 150, 0); push @__ndc, $__nde; } foreach $__ncj(@__ncb) { my $__ncp = $__nea->{$__nck->{'_pt'} . ",total"}; if ($__ndd) { my $__ndf = 0; if ($__ncp) { $__ndf = authlib9_14_2::_abj(($__ncp / $__nea->{"total"}) * 100, 1); } if ($__ncf == 1) { push @__ndc, $__ndf . "%"; } else { push @__ndc, $__ncp; } $__ndd = 0; } if (exists $__ncj->{'_bud'}) { my $__ndg = $__ncj->{'_if'}; my @__ndh = (); my $__ndi = 1; foreach $__ncl (@{$__ncj->{'_bud'}}) { my $__ndj = $__nea->{$__ndg . "," . $__nck->{'_pt'} . "," . $__ncl->{'_pt'}}; my $__ndf = 0; $__ncp = 0; if ($__ndj) { $__ncp = $__nea->{$__ndg . ",total," . $__ncl->{'_pt'}}; if ($__ncp) { $__ndf = authlib9_14_2::_abj(($__ndj / $__ncp) * 100, 1); } } if ($__ncf == 1) { push @__ndc, $__ndf . "%"; } else { push @__ndc, $__ndj; } push @__ndh, $__ndf; $__ndi++; } if (!exists $__ncm{$__ndg}) { $__ncm{$__ndg} = []; } push @{$__ncm{$__ndg}}, \@__ndh; } } push @__ncs, \@__ndc; } } } else { if (keys %{$__nea} && exists $__nea->{"total"} && $__nea->{"total"} > 0) { my $__ncz = 1; if (exists $__nci->{'_bue'}) { $__nci->{'_bud'} = _bqe($__nea); $__ncz = 0; } my @__ndk = (); my $__ndl = "Value"; my $__ndm = "Label"; my $__ndn = "Count"; my $__ndo = "Percent"; push @__ndk, $__ndl; if ($__ncz) { push @__ndk, $__ndm; } push @__ndk, $__ndn; push @__ndk, $__ndo; push @__ncs, \@__ndk; if (exists $__nci->{'_bud'}) { foreach $__nck (@{$__nci->{'_bud'}}) { my @__ndp = (); my $__ndq = ""; if ($__ncz) { $__ndq = _bnp(authlib9_14_2::_abw($__nck), 150, 0); } my $__ndj = $__nea->{$__nck->{'_pt'} . ",total"}; if ($__ndj) { if ($__ncn == 0 || $__nck->{'_pt'} < $__ncn) { $__ncn = $__nck->{'_pt'}; } if ($__nco < $__nck->{'_pt'}) { $__nco = $__nck->{'_pt'}; } $__ncp += $__ndj * $__nck->{'_pt'}; } my $__ndf = authlib9_14_2::_abj(($__ndj / $__nea->{"total"}) * 100, 0); push @__ndp, $__nck->{'_pt'}; if ($__ncz) { push @__ndp, $__ndq; } push @__ndp, $__ndj; push @__ndp, $__ndf; push @__ncr, \@__ndp; push @__ncs, \@__ndp; } } } else { $__ndz = 0; } } } else { foreach $__ncj(@__ncb) { my $__ndg = $__ncj->{'_if'}; push @__ncq, $__ndg; } } } } return \@__ncs; } sub _bpl { my ($__nff, $__nfg, $__nfh, $__nfi, $__nfj, $__nfk) = @_; my @__neh = @$__nfg; my @__nei = @$__nfh; my @__nej = @$__nfi; my $__nek = 1; my $__nel = 1; my $__nem = 0; my $__nen = {}; my $__neo = {}; my @__nep = (); my $__neq = 0; my $__ner = $__nff->{'_if'}; _bql($__ner, $__nen, $__neo, $__nff, $__nfg, $__nfh, $__nfi, $__nfj, 0, 0); if ($__nfk) { _bql($__ner, $__nen, $__neo, $__nff, [], $__nfh, $__nfi, $__nfj, 0, 0); if (exists $__nff->{'_buf'}) { foreach $__neq(@__neh) { my $__nes = $__neq->{'_if'}; _bql($__nes, $__nen, $__neo, $__neq, [], $__nfh, $__nfi, $__nfj, 1, $__nff); } } } if (exists $__nff->{'_buf'}) { my $__net = []; my $__neu = {}; $__nel = 0; my $__nev = $__nff->{'_buf'}; my $__new = $__nff->{'_bud'}; my $__nex = 0; foreach $__nex (@{$__new}) { my $__ney = $__nev; my $__nez = $__nex->{'_pt'}; $__ney =~ s/\*/$__nez/; _bqo($__ney, $__net, $__neu); } my $__nfa = _bqk($__neu, $__nfj); my $__nfb = "SELECT COUNT(*) FROM `" . join("`,`", @{$__nfa}) . "`"; @__nep = (); my @__nfc = (); my $__nfd = ""; foreach $__nfd (@{$__net}) { push @__nfc, $__nfd . " IS NOT NULL"; } push @__nep, "(" . join(" OR ", @__nfc) . ")"; push @__nep, @__nei; _bqn(\@__nep, $__nfa); $__nfb .= " WHERE " . join(" AND ", @__nep); eval { $__nem = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__nfb, 0), undef, @{$__nfi}); }; if ($@) { authlib9_14_2::_zq(241, "Database error.", "Database error. Cannot get data in Data Reports.", $@); } $__nen->{"total"} = $__nem->[0]->[0]; } my $__nfe = 0; if (keys %{$__nen}) { $__nfe = 1; } return ($__nfe, $__nen, $__neo, $__nel, $__ner); } sub _bpm { my ($__nfo, $__nfp) = @_; my @__nfl = @$__nfo; my @__nfm = @$__nfp; my $__nfn = 0; if (@__nfl && @__nfm) { $__nfn = 1; } return $__nfn; } sub _bpn { my $__nfq = 0; eval { require("Time/HiRes.pm"); $__nfq = [Time::HiRes::gettimeofday()]; }; if ($@) { authlib9_14_2::_zq(0, "Unable to load Time/HiRes.pm<br/><br/>", $@, ""); } return $__nfq; } sub _bpo { my @__nfr = (); my @__nfs = (); my ($__nfv, $__nfw) = authlib9_14_2::_aee(1, 0, 0, 0, 0, 0, ""); my $__nft = _bqh(\@__nfr, "report_rows", $__nfw, 0); my $__nfu = _bqh(\@__nfs, "report_columns", $__nfw, 0); return ($__nft, $__nfu, \@__nfr, \@__nfs); } sub _bpp { my @__nfx = (); my @__nfy = (); my $__nfz = {}; push @__nfy, authlib9_14_2::_aev($__nfz, 1); if ($authlib9_14_2::_aku) { _bps(&authlib9_14_2::_API, \@__nfy); } if (exists $authlib9_14_2::_akn{"status"}) { my $__nga = int($authlib9_14_2::_akn{"status"}); if ($__nga) { push @__nfy, "`$authlib9_14_2::_akj\_data1`.`sys_RespStatus` = ?"; push @__nfx, $__nga; $__nfz->{$authlib9_14_2::_akj . "_data1"} = 1; } } my ($__ngb, $__ngc, $__ngd) = _bmr($__nfz); if ($__ngb) { push @__nfy, $__ngb; push @__nfx, @{$__ngc}; } return (\@__nfx, \@__nfy, $__nfz, $__ngd); } sub _bpq { my ($__ngf) = @_; my $__nge = 1; if (exists $__ngf->{'_bue'}) { $__nge = 0; } return $__nge; } sub _bpr { my ($__ngp, $__ngq, $__ngr, $__ngs) = @_; my $__ngg = 0; my @__ngh = (); my $__ngi = 0; my $__ngj = {}; my $__ngk = {}; foreach $__ngg(@{$__ngq}) { my $__ngl = $__ngg->{'_if'}; push @__ngh, $__ngl; if (exists $__ngp->{'_bue'}) { _bqf($__ngr, $__ngs, $__ngk, $__ngl, 1); } if (exists $__ngg->{'_bue'}) { my $__ngm = {}; _bqf($__ngr, $__ngs, $__ngm, $__ngl, 0); if (!keys %{$__ngm}) { $__ngm->{0} = {'_pt' => "(no data)"}; } $__ngg->{'_bud'} = _bqg($__ngm); } my $__ngn = @{$__ngg->{'_bud'}}; $__ngi += $__ngn; $__ngj->{$__ngl} = $__ngn; } if (exists $__ngp->{'_bue'}) { if (!keys %{$__ngk}) { $__ngk->{0} = {'_pt' => "(no data)"}; } my $__ngo = _bqg($__ngk); $__ngp->{'_bud'} = $__ngo; } return ($__ngi, $__ngj, \@__ngh); } sub _bps { my ($__ngy, $__ngz) = @_; my $__ngt = 0; my $__ngu = "`" . $authlib9_14_2::_akj . "_data1`"; my $__ngv = "SELECT "; if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__ngv .= "TOP " . $__ngy . " "; } $__ngv .= "`sys_RespNum` FROM " . $__ngu; if ($authlib9_14_2::_ahn->{'_pj'} ne "odbc") { $__ngv .= " LIMIT " . $__ngy; } eval { $__ngt = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__ngv, 0)); }; if ($@) { authlib9_14_2::_zq(363, "Database error.", "Database error. Cannot get respondent numbers.", $@); } my $__ngw = 0; my @__ngx = (); foreach $__ngw (@{$__ngt}) { push @__ngx, $__ngu . ".`sys_RespNum` = " . $__ngw->[0]; } if (@__ngx) { push @{$__ngz}, "(" . join(" OR ", @__ngx) . ")"; } } sub _bpt { my ($__nha) = @_; if ($__nha =~ m/Disposition Code/i) { $__nha = "sys_DispositionCode"; } return $__nha; } sub _bpu { my ($__nhe, $__nhf, $__nhg, $__nhh) = @_; my $__nhb = ""; my $__nhc = ""; my $__nhd = "{\n"; if (@{$__nhe}) { $__nhd .= "\"report_rows\" => \"" . join(",", @{$__nhe}) . "\",\n"; } if (@{$__nhf}) { $__nhd .= "\"report_columns\" => \"" . join(",", @{$__nhf}) . "\",\n"; } foreach $__nhb (sort keys %{$__nhg}) { $__nhc = $__nhg->{$__nhb}; if (_bmq($__nhc)) { $__nhc =~ s/"/\\"/g; $__nhd .= "\"" . $__nhb . "\" => \"" . $__nhc . "\",\n"; } } if (exists $authlib9_14_2::_akn{"status"} && $authlib9_14_2::_akn{"status"}) { $__nhd .= "\"status\" => \"" . int($authlib9_14_2::_akn{"status"}) . "\",\n"; } if ($__nhe) { foreach $__nhb (@{$__nhe}) { $__nhb = "chart_display_" . $__nhb; $__nhd .= "\"" . $__nhb . "\" => "; if (exists $authlib9_14_2::_akn{$__nhb}) { $__nhd .= $authlib9_14_2::_akn{$__nhb}; } else { $__nhd .= "1"; } $__nhd .= ",\n"; } } $__nhd .= "}"; return $__nhd; } sub _bpv { my $__nhi = ""; $__nhi .= "<input name=\"hid_edit_report_id\" type=\"hidden\">"; $__nhi .= "<input name=\"hid_report_name\" id=\"hid_report_name\" type=\"hidden\">"; $__nhi .= "<input name=\"hid_data_download_name\" type=\"hidden\">"; $__nhi .= "<input name=\"hid_download_crosstab_type\" type=\"hidden\" value=\"1\">"; $__nhi .= "<div id=\"crosstab_download_prompt\">\n"; $__nhi .= "<input type=\"radio\" name=\"download_crosstab_type\" id=\"download_crosstab_percent\" checked value=\"1\"><label for=\"download_crosstab_percent\">Download data with <b>percents</b></label><br>"; $__nhi .= "<input type=\"radio\" name=\"download_crosstab_type\" id=\"download_crosstab_counts\" value=\"2\"><label for=\"download_crosstab_counts\">Download data with <b>counts</b></label><br>"; $__nhi .= "</div>\n"; my $__nhj = "jQuery(document).ready(function() {DownloadDataReportSetup(); EditDataReportSetup();});\n"; $__nhi .= authlib9_14_2::_xh($__nhj); return $__nhi; } sub _bpw { my $__nhk = ""; if (exists $authlib9_14_2::_akn{"hid_data_download_name"}) { $__nhk = $authlib9_14_2::_akn{"hid_data_download_name"}; } my $__nhl = ""; if (exists $authlib9_14_2::_akn{"hid_report_settings"}) { $__nhl = $authlib9_14_2::_akn{"hid_report_settings"}; my $__nhm = eval($__nhl); if ($@) { authlib9_14_2::_zq(245, "Database error.", "Database error. Error evaluating settings for data reports.", $@); } else { my $__nhn = ""; foreach $__nhn (keys %authlib9_14_2::_akn) { if ($__nhn !~ m/^hid_/i) { delete $authlib9_14_2::_akn{$__nhn}; } } foreach $__nhn (keys %{$__nhm}) { $authlib9_14_2::_akn{$__nhn} = $__nhm->{$__nhn}; } } } my $__nho = _bpk(); my $__nhp = 0; my $__nhq = ""; my $__nhr = ""; my $__nhs = "\r\n"; my $__nht = $__nhk; $__nht = _bpt($__nht); binmode STDOUT; print _bod($ssiwebadmin9_14_2::_bts . "_" . $__nht . "_report.csv"); foreach $__nhp (@{$__nho}) { $__nhr = ""; foreach $__nhq (@{$__nhp}) { if ($__nhq eq "0" || $__nhq eq "0%") { $__nhq = ""; } elsif ($__nhq && $__nhq !~ m/^[\.\d+]$/) { $__nhq = authlib9_14_2::_acj($__nhq); } $__nhr .= $__nhq . ","; } chop($__nhr); print $__nhr . $__nhs; } } sub _bpx { my ($__nii, $__nij, $__nik, $__nil, $__nim, $__nin, $__nio) = @_; my $__nhu = ""; my $__nhv = ""; my $__nhw = ""; my $__nhx = ""; my $__nhy = 0; $__nhu .= "<div class=\"crosstab_container\">\n"; $__nhu .= "<ul>\n"; my $__nhz = 1; my $__nia = "chart_" . $ssiwebadmin9_14_2::_btm; foreach $__nhw (@{$__nik}) { $__nhu .= "<li><a href=\"#" . $__nia . "_" . $__nhz . "\">" . $__nhw . "</a></li>\n"; $__nhz++; } $__nhu .= "</ul>\n"; my $__nib = ""; my $__nic = ""; my $__nid = 0; my $__nie = 0; $__nhz = 1; foreach $__nhw (@{$__nik}) { $__nhu .= "<div id=\"" . $__nia . "_" . $__nhz . "\" class=\"crosstab_chart chart_box\">\n"; $__nhu .= "<svg></svg>\n"; $__nhu .= "</div>\n"; my $__nif = $__nil->[$__nhy]; my $__nig = $__nim->{$__nhw}; $__nic = ""; $__nic .= "["; for ($__nie = 0; $__nie < @{$__nif}; $__nie++) { $__nic .= "{"; $__nic .= "key: \"" . _bpz($__nif->[$__nie], 0) . "\","; $__nic .= "values: ["; my $__nih = 0; foreach $__nid (@{$__nig}) { $__nic .= "{\"label\": \"" . _bpz($__nij->[$__nih]) . "\", \"value\":" . $__nid->[$__nie] . "},"; $__nih++; } chop($__nic); $__nic .= "]"; $__nic .= "},"; } chop($__nic); $__nic .= "]"; $__nib = "global_chart_data[\"" . $__nia . "_" . $__nhz . "_data\"] = " . $__nic . ";\n"; $__nhu .= authlib9_14_2::_xh($__nib); $__nhy++; $__nhz++; } $__nhu .= "</div>\n"; return $__nhu; } sub _bpy { my ($__nja, $__njb, $__njc) = @_; my $__nip = ""; my $__niq = "chart_" . $__njc . "_" . $ssiwebadmin9_14_2::_btm; $__nip .= "<div id=\"" . $__niq . "\" class=\"marginal_chart chart_box\">\n"; $__nip .= "<svg></svg>\n"; $__nip .= "</div>\n"; my @__nir = (); my @__nis = (); my $__nit = 0; my $__niu = ""; my $__niv = 0; my $__niw = @{$__njb}; my $__nix = ""; foreach $__nit (@{$__njb}) { if (@{$__nit} == 4) { $__niu = $__nit->[1]; $__niv = $__nit->[3]; } else { $__niu = $__nit->[0]; $__niv = $__nit->[2]; } $__nix = "{\"label\":\"" . _bpz($__niu, $__niw) . "\",\"value\":" . $__niv . "}"; push @__nis, $__nix; } my $__niy = join(",", @__nis); my $__niz = ""; $__niz .= "global_chart_data[\"" . $__niq . "_data\"] = [" . $__niy . "];\n"; $__nip .= authlib9_14_2::_xh($__niz); return $__nip; } sub _bpz { my ($__nje, $__njf) = @_; my $__njd = 50; if ($__njf > 8) { $__njd = 35; } $__nje =~ s/'/\\\'/g; $__nje =~ s/"/\\\"/g; $__nje =~ s/\n/ /g; $__nje = _bnp($__nje, $__njd, 0); if ($__nje eq "") { $__nje = " "; } return $__nje; } sub _bqa { my $__njg = ""; my $__njh = 0; my $__nji = ""; my $__njj = ""; my $__njh = 0; my $__njk = ""; my @__njl = (); if (exists $authlib9_14_2::_akn{"saved_reports"}) { my $__njm = _bqi($authlib9_14_2::_akn{"saved_reports"}); foreach $__njk (sort keys %{$__njm}) { push @__njl, $__njk; } } my @__njl = sort {$a <=> $b} @__njl; my $__njn = 0; foreach $__njn (@__njl) { eval { my $__njo = "SELECT * FROM `" . $authlib9_14_2::_akj . "_saved_reports` WHERE `id` = " . $__njn; my $__njp = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__njo, 0)); $__njh = $__njp->[0]->[0]; $__nji = authlib9_14_2::_wi($__njp->[0]->[1]); $__njj = authlib9_14_2::_wi($__njp->[0]->[2]); }; if ($@) { authlib9_14_2::_zq(243, "Database error.", "Database error. Cannot select saved reports.", $@); } if ($__njj) { my $__njq = eval($__njj); if ($@) { authlib9_14_2::_zq(244, "Database error.", "Database error. Error evaluating saved reports.", $@); } else { my $__njr = ""; foreach $__njr (keys %authlib9_14_2::_akn) { if ($__njr !~ m/^hid_/i) { delete $authlib9_14_2::_akn{$__njr}; } } my $__njs = ""; foreach $__njr (keys %{$__njq}) { $__njs = $__njq->{$__njr}; $authlib9_14_2::_akn{$__njr} = $__njs; } } } my $__njt = _bpj($__nji, $__njh, 0); $__njg .= $__njt; } return $__njg; } sub _bqb { my $__nju = "{"; my $__njv = ""; if (exists $authlib9_14_2::_akn{"report_names"}) { my $__njw = $authlib9_14_2::_akn{"report_names"}; my @__njx = split(",", $__njw); my $__njy = ""; my $__njz = 0; foreach $__njz (@__njx) { $__njy .= "`id` = " . $__njz . " OR "; } $__njy =~ s/\s+OR\s+$//i; eval { my $__nka = "DELETE FROM `" . $authlib9_14_2::_akj . "_saved_reports` WHERE " . $__njy; $authlib9_14_2::_ake->do(authlib9_14_2::_wh(authlib9_14_2::_wn($__nka, 0))); $authlib9_14_2::_ake->commit(); }; if ($@) { $__njv = "Database error. Cannot delete saved reports."; authlib9_14_2::_acg(&authlib9_14_2::_AOS, 0, $__njv, $@); } } if ($__njv) { $__nju .= "\"error\": \"" . $__njv . "\""; } $__nju .= "}"; return $__nju; } sub _bqc { my $__nkb = ""; $__nkb .= "<div class=\"save_report_box\">"; $__nkb .= "<a class=\"bold_link save_report_link prompt_link\">Save Report</a>"; $__nkb .= "<a class=\"bold_link report_settings_link\">Report Settings</a>"; $__nkb .= "</div>"; return $__nkb; } sub _bqd { my $__nkc = ""; $__nkc .= "<div class=\"edit_report_box\"><a class=\"bold_link edit_report_link\">Edit Report</a></div>"; return $__nkc; } sub _bqe { my ($__nkg) = @_; my $__nkd = ""; my @__nke = (); foreach $__nkd (sort keys %{$__nkg}) { if ($__nkd =~ m/^(-?(\d*\.\d+|\d+)),total$/i) { push @__nke, {'_pt' => $1}; } } my @__nkf = sort {$a->{'_pt'} <=> $b->{'_pt'}} @__nke; return \@__nkf; } sub _bqf { my ($__nkk, $__nkl, $__nkm, $__nkn, $__nko) = @_; my $__nkh = ""; my $__nki = 0; my $__nkj = $__nkl->{$__nkn}; foreach $__nkh (@{$__nkj}) { if ($__nkh =~ m/^$__nkn,(-?(\d*\.\d+|\d+)),(-?(\d*\.\d+|\d+))$/i) { if ($__nko) { $__nki = $1; } else { $__nki = $3; } $__nkm->{$__nki} = {'_pt' => $__nki}; } } } sub _bqg { my ($__nks) = @_; my $__nkp = ""; my @__nkq = (); foreach $__nkp (keys %{$__nks}) { push @__nkq, $__nks->{$__nkp}; } my @__nkr = sort {$a->{'_pt'} <=> $b->{'_pt'}} @__nkq; return \@__nkr; } sub _bqh { my ($__nlm, $__nln, $__nlo) = @_; my $__nkt = ""; my $__nku = ""; my $__nkv = 0; my $__nkw = 0; my $__nkx = 0; my $__nky = 0; my $__nkz = ""; my @__nla = (); my $__nlb = ""; my $__nlc = 0; if (exists $authlib9_14_2::_akn{$__nln}) { $__nlc = _bqi($authlib9_14_2::_akn{$__nln}); foreach $__nkv (@{$__nlo}) { $__nkt = $__nkv->[0]; $__nku = $__nkv->[1]; if ($__nku eq "") { $__nku = $__nkt; } $__nkz = $__nkt; if (exists $__nlc->{$__nkz}) { my $__nld = {}; push @__nla, $__nkz; $__nld->{'_if'} = $__nkt; $__nld->{'_gr'} = $__nku; $__nkw = authlib9_14_2::_aed($__nkt); if ($__nkw) { $__nkx = $__nkw->{'_pj'}; _bqp($__nkw); $__nlb = ""; if (exists $__nkw->{'_uf'}->{'_fn'}) { $__nlb .= "<div class=\"question_header1 question_header\">" . _bse($__nkw->{'_uf'}->{'_fn'}->{'_op'}) . "</div>\n"; } if (exists $__nkw->{'_uf'}->{'_fo'}) { $__nlb .= "<div class=\"question_header2 question_header\">" . _bse($__nkw->{'_uf'}->{'_fo'}->{'_op'}) . "</div>\n"; } if (exists $__nkw->{'_uf'}->{'_bc'}) { $__nlb .= "<div class=\"question_body question_header\">" . _bse($__nkw->{'_uf'}->{'_bc'}->{'_op'}) . "</div>\n"; } if (exists $__nkw->{'_uf'}->{'_fe'}) { $__nlb .= "<div class=\"question_grid_header question_header\">" . _bse($__nkw->{'_uf'}->{'_fe'}->{'_op'}) . "</div>\n"; } if ($__nlb) { $__nld->{'_op'} = $__nlb; } if ($__nkx == &authlib9_14_2::_ANG) { $__nky = authlib9_14_2::_adc($__nkw->{'_uf'}->{'_hj'}); $__nld->{'_bud'} = $__nky; if ($__nkw->{'_uf'}->{'_pj'} eq "check") { if ($__nkt =~ m/(.*?)(\..*?)$/) { $__nld->{'_buf'} = $1 . "_*" . $2; } else { $__nld->{'_buf'} = $__nkt . "_*"; } } } elsif ($__nkx == &authlib9_14_2::_ANS) { my $__nle = $__nkw->{'_uf'}; my $__nlf = $__nle->{'_pv'}; my $__nlg = 0; my $__nlh = ""; my $__nli = $__nkt; if ($__nli =~ m/(.*?)\./) { $__nli = $1; } if ($__nle->{'_pu'} eq "rows") { $__nli =~ s/_c(\*|\d+)//ig; } else { $__nli =~ s/_r(\*|\d+)//ig; } foreach $__nlg (@{$__nlf}) { if ($__nlg->{'_if'} eq $__nli) { $__nlh = ref($__nlg); if ($__nlh eq "RadioVar" || $__nlh eq "CheckVar") { if ($__nle->{'_pu'} eq "rows") { $__nld->{'_bud'} = authlib9_14_2::_adc($__nle->{'_co'}); } else { $__nld->{'_bud'} = authlib9_14_2::_adc($__nle->{'_mw'}); } if ($__nlh eq "CheckVar") { $__nld->{'_buf'} = $__nld->{'_if'}; } } elsif ($__nlh eq "ComboVar" || ($__nlh eq "RankVar") && ($__nlg->{'_pj'} eq "combo")) { $__nld->{'_bud'} = authlib9_14_2::_adc($__nlg->{'_hj'}); } elsif ($__nlh eq "NumericVar" || $__nlh eq "RankVar" || $__nlh eq "ConsumVar") { $__nld->{'_bue'} = 1; } last; } } } elsif ($__nkx == &authlib9_14_2::_ANY) { my $__nlj = authlib9_14_2::_aao($__nkt); my $__nlk = $__nlj->{'_ad'}; my $__nll = 0; if ($__nkt =~ m/BYO_(\d+)$/i) { $__nll = $1; } if (exists $__nlk->{$__nll}) { $__nky = authlib9_14_2::_adc($__nlk->{$__nll}->{'_he'}); $__nld->{'_bud'} = $__nky; } else { $__nld->{'_bue'} = 1; } } else { $__nld->{'_bue'} = 1; } } else { $__nld->{'_bue'} = 1; } push @{$__nlm}, $__nld; } } } return \@__nla; } sub _bqi { my ($__nls) = @_; my %__nlp = (); my @__nlq = split(",", $__nls); my $__nlr = ""; foreach $__nlr (@__nlq) { $__nlp{$__nlr} = 1; } return \%__nlp; } sub _bqj { my ($__nmg, $__nmh, $__nmi, $__nmj, $__nmk, $__nml) = @_; my $__nlt = 0; my @__nlu = (); my $__nlv = _bqk($__nmh, $__nmk); if ($__nml) { my $__nlw = []; my $__nlx = {}; if (exists $__nml->{'_buf'}) { my $__nly = $__nml->{'_buf'}; my $__nlz = $__nml->{'_bud'}; my $__nma = ""; my $__nmb = 0; my $__nmc = 0; foreach $__nmb (@{$__nlz}) { $__nma = $__nly; $__nmc = $__nmb->{'_pt'}; $__nma =~ s/\*/$__nmc/; _bqo($__nma, $__nlw, $__nlx); } $__nlv = _bqk($__nmh, $__nlx); my @__nmd = (); my $__nme = ""; foreach $__nme (@{$__nlw}) { push @__nmd, $__nme . " IS NOT NULL"; } push @__nlu, "(" . join(" OR ", @__nmd) . ")"; } } my $__nmf = "SELECT " . join(",", @{$__nmg}) . ", COUNT(*) FROM `" . join("`,`", @{$__nlv}) . "`"; push @__nlu, @{$__nmi}; _bqn(\@__nlu, $__nlv); if (@__nlu) { $__nmf .= " WHERE " . join(" AND ", @__nlu); } $__nmf .= " GROUP BY " . join(",", @{$__nmg}); eval { $__nlt = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__nmf, 0), undef, @{$__nmj}); }; if ($@) { authlib9_14_2::_zq(265, "Database error.", "Database error. Cannot get data in Data Reports.", $@); } return $__nlt; } sub _bqk { my ($__nmo, $__nmp) = @_; my $__nmm = ""; my @__nmn = (); foreach $__nmm (sort keys %{$__nmo}) { push @__nmn, $__nmm; } foreach $__nmm (sort keys %{$__nmp}) { if (!exists $__nmo->{$__nmm}) { $__nmo->{$__nmm} = 1; push @__nmn, $__nmm; } } return \@__nmn; } sub _bql { my ($__nnd, $__nne, $__nnf, $__nng, $__nnh, $__nni, $__nnj, $__nnk, $__nnl, $__nnm) = @_; my $__nmq = 0; my $__nmr = []; my $__nms = {}; my $__nmt = 0; my $__nmu = ""; my $__nmv = 0; my $__nmw = 0; my $__nmx = 0; my $__nmy = ""; my $__nmz = ""; my $__nna = 0; my $__nnb = 0; my $__nnc = 0; if (exists $__nng->{'_buf'}) { $__nmt = $__nng->{'_bud'}; } else { $__nmt = [{}]; } foreach $__nmv (@{$__nmt}) { $__nmr = []; $__nms = {}; $__nmw = 0; $__nnb = 0; $__nmu = $__nnd; if (exists $__nng->{'_buf'}) { $__nmu = $__nng->{'_buf'}; $__nmw = $__nmv->{'_pt'}; $__nmu =~ s/\*/$__nmw/; } if (@{$__nnh}) { foreach $__nnc(@{$__nnh}) { $__nmz = $__nnc->{'_if'}; if (exists $__nnc->{'_buf'}) { $__nmx = $__nnc->{'_bud'}; } else { $__nmx = [{}]; } foreach $__nna (@{$__nmx}) { $__nmr = []; $__nms = {}; _bqo($__nmu, $__nmr, $__nms); $__nmy = $__nnc->{'_if'}; if (exists $__nnc->{'_buf'}) { $__nmy = $__nnc->{'_buf'}; $__nnb = $__nna->{'_pt'}; $__nmy =~ s/\*/$__nnb/; } else { $__nnb = 0; } _bqo($__nmy, $__nmr, $__nms); $__nmq = _bqj($__nmr, $__nms, $__nni, $__nnj, $__nnk, $__nnm); _bqm($__nmq, $__nne, $__nnf, $__nmz, $__nmw, $__nnb, $__nnl); } } } else { _bqo($__nmu, $__nmr, $__nms); $__nmq = _bqj($__nmr, $__nms, $__nni, $__nnj, $__nnk, $__nnm); _bqm($__nmq, $__nne, $__nnf, $__nnd, $__nmw, $__nnb, $__nnl); } } } sub _bqm { my ($__nnu, $__nnv, $__nnw, $__nnx, $__nny, $__nnz, $__noa) = @_; my $__nnn = 0; my $__nno = 0; my $__nnp = 0; my $__nnq = 0; my $__nnr = 0; my $__nns = 0; foreach $__nnn (@{$__nnu}) { if (defined $__nnn->[0]) { $__nno = $__nnn->[-1]; if (@$__nnn == 3) { $__nns = 1; $__nnq = $__nnn->[0]; $__nnr = $__nnn->[1]; if ($__nny) { if ($__nnq == 1) { $__nnq = $__nny; } else { $__nns = 0; } } if ($__nnz) { if ($__nnr == 1) { $__nnr = $__nnz; } else { $__nns = 0; } } if ($__nns) { my $__nnt = $__nnx . "," . $__nnq . "," . $__nnr; $__nnv->{$__nnt} += $__nno; push @{$__nnw->{$__nnx}}, $__nnt; $__nnv->{$__nnx . ",total," . $__nnr} += $__nno; $__nnv->{$__nnx . ",mean_total," . $__nnr} += $__nnq * $__nno; if (exists $__nnv->{$__nnx . ",min," . $__nnr}) { if ($__nnq < $__nnv->{$__nnx . ",min," . $__nnr}) { $__nnv->{$__nnx . ",min," . $__nnr} = $__nnq; } } else { $__nnv->{$__nnx . ",min," . $__nnr} = $__nnq; } if (exists $__nnv->{$__nnx . ",max," . $__nnr}) { if ($__nnq > $__nnv->{$__nnx . ",max," . $__nnr}) { $__nnv->{$__nnx . ",max," . $__nnr} = $__nnq; } } else { $__nnv->{$__nnx . ",max," . $__nnr} = $__nnq; } if (exists $__nnv->{$__nnx . ",min"}) { if ($__nnq < $__nnv->{$__nnx . ",min"}) { $__nnv->{$__nnx . ",min"} = $__nnq; } } else { $__nnv->{$__nnx . ",min"} = $__nnq; } if (exists $__nnv->{$__nnx . ",max"}) { if ($__nnq > $__nnv->{$__nnx . ",max"}) { $__nnv->{$__nnx . ",max"} = $__nnq; } } else { $__nnv->{$__nnx . ",max"} = $__nnq; } } } else { $__nnq = $__nnn->[0]; $__nns = 1; if ($__nny) { if ($__nnq == 1) { $__nnq = $__nny; } else { $__nns = 0; } } if ($__nns) { if ($__noa) { $__nnv->{$__nnx. ",total," . $__nnq} = $__nno; } else { $__nnv->{"total"} += $__nno; $__nnv->{$__nnq . ",total"} += $__nno; $__nnv->{"mean_total"} += $__nnq * $__nno; if (exists $__nnv->{"min"}) { if ($__nnq < $__nnv->{"min"}) { $__nnv->{"min"} = $__nnq; } } else { $__nnv->{"min"} = $__nnq; } if (exists $__nnv->{"max"}) { if ($__nnq > $__nnv->{"max"}) { $__nnv->{"max"} = $__nnq; } } else { $__nnv->{"max"} = $__nnq; } } } } } } } sub _bqn { my ($__nod, $__noe) = @_; my $__nob = @{$__noe}; if ($__nob > 1) { my $__noc = 0; for ($__noc = 0; $__noc < ($__nob - 1); $__noc++) { push @{$__nod}, "`" . $__noe->[$__noc] . "`.`sys_RespNum` = `" . $__noe->[$__noc + 1] . "`.`sys_RespNum`"; } } } sub _bqo { my ($__noh, $__noi, $__noj) = @_; my $__nof = 0; my $__nog = ""; my ($__nok, $__nol) = authlib9_14_2::_xk($__noh); $__nog = $authlib9_14_2::_akj . "_data" . $__nok; $__noj->{$__nog} = 1; $__noh = "`" . $__nog . "`.`" . $__noh . "`"; push @{$__noi}, $__noh; } sub _bqp { my ($__noo) = @_; my $__nom = $__noo->{'_iz'}; seek $authlib9_14_2::_ajm, ($__nom), 0; my $__non = authlib9_14_2::_zi(0); $__noo->{'_uf'} = $__non; } sub _bqq { return "<div>No data for this report.</div>"; } sub _bqr { my ($__now, $__nox, $__noy) = @_; my $__nop = tell $authlib9_14_2::_ajm; my $__noq = $__noy->{'_iz'}; seek $authlib9_14_2::_ajm, ($__noq), 0; my $__nor = authlib9_14_2::_zi(0); my $__nos = authlib9_14_2::_adc($__nor->{'_hj'}); my $__not = @{$__nos}; my $__nou = 0; my $__nov = 0; for ($__nou = 1; $__nou <= $__not; $__nou++) { if (!exists($__now->{$__nox}->{$__nou})) { $__now->{$__nox}->{$__nou} = '0'; } else { $__nov = 1; } } if (!$__nov) { $__now->{$__nox} = {}; } seek $authlib9_14_2::_ajm, $__nop, 0; } sub _bqs { my ($__npb, $__npc) = @_; my $__noz = ""; my $__npa = ""; $__noz .= "<div class=\"button_container\">\n"; if (exists $authlib9_14_2::_akn{"hid_admin_test_mode"}) { my ($__npd, $__npe) = _bru($__npb, 1); $__noz .= $__npd; if ($ssiwebadmin9_14_2::_bua) { _brv($__npb, $__npc, 0); } $__noz .= _bqt("test_survey_run", 0); $__noz .= "<a class=\"bold_link\" id=\"test_survey_return\">Exit Test Mode</a>"; } else { if ($ssiwebadmin9_14_2::_bua) { $__noz .= "\"Apply Changes\" must be clicked above before entering Test Mode."; } else { $__noz .= "<a id=\"test_survey_admin\" class=\"green_button\">Enter Test Mode</a>"; $__npa .= _bnu("test_survey_admin"); } } $__noz .= "</div>"; $__noz .= authlib9_14_2::_xh($__npa); return _boe("Test Survey", $__noz); } sub _bqt { my ($__npg, $__nph) = @_; my $__npf = "<a href=\"ciwweb.pl?hid_studyname=" . htmlentity::encode($authlib9_14_2::_akn{"hid_studyname"}) . "&hid_test_mode=" . $authlib9_14_2::_akx . "&hid_test_db=1\" target=\"new_window\""; if (!$__nph) { $__npf .= " class=\"green_button_no_link\""; } $__npf .= " id=\"" . $__npg . "\">Run Test Survey</a>"; return $__npf; } sub _bqu { print authlib9_14_2::_zb(); print "<html><head>\n"; print "<meta http-equiv=\"refresh\" content=\"0;"; print "url=ciwweb" . $authlib9_14_2::_aib . "?hid_studyname=" . htmlentity::encode($authlib9_14_2::_akn{"hid_studyname"}) . "&hid_pagenum=0&hid_test_mode=" . $authlib9_14_2::_akx . "\">\n"; print "<meta http-equiv=\"pragma\" content=\"no-cache\">\n"; print "</head>\n<body bgcolor=\"#ffffff\"></body></html>\n"; } sub _qk { my ($__npi) = @_; eval { require $__npi; }; if ($@) { print "Content-type: text/html\r\n\r\n"; print "<html><body style=\"font-family: arial; margin: 20px;\">"; print "<span style=\"color: red; font-weight: bold; padding-right: 10px\">Error:</span>"; print "Cannot load library: <span style=\"color: blue;\">" . $__npi . "</span>"; print "<div style=\"margin-top: 20px;\">" . $@ . "</div>"; print "</body></html>"; exit(); } } sub _bqv { my ($__nqc, $__nqd, $__nqe, $__nqf, $__nqg) = @_; my $__npj = ""; my $__npk = 0; my $__npl = ""; my $__npm = ""; my $__npn = 0; my $__npo = 0; my $__npp = 0; my $__npq = ""; if (!$__nqc) { $__npj .= "<style type=\"text/css\">\n"; $__npj .= ".stage{margin-left: 10px;}\n"; $__npj .= "</style>\n"; } authlib9_14_2::_we(); ($__npk, $__npl, $__npm) = authlib9_14_2::_wd($authlib9_14_2::_ajw); $__npj .= _bqx("Database Connectivity", $__npk, $__npl, $__npm); if ($__npk && $__nqd) { ($__npk, $__npl, $__npm, $__npp) = authlib9_14_2::_xq($__nqg); if ($__npp) { $__npj .= _bqx("Database Table Name Conflict", 0, $__npl, $__npm); } elsif (!$__npk) { my ($__nqh, $__nqi, $__nqj, $__nqk, $__nql) = _bqz(0); if ($__nql) { $__npk = 0; $__npl = $__nql->{'_amm'}; $__npm = $__nql->{'_amn'}; } else { ($__npk, $__npl, $__npm, $__npn, $__npo) = _bra(1, $__nqi, $__nqj, $__nqk, $__nqf); } if ($__npk) { ($__npk, $__npl, $__npm, $__npp) = authlib9_14_2::_xq($__nqg); if ($__npp) { $__npj .= _bqx("Database Table Name Conflict", 0, $__npl, $__npm); } elsif ($__npk) { ($__npk, $__npl, $__npm) = _bry($__nqk); if ($__npk) { _brd(); } } } $__npj .= _bqx("Survey Loaded", $__npk, $__npl, $__npm); if ($__npk) { if (exists $authlib9_14_2::_ajw->{"respnum_start"}) { my $__npr = $authlib9_14_2::_ajw->{"respnum_start"}; if ($__npr > 1) { if ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { my $__nps = $__npr - 1; eval { my $__npt = "INSERT INTO sqlite_sequence (`name`, `seq`) VALUES (?, ?)"; my $__npu = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__npt, 0)); $__npu->execute($authlib9_14_2::_akj . "_data1", $__nps); $__npu->finish; $authlib9_14_2::_ake->commit(); }; if ($@) { $__npk = 0; $__npl = "Failed to set Respondent Number"; $__npm = $@; } } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { } else { eval { my $__npt = "ALTER TABLE `" . $authlib9_14_2::_akj . "_data1` AUTO_INCREMENT = " . $__npr; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__npt, 1)); $authlib9_14_2::_ake->commit(); }; if ($@) { $__npk = 0; $__npl = "Failed to set Respondent Number"; $__npm = $@; } } $__npj .= _bqx("Custom Respondent Number Start: " . $__npr, $__npk, $__npl, $__npm); if (!$__npk) { _bpg(0, $__nqf); } } } if ($__npn) { if (!$authlib9_14_2::_ajz) { $__npj .= _bqw($__npn, $__npo); $__npj .= "<div class=\"all_finished_message\"><b>Survey updated!</b></div>"; } } } } } if ($authlib9_14_2::_ajz) { if ($__npk) { if ($__npn) { _bsr(1, "password_offset", $__npn, 0); } else { _bsr(1, "finished", "true", 0); } } else { _bsr(0, "error", $__npl, 1); } } else { if ($__npk) { if ($__nqf) { $__npj .= "<div style=\"margin-top: 10px; margin-bottom: 20px;\" class=\"all_finished_message\"><b>Your survey has been reset. All respondent data has been removed and the survey has been reloaded.</b></div>"; } } $__npj .= "<div class=\"setup_system_info_box\">\n"; $__npj .= "<div class=\"setup_system_info_header\">System Information</div>\n"; $__npj .= "<table>\n"; $__npj .= _bqy("Lighthouse Studio Version", $authlib9_14_2::_aia); $__npj .= _bqy("Perl Version", $]); if ($authlib9_14_2::_ake) { $__npj .= _bqy("Database", $authlib9_14_2::_ake->get_info(17) . " - " . $authlib9_14_2::_ake->get_info(18)); } my @__npv = ("DBI", "DBD::mysql", "DBD::ODBC", "DBD::SQLite", "DateTime"); my $__npw = ""; foreach my $__npx (@__npv) { my $__npy = "Perl Module - " . $__npx . " - Version"; $__npw = "require " . $__npx; eval $__npw; if ($__npx->VERSION) { $__npj .= _bqy($__npy, $__npx->VERSION); } else { if ($__npx eq "DateTime") { $__npj .= _bqy($__npy, "Not Installed - <i>dates in your data may not display as expected</i>"); } } } $__npj .= "</table></div>\n"; if ($__nqe && !$authlib9_14_2::_aku) { my $__npz = $authlib9_14_2::_akm->{"num_data_tables"}; my $__nqa = 0; my $__nqb = ""; $__npj .= "<div class=\"setup_system_info_box\">\n"; $__npj .= "<div class=\"setup_system_info_header\">Download Database Tables</div>\n"; $__npj .= "<div class=\"download_db_tables_box row\">\n"; $__npj .= "<div class=\"col\">\n"; $__npj .= "<div><a id=\"download_history_table\" class=\"bold_link\">History Table</a></div>\n"; $__npj .= "<div><a id=\"download_admin_log_table\" class=\"bold_link\">Admin Log Table</a></div>\n"; $__npj .= "<div><a id=\"download_survey_log_table\" class=\"bold_link\">Survey Log Table</a></div>\n"; $__npj .= "<div><a id=\"download_clists_table\" class=\"bold_link\">Constructed Lists Table</a></div>\n"; $__npj .= "<div><a id=\"download_info_table\" class=\"bold_link\">Info Table</a></div>\n"; $__npj .= "<div><a id=\"download_map_table\" class=\"bold_link\">Map Table</a></div>\n"; $__npj .= "<div><a id=\"download_design_log_table\" class=\"bold_link\">Design Log Table</a></div>\n"; $__npj .= "<div><a id=\"download_url_restore_table\" class=\"bold_link\">URL Restore Table</a></div>\n"; $__npj .= "<div><a id=\"download_maxdiff_banditdata_table\" class=\"bold_link\">MaxDiff Bandit Data Table</a></div>\n"; if ($authlib9_14_2::_akm->{"password_build"}) { $__npj .= "<div><a id=\"download_passwords_table\" class=\"bold_link\">Identifiers Table</a></div>\n"; } $__npj .= "</div>"; $__npj .= "<div class=\"col\">\n"; for ($__nqa = 1; $__nqa <= $__npz; $__nqa++) { $__npj .= "<div><a id=\"download_data" . $__nqa . "_table\" class=\"bold_link\">Data" . $__nqa . " Table</a></div>\n"; } $__npj .= "</div></div></div>\n"; } if (!$__nqc) { $__npj .= "<div class=\"button_container\">\n"; $__npj .= "<a href=\"#\" id=\"study_summary\" class=\"green_button main_menu_button\">"; if ($__npk) { $__npj .= "Main Menu"; } else { $__npj .= "Try Again"; } $__npj .= "</a></div>\n"; } $__npq = "Setup"; if ($__nqe) { $__npq = "Advanced"; } elsif ($__nqf) { $__npq = "Reset Survey"; } } return _boe($__npq, $__npj); } sub _bqw { my ($__nqr, $__nqs, $__nqt) = @_; my $__nqm = ""; my $__nqn = $ENV{'SCRIPT_NAME'}; my $__nqo = 0; my $__nqp = ""; my $__nqq = int($__nqr / 1024); $__nqs = int($__nqs / 1024); if (exists $authlib9_14_2::_akn{"hid_session"}) { $__nqo = $authlib9_14_2::_akn{"hid_session"}; } if (exists $authlib9_14_2::_akn{"hid_studyname"}) { $__nqp = $authlib9_14_2::_akn{"hid_studyname"}; } $__nqm .= "<style type=\"text/css\">.all_finished_message, .main_menu_button{display: none;}</style>"; $__nqm .= "<div id=\"loading_passwords\">Loading identifiers... <b><span id=\"password_offset\">" . $__nqq . "</span></b> of " . $__nqs . " KB"; $__nqm .= "<div style=\"margin: 30px;\">\n"; $__nqm .= "<img src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/loading.gif\" alt=\"Processing...\">\n"; $__nqm .= "</div>"; $__nqm .= "</div>"; $__nqm .= authlib9_14_2::_xh("AddPasswords(\"" . $__nqn . "\",\"" . $__nqp . "\", \"" . $__nqo . "\",\"" . $__nqr . "\",\"" . $authlib9_14_2::_akj . "\", " . $__nqt . ")"); return $__nqm; } sub _bqx { my ($__nqv, $__nqw, $__nqx, $__nqy) = @_; my $__nqu = ""; $__nqu .= "<div class=\"setup_item\">\n"; $__nqu .= "<div class=\"setup_header\"><table><tr>"; $__nqu .= "<td><img src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/"; if ($__nqw) { $__nqu .= "green_check.gif"; } else { $__nqu .= "red_x.gif"; } $__nqu .= "\"></td>"; $__nqu .= "<td class=\"setup_title\">"; if (!$__nqw) { $__nqu .= "<span class=\"setup_failed\">FAILED</span>\n"; } $__nqu .= $__nqv . "</td>"; $__nqu .= "</tr></table></div>"; $__nqu .= "<div class=\"setup_body\">\n"; $__nqx =~ s/\n/<br>/gi; $__nqu .= "<div class=\"setup_simple_error\">" . $__nqx . "</div>"; if ($__nqy) { $__nqu .= "<div class=\"setup_system_error\"><b>System Error:</b> " . $__nqy . "</div>"; } $__nqu .= "</div>"; $__nqu .= "</div>"; return $__nqu; } sub _bqy { my ($__nqz, $__nra) = @_; return "<tr><td class=\"setup_system_info_title\">" . $__nqz . ":</td><td class=\"setup_system_info_value\">" . $__nra . "</td></tr>"; } sub _bqz { my ($__nrl) = @_; my %__nrb = (); my $__nrc = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_questionnaire.cgi"; my ($__nrm, $__nrn) = authlib9_14_2::_yg($__nrc, "read", 0, 0); if ($__nrn) { return ("", "", "", {}, $__nrn); } binmode $__nrm; seek $__nrm, 0, 0; my ($__nro, $__nrp, $__nrq, $__nrn) = authlib9_14_2::_ym($__nrm, 0, $__nrl); if (!$__nrl && !$__nrn) { my ($__nrr, $__nrs, $__nrt, $__nru, $__nrv, $__nrw, $__nrx) = authlib9_14_2::_yn($__nrm); my $__nrd = authlib9_14_2::_zj($__nrm, $__nrc, 1); $authlib9_14_2::_akp = authlib9_14_2::_zj($__nrm, $__nrc, 1); if ($__nrt) { seek $__nrm, $__nrt, 0; my $__nre = authlib9_14_2::_zj($__nrm, $__nrc, 1); my $__nrf = $__nre->{'_lg'}; my $__nrg = ""; my $__nrh = 0; my $__nri = 0; my $__nrj = 0; my $__nrk = 0; foreach $__nrg (@{$__nrf}) { $__nrh = $authlib9_14_2::_ahp{$__nrg}; seek $__nrm, $__nrh->{'_iz'}, 0; $__nri = authlib9_14_2::_zj($__nrm, $__nrc, 1); $__nrj = $__nri->{'_lf'}; foreach $__nrk (@{$__nrj}) { $__nrb{$__nrg . "_" . $__nrk->{'_pt'}} = $__nrk->{'_hi'}; } } } } close $__nrm; return ($__nro, $__nrp, $__nrq, \%__nrb, $__nrn); } sub _bra { my ($__nsq, $__nsr, $__nss, $__nst, $__nsu) = @_; my $__nry = $authlib9_14_2::_ahn->{'_amh'}; my $__nrz = ""; my $__nsa = ""; my $__nsb = ""; my $__nsc = 0; my $__nsd = ""; my $__nse = ""; my $__nsf = ""; my $__nsg = 0; my $__nsh = 0; my $__nsi = 0; my $__nsj = ""; my ($__nsv, $__nsw, $__nsx, $__nsy) = _brg($__nsr, 1, 0); if ($__nsy) { return (0, $__nsy->{'_amm'}, $__nsy->{'_amn'}, 0); } ($__nsg, $__nsy, $__nsh, $__nsi, $__nsj) = _brh($__nsq, $__nss, 1); if (!$__nsg) { return (0, $__nsy->{'_amm'}, $__nsy->{'_amn'}, 0); } if ($__nsq) { _bpg(0, $__nsu); eval { $__nsb = "CREATE TABLE `" . $authlib9_14_2::_akj . "_info` (`data_version` INT, `layout_build` TEXT, `password_build` TEXT, `study_path` TEXT, `num_data_tables` INT, `remove_num` INT, `survey_paused` TINYINT(1), `close_survey` TINYINT(1), `close_survey_msg` TEXT, `capi_deviceid` TEXT, `local_test_mode` TINYINT(1), `log_last_viewed` INT NOT NULL) " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create info table.", $__nsk, 0); } eval { $__nsb = "CREATE TABLE `" . $authlib9_14_2::_akj . "_clists` (`sys_RespNum` INT NOT NULL, `list_name` VARCHAR(255) NOT NULL, `value` TEXT NOT NULL, PRIMARY KEY(`sys_RespNum`, `list_name`))" . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create clists table.", $__nsk, 0); } eval { $__nsb = "CREATE TABLE `" . $authlib9_14_2::_akj . "_history` (`sys_RespNum` INT NOT NULL, `hop` INT NOT NULL, `ipaddress` VARCHAR(128) NOT NULL, `user_agent` TEXT NOT NULL, `timestamp` INT NOT NULL, `qst_version` VARCHAR(256) NOT NULL, `quest_name` VARCHAR(64) NOT NULL, `quest_version` VARCHAR(128) NOT NULL, `page_num` INT NOT NULL, `limbo` TINYINT(1) NOT NULL, `data` TEXT NOT NULL, PRIMARY KEY(`sys_RespNum`, `hop`))"; $__nsb .= $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create history table.", $__nsk, 0); } eval { $__nsb = "CREATE INDEX `" . $authlib9_14_2::_akj . "_history_questname_index` ON `" . $authlib9_14_2::_akj . "_history` (`quest_name`)"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { return (0, "Database error. Cannot create history index.", $@, 0); } eval { $__nsb = "CREATE INDEX `" . $authlib9_14_2::_akj . "_history_questversion_index` ON `" . $authlib9_14_2::_akj . "_history` (`quest_version`)"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { return (0, "Database error. Cannot create history index.", $@, 0); } eval { $__nsb = "CREATE INDEX `" . $authlib9_14_2::_akj . "_history_pagenum_index` ON `" . $authlib9_14_2::_akj . "_history` (`page_num`)"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { return (0, "Database error. Cannot create history index.", $@, 0); } eval { $__nsb = "CREATE INDEX `" . $authlib9_14_2::_akj . "_history_limbo_index` ON `" . $authlib9_14_2::_akj . "_history` (`limbo`)"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { return (0, "Database error. Cannot create history index.", $@, 0); } eval { $__nsb = "CREATE TABLE `" . $authlib9_14_2::_akj . "_design_log` (`sys_RespNum` INT NOT NULL, `ipaddress` VARCHAR(128) NOT NULL, `user_agent` TEXT NOT NULL, `timestamp` INT NOT NULL, `qst_version` VARCHAR(256) NOT NULL, `exercisename` VARCHAR(32) NOT NULL, `input` TEXT NOT NULL, `message` TEXT NOT NULL)" . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create design_log table.", $__nsk, 0); } my ($__nsz, $__nta) = _brc(); if ($__nsz) { return (0, $__nsz, $__nta, 0); } ($__nsz, $__nta) = _brb(); if ($__nsz) { return (0, $__nsz, $__nta, 0); } eval { $__nsb = "INSERT INTO `" . $authlib9_14_2::_akj . "_info` (`data_version`, `layout_build`, `study_path`, `log_last_viewed`, `close_survey_msg`) VALUES (?, ?, ?, ?, ?)"; my $__nsl = $authlib9_14_2::_ahv{'_aml'}; if (exists($ENV{'SSI_NO_PATH_CHECK'}) || (defined ($ENV{'SSI_NO_PATH_CHECK'}))) { $__nsl = "test mode - " . $ENV{'SCRIPT_FILENAME'}; } $__nsc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nsb, 0)); $__nsc->execute($ssiwebadmin9_14_2::_btn, authlib9_14_2::_wh($__nsx), authlib9_14_2::_wh($__nsl), 0, $ssiwebadmin9_14_2::_bto); $__nsc->finish; }; if ($@) { return (0, "Database error. Cannot insert into info table.", $@, 0); } if (!$__nsu || $authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { eval { my $__nsm = $authlib9_14_2::_akj . "_admin_log"; $__nsb = "`" . $__nsm . "`(`date` TEXT NOT NULL, `action` TEXT NOT NULL, `info` TEXT, `ipaddress` VARCHAR(128), `user_agent` TEXT, `time_stamp` INT)" . $authlib9_14_2::_ahn->{'_ami'}; if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__nsb = "IF OBJECT_ID('" . $__nsm . "') IS NULL CREATE TABLE " . $__nsb; } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { $__nsb = "CREATE TABLE " . $__nsb; } else { $__nsb = "CREATE TABLE IF NOT EXISTS " . $__nsb; } $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create admin_log table.", $__nsk, 0); } } } eval { $__nsb = authlib9_14_2::_wl($authlib9_14_2::_akj . "_map"); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 0)); }; if ($@) { return (0, "Database error. Cannot delete map table.", $@, 0); } eval { $__nsb = "CREATE TABLE `" . $authlib9_14_2::_akj . "_map` (`table` INT, `name` VARCHAR(255) PRIMARY KEY, `base_name` VARCHAR(255)) " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create map table.", $__nsk, 0); } eval { $__nsb = authlib9_14_2::_wl($authlib9_14_2::_akj . "_url_restore"); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 0)); }; if ($@) { return (0, "Database error. Cannot delete url_restore table.", $@, 0); } eval { $__nsb = "CREATE TABLE `" . $authlib9_14_2::_akj . "_url_restore` (`id` INT PRIMARY KEY"; $__nsb .= " " . $authlib9_14_2::_ahn->{'_amj'}; $__nsb .= ", `timestamp` INT, `fields` TEXT) " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nsb, 1)); }; if ($@) { my $__nsk = $@; $__nsk .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nsk .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create url_restore table.", $__nsk, 0); } my $__nsn = 0; if ($__nsq) { ($__nsn, $__nsd, $__nse) = _brq($__nsv, $__nsw, $__nry, 0); } else { ($__nsn, $__nsd, $__nse) = _brr($__nsv, $__nsw, $__nry); } if ($__nsn == 0 && $__nsd) { return (0, $__nsd, $__nse, 0); } eval { $__nsb = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `layout_build`=?,`num_data_tables`=?"; $__nsc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nsb, 0)); $__nsc->execute($__nsx, $__nsn); $__nsc->finish; }; if ($@) { return (0, "Database error. Cannot update info table.", $@, 0); } ($__nsg, $__nsy) = _brf($__nsw); my $__nso = 0; my $__nsp = 0; if ($__nsh) { ($__nsg, $__nsy, $__nso) = _brm($__nsi, $__nsj, 0); $__nsp = -s $__nsi; close $__nsi; if (!$__nsg) { return (0, $__nsy->{'_amm'}, $__nsy->{'_amn'}, 0); } } $authlib9_14_2::_ake->commit(); return (1, "", "", $__nso, $__nsp); } sub _brb { my $__ntb = ""; my $__ntc = ""; eval { my $__ntd = "CREATE TABLE `" . $authlib9_14_2::_akj . "_survey_log` (`id` INT PRIMARY KEY " . $authlib9_14_2::_ahn->{'_amj'} . ", " . authlib9_14_2::_acb() . ")" . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__ntd, 1)); }; if ($@) { my $__nte = $@; $__nte .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nte .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } $__ntb = "Database error. Cannot create survey_log table."; $__ntc = $__nte; } return($__ntb, $__ntc); } sub _brc { eval { my $__ntf = ""; my $__ntg = $authlib9_14_2::_akj . "_maxdiff_banditdata"; my $__nth = "(`exercise_name` VARCHAR(32) NOT NULL, `parent_list_value` INT NOT NULL, `times_included` INT NOT NULL, `occurrences` INT NOT NULL, `inferred_pair_best` INT NOT NULL, `inferred_pair_total` INT NOT NULL, PRIMARY KEY (`exercise_name`, `parent_list_value`))"; if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__ntf = "IF OBJECT_ID('" . $__ntg . "') IS NULL CREATE TABLE `". $__ntg . "` " . $__nth . $authlib9_14_2::_ahn->{'_ami'}; } else { $__ntf = "CREATE TABLE IF NOT EXISTS `". $__ntg . "` " . $__nth . $authlib9_14_2::_ahn->{'_ami'}; } $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__ntf, 1)); }; if ($@) { return ("Database error. Cannot create maxdiff_banditdata table", $@); } } sub _brd { if (exists $authlib9_14_2::_akp->{'_am'}) { my $__nti = @{$authlib9_14_2::_ako}; my $__ntj = $authlib9_14_2::_akj . "_maxdiff_banditdata"; for (my $__ntk = 0; $__ntk < $__nti; $__ntk++) { my $__ntl = $authlib9_14_2::_ako->[$__ntk]; my $__ntm = $__ntl->{'_ld'}; my $__ntn = @{$__ntm}; for (my $__nto = 0; $__nto < $__ntn; $__nto++) { my $__ntp = $__ntm->[$__nto]; if ($__ntp->{'_pj'} == &authlib9_14_2::_ANW && $__ntp->{'_if'} =~ m/^(([A-Za-z0-9]*)_1)$/) { my $__ntq = authlib9_14_2::_aay($1); my $__ntr = $2; my $__nts = authlib9_14_2::_acx($__ntq->{'_hj'}); if ($__nts && exists $__nts->{'_jq'}) { $__nts = authlib9_14_2::_acx($__nts->{'_jq'}); } else { next; } my $__ntt = 0; eval { my $__ntu = "SELECT COUNT(*) FROM `" . $__ntj . "` WHERE `exercise_name`='" . $__ntr . "'"; my $__ntv = $authlib9_14_2::_ake->selectrow_arrayref($authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ntu, 0))); $__ntt = $__ntv->[0]; }; if ($@) { authlib9_14_2::_zq(354, "", "Database error. Cannot read " . $__ntj . " table.", $@); } my $__ntw = scalar(@{$__nts->{'_gk'}}); if ($__ntw != $__ntt) { authlib9_14_2::_wf($__ntj); eval { if ($__ntw > $__ntt) { my $__ntx = "INSERT INTO `" . $__ntj . "` VALUES (?, ?, ?, ?, ?, ?)"; my $__nty = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ntx, 0)); for (my $__ntz = $__ntt; $__ntz < $__ntw; $__ntz++) { my $__nua = $__nts->{'_gk'}->[$__ntz]->{'_pt'}; $__nty->execute($__ntr, $__nua, 0, 0, 5, 10); } $authlib9_14_2::_ake->commit(); } else { my $__ntx = "DELETE FROM `" . $__ntj . "` WHERE `exercise_name`=? AND `parent_list_value`>?"; my $__nty = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ntx, 0)); $__nty->execute($__ntr, $__ntw); $authlib9_14_2::_ake->commit(); } }; if ($@) { my $__nub = $@; authlib9_14_2::_wg(); authlib9_14_2::_zq(353, "", "Database error. Cannot populate " . $__ntj . " table.", $__nub); } authlib9_14_2::_wg(); } } } } } } sub _bre { eval { my $__nuc = $authlib9_14_2::_akj . "_maxdiff_banditdata"; my $__nud = $authlib9_14_2::_akj . "_maxdiff_banditdata_old"; my $__nue; if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__nue = "EXEC sp_rename `" . $__nuc . "`, `" . $__nud . "`"; } else { $__nue = "ALTER TABLE `" . $__nuc . "` RENAME TO `" . $__nud . "`"; } my $__nuf = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nue, 0)); $__nuf->execute(); my $__nug = "CREATE TABLE `" . $__nuc . "` (`exercise_name` VARCHAR(32) NOT NULL, `parent_list_value` INT NOT NULL, `times_included` INT NOT NULL, `occurrences` INT NOT NULL, `inferred_pair_best` INT NOT NULL, `inferred_pair_total` INT NOT NULL, PRIMARY KEY (`exercise_name`, `parent_list_value`))"; my $__nuh = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nug, 1)); $__nuh->execute(); my $__nui = "SELECT DISTINCT `exercise_name` FROM `" . $__nud . "`"; my $__nuj = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nui, 0)); $__nuj->execute(); my $__nuk = $__nuj->fetchall_arrayref(); foreach my $__nul (@{$__nuk}) { my $__num = $__nul->[0]; my $__nun = "SELECT COUNT(*), `parent_list_value`, MAX(`design_id`) FROM `" . $__nud . "` WHERE `exercise_name`=? GROUP BY `parent_list_value`"; my $__nuo = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nun, 0)); $__nuo->execute($__num); my $__nup = $__nuo->fetchall_arrayref(); my $__nuq = 0; my $__nur = $__nup->[0]->[0]; foreach my $__nus (@{$__nup}) { if ($__nus->[0] != $__nur) { $__nuq = 1; last; } } if ($__nuq) { my $__nut = "SELECT `times_included`, `occurrences`, `inferred_pair_best`, `inferred_pair_total` FROM `" . $__nud . "` WHERE `exercise_name`=? AND `parent_list_value`=? AND `design_id`=?"; my $__nuu = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nut, 0)); my $__nuv = "INSERT INTO `" . $__nuc . "` (`exercise_name`, `parent_list_value`, `times_included`, `occurrences`, `inferred_pair_best`, `inferred_pair_total`) VALUES (?, ?, ?, ?, ?, ?)"; my $__nuw = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nuv, 0)); foreach my $__nus (@{$__nup}) { $__nuu->execute($__num, $__nus->[1], $__nus->[2]); my $__nux = $__nuu->fetchall_arrayref(); $__nuw->execute($__num, $__nus->[1], $__nux->[0]->[0], $__nux->[0]->[1], $__nux->[0]->[2], $__nux->[0]->[3]); } } else { my $__nuy = "SELECT `parent_list_value`, SUM(`times_included`), SUM(`occurrences`), SUM(`inferred_pair_best`), SUM(`inferred_pair_total`) FROM `" . $__nud . "` WHERE `exercise_name`=? GROUP BY `parent_list_value`"; my $__nuz = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nuy, 0)); $__nuz->execute($__num); my $__nva = $__nuz->fetchall_arrayref(); my $__nvb = "INSERT INTO `" . $__nuc . "` (`exercise_name`, `parent_list_value`, `times_included`, `occurrences`, `inferred_pair_best`, `inferred_pair_total`) VALUES (?, ?, ?, ?, ?, ?)"; my $__nvc = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nvb, 0)); foreach my $__nvd (@{$__nva}) { $__nvc->execute($__num, $__nvd->[0], $__nvd->[1], $__nvd->[2], $__nvd->[3], $__nvd->[4]); } } } my $__nve = "DROP TABLE `" . $__nud . "`"; my $__nvf = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nve, 0)); $__nvf->execute(); $authlib9_14_2::_ake->commit(); }; if ($@) { return ("Database error. Cannot alter maxdiff_bandit table.", $@); } } sub _brf { my ($__nvn) = @_; my $__nvg = 0; my $__nvh = ""; my $__nvi = ""; my $__nvj = ""; my $__nvk = 0; my $__nvl = 0; my $__nvm = {}; eval { $__nvj = "INSERT INTO `" . $authlib9_14_2::_akj . "_map` (`table`, `name`, `base_name`) VALUES (?, ?, ?)"; $__nvk = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nvj, 0)); foreach $__nvh (keys %{$__nvn}) { $__nvi = ""; $__nvg = $__nvn->{$__nvh}->[1]; if (($__nvh =~ m/^(.*?)_/i) && ($__nvh !~ m/^sys_pagetime/i)) { $__nvi = $1; } $__nvk->execute($__nvg, $__nvh, $__nvi); } $__nvk->finish; }; if ($@) { $__nvl = 1; $__nvm->{'_amm'} = "Database error. Cannot update map table."; $__nvm->{'_amn'} = $@; } $authlib9_14_2::_ake->commit(); return ($__nvl, $__nvm); } sub _brg { my ($__nvv, $__nvw, $__nvx) = @_; my $__nvo = ""; my $__nvp = ""; my $__nvq = ""; my $__nvr = ""; my @__nvs = (); my %__nvt = (); my $__nvu = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_layout.cgi"; my ($__nvy, $__nvz) = authlib9_14_2::_yg($__nvu, "read", 0, 0); if (!$__nvz) { $__nvo = <$__nvy>; $__nvr = authlib9_14_2::_zo($__nvo); if ($__nvr ne $__nvv) { close $__nvy; $__nvz = {}; $__nvz->{'_amm'} = "There is a mismatch between the setup questionnaire file and the layout file in the db_setup folder. Try re-uploading both files."; } else { while (!(eof $__nvy)) { $__nvo = <$__nvy>; if ($__nvo =~ m/^\s*(.*?)\s*,\s*(.*?)\s*$/) { $__nvp = $1; $__nvq = $2; $__nvq = authlib9_14_2::_wp($__nvq); if ($__nvw && $__nvp eq "sys_RespNum") { } elsif ($__nvx && ($__nvp eq "sys_ShowPrev" || $__nvp eq "sys_CheckSum")) { } else { _brp($__nvp, $__nvq, \@__nvs, \%__nvt); } } } } } close $__nvy; return (\@__nvs, \%__nvt, $__nvr, $__nvz); } sub _brh { my ($__nwg, $__nwh, $__nwi) = @_; my $__nwa = {}; my $__nwb = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_pwds.cgi"; my $__nwc = 0; my $__nwd = ""; my $__nwe = 0; if (-e $__nwb) { $__nwe = 1; ($__nwc, $__nwa) = authlib9_14_2::_yg($__nwb, "read", 0, 0); if ($__nwa) { return (0, $__nwa, $__nwe, $__nwc); } my $__nwf = <$__nwc>; $__nwd = authlib9_14_2::_zo($__nwf); if ($__nwi && !$__nwg && ($__nwd eq $authlib9_14_2::_akm->{"password_build"})) { close $__nwc; $__nwe = 0; } if ($__nwe && ($__nwd ne $__nwh)) { close $__nwc; $__nwa = {}; $__nwa->{'_amm'} = "There is a mismatch between the setup questionnaire file and the identifiers file in the db_setup folder." . " Try re-uploading both files. If you have not specified predefined identifiers for this study" . " remove the identifiers file " . $__nwb . " from the server."; return (0, $__nwa, $__nwe, $__nwc); } } return (1, $__nwa, $__nwe, $__nwc, $__nwd); } sub _bri { my ($__nwn) = @_; my $__nwj = 1; $authlib9_14_2::_akj = authlib9_14_2::_aem(); my $__nwk = _brj(); my $__nwl = {}; eval { _brk($__nwk); my $__nwm = "CREATE TABLE `" . authlib9_14_2::_aem() . "_passwords` LIKE `" . $authlib9_14_2::_akh . "_passwords`;"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nwm, 1)); $__nwm = "INSERT `" . authlib9_14_2::_aem() . "_passwords` SELECT * FROM `" . $authlib9_14_2::_akh . "_passwords`;"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nwm, 1)); }; if ($@) { $__nwl->{'_amm'} = "Database error. Cannot copy identifier table to test table."; $__nwl->{'_amn'} = $@; $__nwj = 0; } if ($__nwj) { ($__nwj, $__nwl) = _brl($__nwn); } $authlib9_14_2::_akj = $authlib9_14_2::_akh; return ($__nwj, $__nwl); } sub _brj { my $__nwo = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_questionnaire.cgi"; authlib9_14_2::_yl(0, 1, "", $__nwo); authlib9_14_2::_yo(); my %__nwp = (); if ($authlib9_14_2::_aky && exists $authlib9_14_2::_aky->{'_ju'}) { my $__nwq = $authlib9_14_2::_aky->{'_ju'}; my $__nwr = $__nwq->{'_jt'}; %__nwp = map { $_->{'_if'} => 1 } @{$__nwr}; } return \%__nwp; } sub _brk { my ($__nwu) = @_; my $__nws = {}; eval { if (keys %{$__nwu} > 3) { authlib9_14_2::_wo($authlib9_14_2::_akj . "_passwords", $authlib9_14_2::_akj . "_passwords_index"); } my $__nwt = authlib9_14_2::_wl($authlib9_14_2::_akj . "_passwords"); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nwt, 0)); }; if ($@) { $__nws->{'_amm'} = "Database error. Cannot delete identifiers table."; $__nws->{'_amn'} = $@; } return($__nws); } sub _brl { my ($__nwz) = @_; my $__nwv = 1; my $__nww = {}; eval { my $__nwx = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `password_build`=?"; my $__nwy = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nwx, 0)); $__nwy->execute(authlib9_14_2::_wh($__nwz)); $__nwy->finish; }; if ($@) { $__nww = {}; $__nww->{'_amm'} = "Database error. Cannot update password_build in info table."; $__nww->{'_amn'} = $@; $__nwv = 0; } return ($__nwv, $__nww); } sub _brm { my ($__nxw, $__nxx, $__nxy) = @_; my $__nxa = <$__nxw>; my $__nxb = _brj(); my $__nxc = 0; my $__nxd = authlib9_14_2::_zo($__nxa); my @__nxe = split(",", $__nxd); my $__nxf = ""; my $__nxg = ""; my $__nxh = ""; my @__nxi = (); my $__nxj = @__nxe; my $__nxk = 1; if ($__nxy) { $__nxk = 0; } my $__nxl = ""; my @__nxm = (); foreach $__nxh (@__nxe) { if ($__nxh =~ m/^"(.*?)"$/) { $__nxh = $1; } $__nxg .= $__nxl; $__nxl = ","; push @__nxi, "`" . $__nxh . "`"; $__nxg .= "`" . $__nxh . "`"; if ($__nxh eq "max_respondents") { $__nxg .= " INT"; } elsif (exists $__nxb->{$__nxh} && @__nxm < 3) { $__nxg .= " VARCHAR(255)"; push(@__nxm, $__nxh); } else { $__nxg .= " TEXT"; } } if (keys %{$__nxb} <= 3) { $__nxg .= ", PRIMARY KEY(`". join("`,`", @__nxm) . "`)"; } if ($__nxk) { my $__nxc = _brk($__nxb); if (keys %{$__nxc} > 0) { return (0, $__nxc, 0); } eval { $__nxf = "CREATE TABLE `" . $authlib9_14_2::_akj . "_passwords` (" . $__nxg . ") " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nxf, 1)); if (keys %{$__nxb} > 3) { $__nxf = "CREATE INDEX `". $authlib9_14_2::_akj ."_passwords_index` ON `". $authlib9_14_2::_akj ."_passwords` (`". join("`,`", @__nxm) . "`)"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nxf, 1)); } }; if ($@) { $__nxc = {}; $__nxc->{'_amm'} = "Database error. Cannot create identifiers table."; $__nxc->{'_amn'} = $@; $__nxc->{'_amn'} .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nxc->{'_amn'} .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, $__nxc, 0); } } my @__nxn = ("?") x $__nxj; $__nxf = "INSERT INTO `" . $authlib9_14_2::_akj . "_passwords` (" . join(",", @__nxi) . ") VALUES (" . join(",", @__nxn) . ")"; my $__nxo = 0; if ($__nxy) { seek $__nxw, $__nxy, 0; $__nxo = $__nxy; } else { $__nxo = tell $__nxw; } my $__nxp = 0; my $__nxq = 0; eval { my $__nxr = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nxf, 0)); my @__nxs = (); my @__nxt = (); my $__nxu = ""; while (!eof($__nxw) && $__nxq < 500000) { @__nxt = (); $__nxa = <$__nxw>; $__nxa = authlib9_14_2::_zo($__nxa); if ($__nxa) { @__nxs = split(/,(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))/o, $__nxa); foreach $__nxu (@__nxs) { if ($__nxu =~ m/^"(.*?)"$/) { $__nxu = $1; } $__nxu =~ s/""/"/g; push @__nxt, authlib9_14_2::_wh($__nxu); } $__nxr->execute(@__nxt); } $__nxp = tell $__nxw; $__nxq = $__nxp - $__nxo; } if (eof($__nxw)) { $__nxp = 0; } $__nxr->finish; }; if ($@) { $__nxc = {}; $__nxc->{'_amm'} = "Database error. Cannot insert identifier data."; $__nxc->{'_amn'} = $@; return (0, $__nxc, 0); } if ($__nxp == 0) { my $__nxv = 0; ($__nxv, $__nxc) = _brl($__nxx); if (!$__nxv) { return (0, $__nxc, 0); } } return (1, $__nxc, $__nxp); } sub _brn { my $__nxz = ""; my $__nya = ""; my $__nyb = 0; my $__nyc = ""; if (exists $authlib9_14_2::_akn{"report_name"}) { $__nxz = $authlib9_14_2::_akn{"report_name"}; } $__nxz = authlib9_14_2::_zo($__nxz); if ($__nxz) { my $__nyd = ""; my $__nye = 0; my $__nyf = $authlib9_14_2::_akj . "_saved_reports"; my $__nyg = 1; eval { if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__nyd = "SELECT OBJECT_ID('" . $__nyf . "')"; my $__nyh = $authlib9_14_2::_ake->selectrow_arrayref(authlib9_14_2::_wn($__nyd, 0)); if (!$__nyh->[0]) { $__nyg = 0; } } if ($__nyg) { $__nyd = "SELECT `name` FROM `" . $__nyf . "` WHERE `name` = " . $authlib9_14_2::_ake->quote($__nxz); my $__nyi = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wh(authlib9_14_2::_wn($__nyd, 0))); my $__nyj = 0; foreach $__nyj (@{$__nyi}) { if (uc(authlib9_14_2::_wi($__nyj->[0])) eq uc($__nxz)) { $__nya = "This Report Name already exists."; last; } } } }; if ($@ || $__nyg == 0) { eval { $__nyd = "CREATE TABLE `" . $authlib9_14_2::_akj . "_saved_reports` (`id` INT PRIMARY KEY " . $authlib9_14_2::_ahn->{'_amj'} . ", `name` TEXT, `settings` TEXT) " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nyd, 1)); }; if ($@) { $__nya = "Database error. Cannot create saved reports table."; $__nya .= " You may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nya .= " Make sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled."; } authlib9_14_2::_acg(&authlib9_14_2::_AOS, 0, $__nya, $@); } } if (!$__nya) { if (!$__nya) { if (exists $authlib9_14_2::_akn{"hid_report_settings"}) { $__nyc = $authlib9_14_2::_akn{"hid_report_settings"}; $__nyc =~ s/"chart_display_.*,\n?//g; } if (exists $authlib9_14_2::_akn{"hid_report_chart_settings"}) { my $__nyk = $authlib9_14_2::_akn{"hid_report_chart_settings"}; if ($__nyk) { if ($__nyc =~ m/(.*?)\}$/s) { $__nyc = $1 . $__nyk . "}"; } } } eval { $__nyd = "INSERT INTO `" . $authlib9_14_2::_akj . "_saved_reports` (`name`, `settings`) VALUES (?,?)"; $__nye = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nyd, 0)); $__nye->execute(authlib9_14_2::_wh($__nxz), authlib9_14_2::_wh($__nyc)); }; if ($@) { authlib9_14_2::_acg(&authlib9_14_2::_AOS, 0, "Database error. Cannot insert into saved reports table.", $@); } $__nyb = authlib9_14_2::_wr($authlib9_14_2::_akj . "_saved_reports", "id"); } } } else { $__nya = "Please specify a Report Name."; } my $__nyl = "{"; if ($__nya) { $__nyl .= "\"error\": \"" . $__nya . "\""; } else { $__nyc =~ s/"/\\"/g; $__nyc =~ s/\n//g; $__nyl .= "\"id\": " . $__nyb . ",\"settings\":\"" . $__nyc . "\""; } $__nyl .= "}"; $authlib9_14_2::_ake->commit(); return $__nyl; } sub _bro { if (exists $authlib9_14_2::_akn{"hid_report_id"}) { my $__nym = $authlib9_14_2::_akn{"hid_report_id"}; my $__nyn = ""; if (exists $authlib9_14_2::_akn{"report_name"}) { $__nyn = $authlib9_14_2::_akn{"report_name"}; } my $__nyo = ""; my @__nyp = (); my @__nyq = (); if (exists $authlib9_14_2::_akn{"report_rows"}) { my $__nyr = $authlib9_14_2::_akn{"report_rows"}; @__nyp = split(",", $__nyr); } if (exists $authlib9_14_2::_akn{"report_columns"}) { my $__nys = $authlib9_14_2::_akn{"report_columns"}; @__nyq = split(",", $__nys); } my ($__nyw, $__nyx, $__nyy) = _bmr({}); my $__nyt = _bpu(\@__nyp, \@__nyq, $__nyy, 1); eval { my $__nyu = "UPDATE `" . $authlib9_14_2::_akj . "_saved_reports` SET `name` = ?, `settings` = ? WHERE `id` = ?"; my $__nyv = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__nyu, 0)); $__nyv->execute(authlib9_14_2::_wh($__nyn), authlib9_14_2::_wh($__nyt), authlib9_14_2::_wh($__nym)); $__nyv->finish; $authlib9_14_2::_ake->commit(); }; if ($@) { authlib9_14_2::_zq(247, "Database error.", "Cannot update saved reports table.", $@); } $authlib9_14_2::_akn{"saved_reports"} = $__nym; } } sub _brp { my ($__nyz, $__nza, $__nzb, $__nzc) = @_; push @{$__nzb}, [$__nyz, $__nza]; $__nzc->{$__nyz} = [$__nza, 0]; } sub _brq { my ($__nzq, $__nzr, $__nzs, $__nzt) = @_; my $__nzd = 0; my $__nze = ""; my $__nzf = ""; my $__nzg = @{$__nzq}; my $__nzh = $__nzg / $__nzs; if ($__nzh > int($__nzh)) { $__nzh = int($__nzh) + 1; } my $__nzi = 0; my $__nzj = 0; my $__nzk = 0; my $__nzl = 0; my $__nzd = 0; my $__nzm = ""; my $__nzn = ""; my $__nzo = 0; for ($__nzi = 1; $__nzi <= $__nzh; $__nzi++) { $__nzf = ""; $__nzo = $__nzt + $__nzi; for ($__nzj = 0; $__nzj < $__nzs; $__nzj++) { $__nzl = $__nzj + $__nzk; if ($__nzl < $__nzg) { $__nzd = $__nzq->[$__nzj + $__nzk]; $__nzm = $__nzd->[0]; $__nzn = $__nzd->[1]; $__nzf .= "`" . $__nzm . "` " . $__nzn; if ($__nzd->[1] eq "text" && $authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nzf .= " CHARACTER SET utf8"; } $__nzf .= ","; $__nzr->{$__nzm}->[1] = $__nzo; } else { last; } } $__nzk += $__nzs; if ($__nzf) { chop($__nzf); eval { $__nze = "CREATE TABLE `" . $authlib9_14_2::_akj . "_data" . $__nzo . "` (`sys_RespNum` INT PRIMARY KEY"; if ($__nzo == 1) { $__nze .= " " . $authlib9_14_2::_ahn->{'_amj'}; } $__nze .= "," . $__nzf . ") " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__nze, 1)); }; if ($@) { my $__nzp = $@; $__nzp .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__nzp .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create data table.", $__nzp); } } } return ($__nzh, "", ""); } sub _brr { my ($__obc, $__obd, $__obe) = @_; my $__nzu = 0; my $__nzv = $authlib9_14_2::_akm->{"num_data_tables"}; my $__nzw = 0; my $__nzx = 0; my $__nzy = $authlib9_14_2::_akm->{"remove_num"}; my $__nzz = 0; my %__oaa = (); my $__oab = 0; my $__oac = ""; my $__oad = ""; my $__oae = ""; my $__oaf = 0; my $__oag = 0; my $__oah = ""; my $__oai = ""; my $__oaj = 0; my $__oak = ""; if ($__nzy == 0) { $__nzy = 1; } for ($__nzw = 1; $__nzw <= $__nzv; $__nzw++) { $__oak = $authlib9_14_2::_akj . "_data" . $__nzw; eval { ($__oae, $__oaf, $__oag, $__oah, $__oai) = authlib9_14_2::_wm($__oak); $__nzu = $authlib9_14_2::_ake->selectall_hashref(authlib9_14_2::_wn($__oae, 0), $__oah); }; if ($@) { return (0, "Database error. Cannot get table description.", $@); } my $__oal = ""; my $__oam = ""; my $__oan = ""; my %__oao = (); foreach $__oam (keys %{$__nzu}) { if (exists $__obd->{$__oam}) { $__oad = $__obd->{$__oam}->[0]; $__oad =~ s/\(.*?\)//g; $__oal = $__nzu->{$__oam}->{$__oai}; $__oal =~ s/\(.*?\)//g; if (uc($__oad) ne uc($__oal)) { $__oao{$__oam} = 1; } else { $__oaa{$__oam} = 1; $__obd->{$__oam}->[1] = $__nzw; } } else { $__oao{$__oam} = 1; } } my $__oap = ""; my $__oaq = ""; my %__oar = (); my $__oas = ""; $__oaj = 0; foreach $__oap (keys %__oao) { if ($__oap ne "sys_RespNum" && $__oap !~ m/^_OLD/i) { $__oaj = 1; $__oas = "_OLD" . $__nzy . "_" . $__oap; $__oar{$__oap} = [$__oas, $__nzu->{$__oap}->{$__oai}]; $__nzy++; } } if ($__oaj) { my ($__obf, $__obg, $__obh) = _brs(\%__oar, $__oak); if (!$__obf) { return ($__obf, $__obg, $__obh); } eval { $__oae = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `remove_num`=?"; $__nzz = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__oae, 0)); $__nzz->execute($__nzy); $__nzz->finish; }; if ($@) { return (0, "Database error. Cannot update info table.", $@); } } } my $__oat = 0; my $__oau = $authlib9_14_2::_akm->{"num_data_tables"}; $__nzu = 0; eval { ($__oae, $__oaf, $__oag, $__oah, $__oai) = authlib9_14_2::_wm($authlib9_14_2::_akj . "_data" . $__oau); $__nzu = $authlib9_14_2::_ake->selectall_hashref(authlib9_14_2::_wn($__oae, 0), $__oah); }; if ($@) { return (0, "Database error. Cannot get table description.", $@); } my $__oav = keys %{$__nzu}; $__oat = $__obe - $__oav; my @__oaw = (); my $__oax = ""; my @__oay = (); $__oaj = 0; foreach $__oab (@{$__obc}) { $__oac = $__oab->[0]; $__oad = $__oab->[1]; if (!exists $__oaa{$__oac}) { if ($__oat > 0) { if ($authlib9_14_2::_ahn->{'_pj'} eq "odbc" && $__oaj) { } else { $__oax .= "ADD "; } $__oax .= "`" . $__oac . "` " . $__oad; if ($__oad eq "text" && $authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__oax .= " CHARACTER SET utf8"; } $__oax .= ","; push @__oay, "`" . $__oac . "` " . $__oad; $__obd->{$__oac}->[1] = $__oau; $__oat--; $__oaj = 1; } else { push @__oaw, $__oab; } } } if ($__oaj) { if ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { if (@__oay) { my ($__obf, $__obg, $__obh) = _brt($authlib9_14_2::_akj . "_data" . $__oau, {}, \@__oay); if (!$__obf) { return ($__obf, $__obg, $__obh); } } } else { chop($__oax); eval { $__oae = "ALTER TABLE `" . $authlib9_14_2::_akj . "_data" . $__oau . "` " . $__oax; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__oae, 0)); }; if ($@) { return(0, "Database error. Cannot alter table adding new columns.", $@); } } } if (@__oaw) { my $__oaz = 0; my ($__obi, $__obg, $__obh) = _brq(\@__oaw, $__obd, $__obe, $__nzv); if ($__obi == 0 && $__obg) { return(0, $__obg, $__obh); } eval { $__oae = "SELECT `sys_RespNum` FROM `" . $authlib9_14_2::_akj . "_data1`"; $__oaz = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__oae, 0)); }; if ($@) { return(0, "Database error. Cannot read all rows in data1 table.", $@); } my $__oba = $__nzv; $__nzv += $__obi; my $__obb = @{$__oaz}; if ($__obb) { for ($__nzw = $__oba + 1; $__nzw <= $__nzv; $__nzw++) { $__oae = "INSERT INTO `" . $authlib9_14_2::_akj . "_data" . $__nzw . "` (`sys_RespNum`) VALUES (?)"; eval { $__nzz = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__oae, 0)); for ($__nzx = 0; $__nzx < $__obb; $__nzx++) { $__nzz->execute($__oaz->[$__nzx][0]); } $__nzz->finish; }; if ($@) { return(0, "Database error. Cannot insert data row into data table #" . $__nzw . ".", $@); } } } } $authlib9_14_2::_ake->commit(); return ($__nzv, "", ""); } sub _brs { my ($__obq, $__obr) = @_; my $__obj = 1; my $__obk = ""; my $__obl = ""; my $__obm = ""; my $__obn = ""; my $__obo = 0; if ($authlib9_14_2::_ahn->{'_pj'} eq "sqlite") { ($__obj, $__obk, $__obl) = _brt($__obr, $__obq, 0); } elsif ($authlib9_14_2::_ahn->{'_pj'} eq "odbc") { foreach $__obn (sort keys(%{$__obq})) { eval { $__obm = "sp_rename '" . $__obr . ".[" . $__obn . "]', '" . $__obq->{$__obn}->[0] . "'"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__obm, 0)); }; if ($@) { $__obj = 0; $__obk = "Database error. Cannot alter table removing old columns."; $__obl = $@; last; } } } else { my @__obp = (); foreach $__obn (sort keys(%{$__obq})) { push @__obp, "CHANGE `" . $__obn . "` `" . $__obq->{$__obn}->[0] . "` " . $__obq->{$__obn}->[1]; } eval { $__obm = "ALTER TABLE `" . $__obr . "` " . join(",", @__obp); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__obm, 0)); }; if ($@) { $__obj = 0; $__obk = "Database error. Cannot alter table removing old columns."; $__obl = $@; } } return ($__obj, $__obk, $__obl); } sub _brt { my ($__ocg, $__och, $__oci) = @_; my $__obs = time(); my $__obt = "temp" . $__obs . "_" . $__ocg; my $__obu = 0; my $__obv = ""; my $__obw = 0; eval { $__obv = "PRAGMA table_info(`" . $__ocg . "`)"; $__obu = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__obv, 0)); }; if ($@) { authlib9_14_2::_zq(212, "Database error.", "Database error. Cannot get table description.", $@); } eval { $__obv = "ALTER TABLE `" . $__ocg . "` RENAME TO `" . $__obt . "`"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__obv, 0)); }; if ($@) { return(0, "Database error. Cannot alter SQLite table.", $@); } my @__obx = (); my $__oby = 0; my $__obz = ""; my $__oca = ""; my @__ocb = (); my @__occ = (); my @__ocd = (); my $__oce = 0; foreach $__oby (@{$__obu}) { $__obz = $__oby->[1]; $__oca = $__oby->[2]; $__oce = $__oby->[5]; push @__ocd, "`" . $__obz . "`"; if (exists $__och->{$__obz}) { $__obz = $__och->{$__obz}->[0]; } push @__ocb, "`" . $__obz . "`"; if ($__oce) { $__oca .= " PRIMARY KEY " . $authlib9_14_2::_ahn->{'_amj'}; } push @__occ, "`" . $__obz . "` " . $__oca; } eval { if ($__oci) { my $__ocf = ""; foreach $__ocf (@{$__oci}) { push @__occ, $__ocf; } } $__obv = "CREATE TABLE `" . $__ocg . "` (" . join(",", @__occ) . ")"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__obv, 1)); }; if ($@) { return (0, "Database error. Cannot create new table for SQLite in alter table function.", $@); } eval { $__obv = "INSERT INTO `" . $__ocg . "` (" . join(",", @__ocb) . ")"; $__obv .= "SELECT " . join(",", @__ocd) . " FROM `" . $__obt . "`"; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__obv, 0)); }; if ($@) { return (0, "Database error. Cannot insert data for SQLite in alter table function.", $@); } eval { $__obv = authlib9_14_2::_wl($__obt); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__obv, 0)); }; if ($@) { return (0, "Database error. Cannot delete temporary table for SQLite in alter table function.", $@); } $authlib9_14_2::_ake->commit(); return (1, "", ""); } sub _bru { my ($__ocz, $__oda) = @_; my $__ocj = ""; my $__ock = 0; my $__ocl = 0; my $__ocm = 0; my $__ocn = ""; my $__oco = ""; my $__ocp = ""; my $__ocq = 0; my $__ocr = 0; my $__ocs = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_questionnaire.cgi"; my $__oct = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_layout.cgi"; my $__ocu = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_pwds.cgi"; if (-e $__ocs || -e $__oct || -e $__ocu) { ($__ocn, $__oco, $__ocp, $__ocq, $__ocr) = _bqz(1); if ($__ocr) { $__ocj .= _bsf($__ocr->{'_amm'}, $__ocr->{'_amn'}); } else { if ($__ocz ne $__ocn) { $__ock = 1; } my $__ocv = $authlib9_14_2::_akm->{"layout_build"}; if ($__ocv ne $__oco) { $__ocl = 1; } if (-e $__ocu) { my ($__odb, $__ocr) = authlib9_14_2::_yg($__ocu, "read", 0, 1); my $__ocw = <$__odb>; $__ocw = authlib9_14_2::_zo($__ocw); close $__odb; my $__ocx = $authlib9_14_2::_akm->{"password_build"}; if ($__ocx ne $__ocw) { $__ocm = 1; } } if ($__ock || $__ocl || $__ocm) { $ssiwebadmin9_14_2::_bua = 1; my $__ocy = $__ock . "," . $__ocl . "," . $__ocm; if ($__oda) { $authlib9_14_2::_akn{"hid_apply_changes"} = $__ocy; } else { $__ocj .= "<input type=\"hidden\" name=\"hid_apply_changes\" value=\"" . $__ocy . "\">\n"; $__ocj .= "<div class=\"stage\">\n"; $__ocj .= "<div class=\"stage_title\">Update Survey?</div>"; $__ocj .= "<div class=\"stage_content\">"; $__ocj .= "Changes to your survey have been uploaded and are ready to be applied."; $__ocj .= " To update your survey with these changes click the button below."; $__ocj .= "<div class=\"button_container\">\n"; $__ocj .= "<a href=\"#\" id=\"apply_changes\" class=\"green_button\">Apply Changes</a>\n"; $__ocj .= "</div>"; $__ocj .= authlib9_14_2::_xh(_bnu("apply_changes")); $__ocj .= "</div></div>"; } } } } return ($__ocj, $__ocr); } sub _brv { my ($__odg, $__odh, $__odx) = @_; my $__odc = ""; my $__odd = 0; my $__ode = ""; my $__odf = ""; my $__odg = ""; my $__odh = ""; my $__odi = 0; my $__odj = 0; my $__odk = 0; my $__odl = 0; my $__odm = ""; my $__odn = 0; my $__odo = 0; my $__odp = 0; if (exists $authlib9_14_2::_akn{"hid_apply_changes"}) { ($__odi, $__odj, $__odk) = split(",", $authlib9_14_2::_akn{"hid_apply_changes"}); if ($__odj || $__odk) { $__odi = 1; } } if ($__odi || $__odj || $__odk) { ($__odd, $__ode, $__odf) = _brx(1); my $__odq = ""; my $__odr = ""; my $__ods = ""; my $__odt = 0; my $__odu = 0; my $__odv = 0; my $__odw = 0; if (!exists $authlib9_14_2::_akn{"hid_admin_test_mode"} && _brw()) { $__odw = 1; } if (!$__odd) { if ($authlib9_14_2::_akm->{"data_version"} != $ssiwebadmin9_14_2::_btn) { _qk("update9_14_2.pl"); ($__odd, $__ode, $__odf, $__odj) = update9_14_2::_bug($authlib9_14_2::_akm->{"data_version"}, $ssiwebadmin9_14_2::_btn); } } if (!$__odd) { ($__odq, $__odr, $__ods, $__odt, $__odu) = _bqz(0); if ($__odu) { $__odd = 1; $__ode = $__odu->{'_amm'}; $__odf = $__odu->{'_amn'}; } } if (!$__odd && ($__odj || $__odk)) { ($__odl, $__ode, $__odf, $__odo, $__odv) = _bra(0, $__odr, $__ods, $__odt, 0); if (!$__odl) { $__odd = 1; } elsif ($__odw) { $authlib9_14_2::_akj = authlib9_14_2::_aem(); ($__odl, $__ode, $__odf, $__odp, $__odv) = _bra(0, $__odr, $__ods, $__odt, 0); $authlib9_14_2::_akj = $authlib9_14_2::_akh; } } if (!$__odd && $__odi) { ($__odl, $__ode, $__odf) = _bry($__odt, 0); if ($__odl) { _brd(); if ($__odw) { $authlib9_14_2::_akj = authlib9_14_2::_aem(); ($__odl, $__ode, $__odf) = _bry($__odt, $__odw); $authlib9_14_2::_akj = $authlib9_14_2::_akh; } } else { $__odd = 1; } } if (!$__odd) { if ($authlib9_14_2::_akm->{"data_version"} != $ssiwebadmin9_14_2::_btn) { ($__odd, $__ode, $__odf) = update9_14_2::_buh($authlib9_14_2::_akm->{"data_version"}, $ssiwebadmin9_14_2::_btn); if (!$__odd) { ($__odd, $__ode, $__odf) = update9_14_2::_bui($ssiwebadmin9_14_2::_btn); } if (!$__odd && $__odw) { update9_14_2::_buk(); } } } my ($__ody, $__odz, $__oea) = _brx(0); if ($__ody) { $__odd = $__ody; $__ode = $__odz; $__odf = $__oea; } if ($__odd) { $__odc .= "<div class=\"error_msg\">An error occurred while applying changes. Changes were NOT applied.</div>"; if ($__ode) { $__odc .= "<div class=\"setup_simple_error\">" . $__ode . "</div>"; } if ($__odf) { $__odc .= "<div class=\"setup_system_error\">" . $__odf . "</div>"; } $__odc .= "<div style=\"margin-top: 30px;\">Please fix the error and try again.</div>"; $__odc .= "<input type=\"hidden\" name=\"hid_apply_changes\" value=\"" . $authlib9_14_2::_akn{"hid_apply_changes"} . "\">\n"; $__odc .= "<div class=\"button_container\">\n"; $__odc .= "<a id=\"apply_changes\" class=\"green_button\">Apply Changes</a></div>"; } else { if ($__odo && !$__odx) { $__odc .= _bqw($__odo, $__odv, $__odp); } $__odc .= "<div style=\"margin-top: 15px;\"><b>Survey updated!</b></div>"; } } $authlib9_14_2::_ake->commit(); return ($__odc, $__odo, $__odd, $__ode, $__odf); } sub _brw { my $__oeb = 0; $authlib9_14_2::_akj = authlib9_14_2::_aem(); my ($__oec, $__oed, $__oee, $__oef) = authlib9_14_2::_xq(0); if ($__oec) { $__oeb = 1; } $authlib9_14_2::_akj = $authlib9_14_2::_akh; ($__oec, $__oed, $__oee, $__oef) = authlib9_14_2::_xq(0); if (!$__oec) { authlib9_14_2::_zq(345, "Database update error.", $__oee, ""); } return $__oeb; } sub _brx { my ($__oel) = @_; my $__oeg = 0; my $__oeh = ""; my $__oei = ""; eval { my $__oej = "UPDATE `" . $authlib9_14_2::_akj . "_info` SET `survey_paused` = ?"; my $__oek = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__oej, 0)); $__oek->execute($__oel); $__oek->finish; }; if ($@) { $__oeg = 1; $__oeh = "Error while updating system pause."; $__oei = $@; } return ($__oeg, $__oeh, $__oei); } sub _bry { my ($__oez, $__ofa) = @_; my $__oem = ""; my $__oen = ""; my $__oeo = 0; eval { my $__oep = 1; if ((exists $authlib9_14_2::_akn{"hid_admin_test_mode"} || $__ofa) && !$ssiwebadmin9_14_2::_btt) { $__oep = 0; } if ($__oep) { my $__oeq = $authlib9_14_2::_ahv{'_aml'} . "db_setup/" . $authlib9_14_2::_akh . "_questionnaire.cgi"; my $__oer = $authlib9_14_2::_ahv{'_aml'} . $authlib9_14_2::_akh . "_qst.cgi"; File::Copy::copy($__oeq, $__oer); } authlib9_14_2::_yl(0, 1, ""); }; if ($@) { $__oem = "Failed to update QST file."; $__oen = $!; } else { $__oeo = 1; if (keys %{$__oez}) { my $__oes = ""; my $__oet = ""; eval { $__oes = authlib9_14_2::_wl($authlib9_14_2::_akj . "_quotas"); $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__oes, 0)); }; if ($@) { return (0, "Database error. Cannot delete quotas table.", $@); } eval { $__oes = "CREATE TABLE `" . $authlib9_14_2::_akj . "_quotas` (`quota_name` VARCHAR(24), `cell_value` INT, `cell_limit` INT, PRIMARY KEY(`quota_name`, `cell_value`)) " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__oes, 1)); }; if ($@) { my $__oeu = $@; $__oeu .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__oeu .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } return (0, "Database error. Cannot create quotas table.", $__oeu); } my $__oes = "INSERT INTO `" . $authlib9_14_2::_akj . "_quotas` (`quota_name`, `cell_value`, `cell_limit`) VALUES (?, ?, ?)"; eval { my $__oev = ""; my $__oew = ""; my $__oex = 0; my $__oey = 0; $__oet = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__oes, 0)); foreach $__oev (sort keys %{$__oez}) { ($__oew, $__oex) = split("_", $__oev); $__oey = $__oez->{$__oev}; $__oet->execute(authlib9_14_2::_wh($__oew), $__oex, $__oey); } $__oet->finish; }; if ($@) { return (0, "Database error. Cannot insert quota data.", $@); } } } $authlib9_14_2::_ake->commit(); return ($__oeo, $__oem, $__oen); } sub _brz { my $__ofb = ""; $__ofb .= _bsb(); $__ofb .= "<meta http-equiv=\"pragma\" content=\"no-cache\">\n"; $__ofb .= "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"; $__ofb .= "\n</head>\n"; $__ofb .= "<body"; if ($ssiwebadmin9_14_2::_btt) { $__ofb .= " class=\"c2_mode\""; } $__ofb .= ">\n"; $__ofb .= "<div id=\"sign_in_wrapper\">\n"; $__ofb .= "<form name=\"mainform\" method=\"post\""; $__ofb .= " action=\"admin" . $authlib9_14_2::_aib . "\">\n"; $__ofb .= "<input type=\"hidden\" name=\"hid_studyname\" value=\"" . $authlib9_14_2::_akh . "\">\n"; $__ofb .= "<input type=\"hidden\" name=\"hid_page\" id=\"hid_page\" value=\"study_summary\">\n"; $__ofb .= _bsa(); return $__ofb; } sub _bsa { my $__ofc = ""; if ($authlib9_14_2::_aku) { $__ofc .= authlib9_14_2::_yj(); } $__ofc .= "<div id=\"page_header\"><div id=\"title_text\">"; $__ofc .= "<div id=\"logo\"></div>"; $__ofc .= "<div id=\"product_name\">Lighthouse Admin</div>"; $__ofc .= "</div></div>\n"; $__ofc .= "<div id=\"header_bar\">\n"; $__ofc .= "<div id=\"mobile_menu_link\"></div>"; $__ofc .= "<div class=\"row\">"; $__ofc .= "<div id=\"survey_name\" class=\"col\">" . $ssiwebadmin9_14_2::_bts . "</div>"; $__ofc .= "</div></div>\n"; return $__ofc; } sub _bsb { my $__ofd = ""; $__ofd .= authlib9_14_2::_yi(1); $__ofd .= authlib9_14_2::_ady(); $__ofd .= authlib9_14_2::_adz(); $__ofd .= authlib9_14_2::_aea(); $__ofd .= authlib9_14_2::_aec(); $__ofd .= authlib9_14_2::_adx(); $__ofd .= "<script type=\"text/javascript\" src=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/ssi_admin_javascript9_14_2.js\"></script>\n"; $__ofd .= "<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $authlib9_14_2::_ahv{'_ur'} . "system/ssi_admin_style9_14_2.css\">"; $__ofd .= "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"; if ($ssiwebadmin9_14_2::_btq) { my $__ofe = $authlib9_14_2::_ahv{'_ur'} . "custom_admin_style.css"; $__ofd .= "<link rel=\"stylesheet\" type=\"text/css\" href=\"" . $__ofe . "\">"; } $__ofd .= "\n<title>\n"; $__ofd .= $ssiwebadmin9_14_2::_bts; $__ofd .= "\n</title>\n"; return $__ofd; } sub _bsc { my $__off = ""; $__off .= "<div id=\"login_box\">\n"; $__off .= "<div>User Name</div>\n"; $__off .= "<div><input type=\"text\" class=\"text_input\" name=\"username\" id=\"sign_in_username\"></div>\n"; $__off .= "<div>Password</div>\n"; $__off .= "<div><input type=\"password\" class=\"text_input\" name=\"password\" id=\"sign_in_password\"></div>\n"; $__off .= "<div><a href=\"#\" id=\"sign_in_button\" class=\"green_button\">Sign in</a></div>\n"; $__off .= "</div>"; $__off .= "<div id=\"forgot_password_row\"><a href=\"#\" id=\"forgot_password_button\">Forgot your password?</a></div>"; return $__off; } sub _bsd { my $__ofg = ""; my $__ofh = 1900 + (localtime)[5]; $__ofg .= "<div id=\"page_footer_div\">\n"; $__ofg .= "<span id=\"page_footer_text\">"; $__ofg .= "<span id=\"copyright\">Copyright " . $__ofh . " Sawtooth Software, Inc.</span>"; $__ofg .= "<a id=\"footer_ss_url\" href=\"http://www.sawtoothsoftware.com\" target=\"sawtooth\">www.sawtoothsoftware.com</a>\n"; $__ofg .= "</span>\n</div>\n"; $__ofg .= "</div>\n"; $__ofg .= "<!-- ssiweb-20365011074 -->\n"; $__ofg .= "</body>\n</html>\n"; return $__ofg; } sub _bse { my ($__ofo) = @_; my $__ofi = ""; my $__ofj = ""; my $__ofk = ""; my $__ofl = ""; my $__ofm = ""; my $__ofn = ""; if ($__ofo =~ m/^(\s+)/) { $__ofm = $1; } if ($__ofo =~ m/(\s+)$/) { $__ofn = $1; } while($__ofo =~ m/\[%(.*?)%\]/isg) { $__ofl = $1; $__ofl =~ s/<([a-zA-Z\/])/<\0\0\0$1/isg; $__ofo =~ s/\[%(.*?)%\]/\[\0\0\0%$__ofl%\]/is; } $__ofo =~ s/\[\0\0\0%(.*?)%\]/\[%$1%\]/isg; while($__ofo =~ m/<img(.*?)>/isg) { $__ofi = $1; $__ofk = ""; if ($__ofi =~ m/src\s*=\s*"(.*?)"/isg) { $__ofj = $1; $__ofj = reverse($__ofj); if ($__ofj =~ m/(.*?)[\]\\\/]/isg) { $__ofk = $1; $__ofk = reverse($__ofk); } } $__ofo =~ s/<img(.*?)>/{Graphic: $__ofk}/is; } $__ofo =~ s/<script(.*?)<\/script>/ /isg; $__ofo =~ s/<style(.*?)<\/style>/ /isg; $__ofo =~ s/<[a-zA-Z\/][^>]*>/ /isg; $__ofo =~ s/&lt;/</isg; $__ofo =~ s/&gt;/>/isg; $__ofo =~ s/&[#\w]+;/ /isg; $__ofo =~ s/<!--(.*?)-->/ /isg; $__ofo =~ s/<\0\0\0([a-zA-Z\/])/<$1/isg; $__ofo =~ s/ +/ /isg; $__ofo =~ s/^\s+//isg; $__ofo =~ s/\s+$//isg; $__ofo =~ s/\n\s+/\n/isg; $__ofo = $__ofm . $__ofo . $__ofn; return $__ofo; } sub _bsf { my ($__ofq, $__ofr) = @_; my $__ofp = ""; $__ofp .= "<div class=\"stage error_msg_box\">"; $__ofp .= "<div class=\"stage_title\">" . $__ofq . "</div>"; $__ofp .= "<div class=\"stage_content\">" . $__ofr . "</div>"; $__ofp .= "</div>"; } sub _bsg { my ($__ofw, $__ofx, $__ofy) = @_; if ($__ofy == 0) { $__ofy = time(); } my ($__ofz, $__oga, $__ogb, $__ogc, $__ogd, $__oge, $__ogf, $__ogg, $__ogh) = localtime($__ofy); my @__ofs = ("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"); if ($__oga < 10) { $__oga = "0" . $__oga; } if ($__ofz < 10) { $__ofz = "0" . $__ofz; } my $__oft = $__ofs[$__ogd] . " " . $__ogc . ", " . (1900 + $__oge) . " - " . $__ogb . ":" . $__oga . ":" . $__ofz; eval { my $__ofu = "INSERT INTO `" . $authlib9_14_2::_akj . "_admin_log` (`date`, `action`, `info`, `ipaddress`, `user_agent`, `time_stamp`) VALUES (?,?,?,?,?,?)"; my $__ofv = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ofu, 0)); $__ofv->execute(authlib9_14_2::_wh($__oft), authlib9_14_2::_wh($__ofw), authlib9_14_2::_wh($__ofx), authlib9_14_2::_wh(authlib9_14_2::_aac()), authlib9_14_2::_wh(authlib9_14_2::_aab()), $__ofy); $__ofv->finish; }; if ($@) { authlib9_14_2::_zq(275, "Database error.", "Cannot insert into admin_log.", $@); } $authlib9_14_2::_ake->commit(); } sub _bsh { my ($__ogm) = @_; my @__ogi = split("&", $__ogm); my $__ogj = ""; my $__ogk = ""; foreach my $__ogl (@__ogi) { if ($__ogl =~ m/^(.*?)=(.*?)$/) { $__ogj = $1; $__ogk = $2; $authlib9_14_2::_akn{$__ogj} = $__ogk; } } } sub _bsi { my ($__ohh, $__ohi) = @_; my $__ogn = $authlib9_14_2::_akj . "_" . $__ohh; my $__ogo = 0; my $__ogp = "\r\n"; my ($__ogw, $__ohj, $__ohk, $__ohl, $__ohm) = authlib9_14_2::_wm($__ogn); eval { $__ogo = $authlib9_14_2::_ake->selectall_arrayref(authlib9_14_2::_wn($__ogw, 0)); }; if ($@) { authlib9_14_2::_zq(212, "Database error.", "Database error. Cannot get table description.", $@); } my @__ogq = (); my $__ogr = 0; foreach $__ogr(@{$__ogo}) { push @__ogq, $__ogr->[$__ohj]; } if ($__ohi) { $__ogq[0] = "time"; } my $__ogs = 0; my $__ogt = 200; eval { $__ogw = "SELECT COUNT(*) FROM `" . $__ogn . "`"; my $__ogu = $authlib9_14_2::_ake->selectrow_arrayref(authlib9_14_2::_wn($__ogw, 0)); $__ogs = $__ogu->[0]; }; if ($@) { authlib9_14_2::_zq(285, "Database error.", "Database error. Cannot read table while downloading table.", $@); } my $__ogv = $authlib9_14_2::_aku && !$__ohi; if ($__ogv && $__ogs > &authlib9_14_2::_API) { $__ogs = &authlib9_14_2::_API; } my $__ogw = "SELECT "; if ($__ogv && $authlib9_14_2::_ahn->{'_pj'} eq "odbc") { $__ogw .= "TOP " . &authlib9_14_2::_API . " "; } $__ogw .= "* FROM `" . $__ogn . "`"; if ($__ogv && $authlib9_14_2::_ahn->{'_pj'} ne "odbc") { $__ogw .= " LIMIT " . &authlib9_14_2::_API; } my $__ogx = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__ogw, 0)); $__ogx->execute(); binmode STDOUT; print _bod($__ogn . ".csv"); print "\"" . join("\",\"", @__ogq) . "\""; print $__ogp; my $__ogy = int($__ogs / $__ogt) + 1; my $__ogz = 0; my $__oha = 0; my $__ohb = 0; my $__ohc = ""; for ($__ogz = 0; $__ogz < $__ogy; $__ogz++) { $__ohc = ""; $__oha = $__ogx->fetchall_arrayref(undef, $__ogt); foreach $__ogr (@{$__oha}) { if ($__ohi) { my $__ohd = "Eastern Standard Time"; if (exists $authlib9_14_2::_akp->{'_ow'}) { $__ohd = $authlib9_14_2::_akp->{'_ow'}; } my $__ohe = authlib9_14_2::_aep($__ogr->[1], $__ohd); $__ogr->[0] = $__ohe; my $__ohf = $__ogr->[2]; my $__ohg = ""; if ($__ohf == &authlib9_14_2::_AOS) { $__ohg = "Error"; } elsif ($__ohf == &authlib9_14_2::_AOT) { $__ohg = "Warning"; } elsif ($__ohf == &authlib9_14_2::_AOU) { $__ohg = "Notice"; } $__ogr->[2] = $__ohg; } foreach $__ohb (@{$__ogr}) { $__ohc .= _boa(authlib9_14_2::_wi($__ohb)) . ","; } chop($__ohc); $__ohc .= $__ogp; } print $__ohc; } } sub _bsj { my ($__ohn) = @_; print authlib9_14_2::_zb(); my ($__oho, $__ohp, $__ohq) = _brx($__ohn); print "{"; if ($__oho) { print "\"error_msg\": \"" . authlib9_14_2::_zr($__ohp) . "\""; } print "}"; } sub _bsk { _bnv(1, 1, 1, 0); } sub _bsl { my $__ohr = ""; $__ohr .= "{"; $__ohr .= "\"result\": true,"; $__ohr .= "\"num_data_tables\": " . $authlib9_14_2::_akm->{"num_data_tables"}; $__ohr .= "}"; print authlib9_14_2::_zb(); print $__ohr; } sub _bsm { my $__ohs = ""; my $__oht = ""; my $__ohu = ""; if (exists $authlib9_14_2::_akn{"table_name"}) { $__ohs = $authlib9_14_2::_akn{"table_name"}; } if ($__ohs eq "") { $__ohu = "No table name specified"; $__oht .= "{"; $__oht .= "\"result\": false,"; $__oht .= "\"error\": \"" . authlib9_14_2::_zr($__ohu) . "\""; $__oht .= "}"; print authlib9_14_2::_zb(); print $__oht; } else { if ($__ohs =~ m/^[a-z0-9_\-]{1,64}$/io) { _bsi($__ohs); } else { $__ohu = "Invalid table name specified"; $__oht .= "{"; $__oht .= "\"result\": false,"; $__oht .= "\"error\": \"" . authlib9_14_2::_zr($__ohu) . "\""; $__oht .= "}"; print authlib9_14_2::_zb(); print $__oht; } } } sub _bsn { my ($__ohw, $__ohx, $__ohy) = _bpc(); my $__ohv = ""; $__ohv .= "{"; $__ohv .= "\"result\": true,"; $__ohv .= "\"exists\": "; if ($__ohw) { $__ohv .= "true"; } else { $__ohv .= "false"; } $__ohv .= "}"; print authlib9_14_2::_zb(); print $__ohv; } sub _bso { my $__ohz = ""; my $__oia = 0; my $__oib = 0; my $__oic = ""; my ($__oif, $__oig, $__oih) = _bpa(1); $__ohz .= "{"; $__ohz .= "\"result\": true,"; $__ohz .= "\"items\": "; $__ohz .= "["; my @__oid = (); foreach $__oia (@{$__oif}) { my @__oie = (); foreach $__oib (keys %{$__oia}) { $__oic = $__oia->{$__oib}; if (!authlib9_14_2::_adv($__oic)) { $__oic = "\"" . authlib9_14_2::_zr($__oic) . "\""; } push @__oie, "\"" . $__oib . "\": " . $__oic; } push @__oid, "{" . join(",", @__oie) . "}"; } $__ohz .= join(",", @__oid); $__ohz .= "]}"; print authlib9_14_2::_zb(); print $__ohz; } sub _bsp { my ($__oiq, $__oir) = @_; my $__oii = ""; my $__oij = 0; my $__oik = 0; my $__oil = ""; my $__oim = ""; my $__oin = 0; ($__oii, $__oik) = _bru($__oiq, 1); if ($__oik && exists $__oik->{'_amm'}) { $__oil = $__oik->{'_amm'}; $__oij = 1; } if ($ssiwebadmin9_14_2::_bua) { ($__oii, $__oin, $__oij, $__oil, $__oim) = _brv($__oiq, $__oir, 1); } my $__oio = ""; $__oio .= "{"; $__oio .= "\"result\":"; if ($__oij) { $__oio .= "false"; } else { $__oio .= "true"; } $__oio .= ","; if ($__oij && $__oil) { my $__oip = $__oil; if ($__oim) { $__oip .= " System Error: " . $__oim; } $__oio .= "\"error\": \"" . authlib9_14_2::_zr($__oip) . "\""; } elsif ($__oin) { $__oio .= "\"password_offset\":\"" . $__oin . "\""; } else { $__oio .= "\"finished\": true"; } $__oio .= "}"; print authlib9_14_2::_zb(); print $__oio; } sub _bsq { my ($__ois, $__oit) = @_; if ($__ois) { _bsr(0, "error", $__oit, 1); } else { _bsr(1, "", 0, 0); } } sub _bsr { my ($__oiv, $__oiw, $__oix, $__oiy) = @_; my $__oiu = ""; $__oiu .= "{"; $__oiu .= "\"result\":"; if ($__oiv) { $__oiu .= "true"; } else { $__oiu .= "false"; } if ($__oiw) { $__oiu .= ",\"" . $__oiw . "\":"; if ($__oiy) { $__oiu .= "\"" . authlib9_14_2::_zr($__oix) . "\""; } else { $__oiu .= $__oix; } } $__oiu .= "}"; print authlib9_14_2::_zb(); print $__oiu; authlib9_14_2::_act(); } sub _bss { my $__oiz = ""; my $__oja = 0; my $__ojb = 0; my $__ojc = 0; my ($__ojg, $__ojh, $__oji, $__ojj, $__ojk) = _bqz(0); if (!$__ojk) { my $__ojd = 0; my $__oje = 0; my $__ojf = ""; ($__ojc, $__ojk, $__ojd, $__oje, $__ojf) = _brh(0, $__oji, 0); if ($__ojc) { if (exists $authlib9_14_2::_akn{"password_offset"}) { $__ojb = $authlib9_14_2::_akn{"password_offset"}; if ($__ojb =~ m/^\d+$/o) { if (exists $authlib9_14_2::_akn{"db_table_name"}) { $authlib9_14_2::_akj =$authlib9_14_2::_akn{"db_table_name"}; } ($__ojc, $__ojk, $__ojb) = _brm($__oje, $__ojf, $__ojb); if ($__ojc && !$__ojb && !authlib9_14_2::_aen() && exists $authlib9_14_2::_akn{"test_password_offset"}) { ($__ojc, $__ojk) = _bri($__ojf); } } else { $__ojc = 0; $__ojk = {'_amm' => "Incorrect identifier offset"}; } } close $__oje; } } $__oiz .= "{"; $__oiz .= "\"result\":"; if ($__ojc) { $__oiz .= " true,"; if ($__ojb) { $__oiz .= "\"password_offset\":" . $__ojb; } else { $__oiz .= "\"finished\": true"; } } else { $__oiz .= " false,"; if ($__ojk && exists $__ojk->{'_amm'}) { $__oiz .= "\"error\":\"" . authlib9_14_2::_zr($__ojk->{'_amm'}) . "\""; } } $__oiz .= "}"; print authlib9_14_2::_zb(); print $__oiz; authlib9_14_2::_act(); } sub _bst { _bpe(); my $__ojl = "{"; $__ojl .= "\"result\": true"; $__ojl .= "}"; print authlib9_14_2::_zb(); print $__ojl; authlib9_14_2::_act(); } sub _bsu { my ($__ojn, $__ojo) = _bpg(1, 0); my $__ojm = "{"; $__ojm .= "\"result\":"; if ($__ojn) { $__ojm .= "false,"; } else { $__ojm .= "true"; } if ($__ojo) { $__ojm .= "\"error\": \"" . authlib9_14_2::_zr($__ojo) . "\""; } $__ojm .= "}"; print authlib9_14_2::_zb(); print $__ojm; authlib9_14_2::_act(); } END { if ($authlib9_14_2::_ajm) { close $authlib9_14_2::_ajm; } } 1;
