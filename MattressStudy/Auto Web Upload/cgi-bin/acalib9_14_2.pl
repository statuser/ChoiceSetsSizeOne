# ---------------------------------------------------------------------------
#     ACALIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package acalib9_14_2; our @ISA = qw(questionlib9_14_2); $acalib9_14_2::_aso = {}; sub _arh { $acalib9_14_2::_aso = {}; } sub _ve { my ($__fbk) = @_; $__fbk->SUPER::_ve(); my $__fbi = $__fbk->{'_if'}; my $__fbj = authlib9_14_2::_za($__fbi, 1); $__fbk->{'_uf'}->{'_asv'} = $__fbj; } sub _ari { my ($__fbm, $__fbn) = @_; if (!exists($acalib9_14_2::_aso->{$__fbm})) { if ($authlib9_14_2::_aih) { seek $authlib9_14_2::_ajm, $authlib9_14_2::_aih, 0; my $__fbl = authlib9_14_2::_zi($__fbn); _arj($__fbl, $__fbm, $__fbn); } } } sub _arj { my ($__fbx, $__fby, $__fbz) = @_; if (exists $__fbx->{$__fby}) { my $__fbo = $__fbx->{$__fby}; seek $authlib9_14_2::_ajm, $__fbo, 0; $acalib9_14_2::_aso->{$__fby} = authlib9_14_2::_zi($__fbz); $acalib9_14_2::_aso->{$__fby}->{'_asp'} = $__fby; $acalib9_14_2::_aso->{$__fby}->{'_asq'} = 7; $acalib9_14_2::_aso->{$__fby}->{'_asr'} = {}; $acalib9_14_2::_aso->{$__fby}->{'_asr'}->{'jointMatrix'} = []; $acalib9_14_2::_aso->{$__fby}->{'_asr'}->{'ijMatrix'} = []; $acalib9_14_2::_aso->{$__fby}->{'_asr'}->{'CovMatrix'} = []; my $__fbp = $acalib9_14_2::_aso->{$__fby}->{'_ae'}; my $__fbq = @{$__fbp}; my $__fbr = 0; my $__fbs = 0; my @__fbt = (); my @__fbu = (); my $__fbv = 0; my $__fbw = 0; for ($__fbr = 0; $__fbr < $__fbq; $__fbr++) { push @__fbt, $__fbv; $__fbw = @{$__fbp->[$__fbr]->{'_hf'}}; for($__fbs = 0; $__fbs < $__fbw; $__fbs++) { push @__fbu, $__fbp->[$__fbr]->{'_hf'}->[$__fbs]; } $__fbv += $__fbw; } $acalib9_14_2::_aso->{$__fby}->{'_ass'} = \@__fbt; $acalib9_14_2::_aso->{$__fby}->{'_ast'} = \@__fbu; } else { authlib9_14_2::_zq(140, "Cannot find ACA exercise.", "Cannot find ACA exercise: " . $__fby . " in lookup table.", ""); } } sub _ark { if ($authlib9_14_2::_aih) { seek $authlib9_14_2::_ajm, $authlib9_14_2::_aih, 0; my $__fca = authlib9_14_2::_zi(1); my $__fcb = ""; foreach $__fcb (sort keys %{$__fca}) { _arj($__fca, $__fcb); } } } sub _arl { my ($__fcq, $__fcr, $__fcs, $__fct) = @_; my $__fcc = $__fcq->{'_ae'}; my $__fcd = 0; my $__fce = ""; my $__fcf = 0; my $__fcg = 0; my @__fch = (); my @__fci = (); if ($__fcr =~ m/_(Rating|Importance)(\d+)/i) { $__fcf = $2; } if ($__fcf > 0) { if ($__fcs == &authlib9_14_2::_ANL && (exists $authlib9_14_2::_akn{"hid_Random_ACARAT"})) { $__fcd = 1; $__fce = $authlib9_14_2::_akn{"hid_Random_ACARAT"}; } elsif ($__fcs == &authlib9_14_2::_ANM && (exists $authlib9_14_2::_akn{"hid_Random_ACAIMP"})) { $__fcd = 1; $__fce = $authlib9_14_2::_akn{"hid_Random_ACAIMP"}; } if ($__fcd || $__fct) { if ($__fcd) { my @__fcj = split(",", $__fce); $__fcg = $__fcj[$__fcf - 1]; if ($__fcs == &authlib9_14_2::_ANL) { @__fch = @__fcj; } elsif ($__fcs == &authlib9_14_2::_ANM) { @__fci = @__fcj; } } elsif ($__fct) { my $__fck = @{$__fcc}; my $__fcl = 0; my $__fcm = 0; my $__fcn = $authlib9_14_2::_akn{"hid_respnum"}; my $__fco = authlib9_14_2::_acn($__fcn, $__fck, 4649); @__fch = ("") x $__fck; @__fci = ("") x $__fck; my $__fcp = 0; for ($__fcl = 0; $__fcl < $__fck; $__fcl++) { $__fci[$__fcl] = $__fco->[$__fcl] + 1; if ($__fcc->[$__fcl]->{'_pj'} == 0) { while ($__fcp < $__fck) { if ($__fcc->[$__fco->[$__fcp]]->{'_pj'} == 0) { $__fch[$__fcl] = $__fco->[$__fcp] + 1; $__fcp++; last; } $__fcp++; } } } $authlib9_14_2::_akn{"hid_Random_ACARAT"} = join(",", @__fch); $authlib9_14_2::_akn{"hid_Random_ACAIMP"} = join(",", @__fci); if ($__fcs == &authlib9_14_2::_ANL) { $__fcg = $__fch[$__fcf - 1]; } elsif ($__fcs == &authlib9_14_2::_ANM) { $__fcg = $__fci[$__fcf - 1]; } } $__fcr =~ s/(_Rating|_Importance)$__fcf/$1$__fcg/i; } } return ($__fcr, \@__fch, \@__fci, $__fcf); } sub _arm { my ($__fcx, $__fcy) = @_; my $__fcu = 0; my $__fcv = @{$__fcx}; my $__fcw = 0; for ($__fcu = 0; $__fcu <= $__fcv; $__fcu++) { if ($__fcx->[$__fcu] == $__fcy) { $__fcw = $__fcu + 1; } } return $__fcw; } sub _arn { _ark(); if ($acalib9_14_2::_aso) { my $__fcz = ""; my $__fda = 0; foreach $__fcz (sort keys %{$acalib9_14_2::_aso}) { $__fda = $acalib9_14_2::_aso->{$__fcz}; if (exists $__fda->{'_mf'}) { if (exists $__fda->{'_mf'}->{'_ff'}) { my $__fdb = 0; my $__fdc = $__fda->{'_ae'}; my $__fdd = @{$__fdc}; my $__fde = 0; ($__fdb, $__fde) = _asm($__fcz); my $__fdf = 0; my $__fdg = 0; my $__fdh = 0; for ($__fdf = 1; $__fdf <= $__fdd; $__fdf++) { $__fdh = authlib9_14_2::_aag($__fda, $__fdf); if ($__fdh > $__fdg) { $__fdg = $__fdh; } } my $__fdi = 0; my $__fdj = 0; my @__fdk = (); if ($__fdg > 0) { for ($__fdf = 1; $__fdf <= $__fdd; $__fdf++) { if ($__fde != 0) { $__fdi = $__fde->[$__fdf - 1]; } $__fdj = authlib9_14_2::_aag($__fda, $__fdf); push @__fdk, (($__fdi * $__fdb) + ($__fdj * $acalib9_14_2::_aso->{$__fcz}->{'_asq'} / $__fdg)) / ($__fdb + 1); } my $__fdl = ""; my $__fdm = 0; if ($__fdb) { eval { $__fdl = "UPDATE `" . $authlib9_14_2::_akj . "_aca_avg_imp` SET `num_respondents` = ?, `num_attributes` = ?, `scores_array` = ? WHERE `exercise_name` LIKE ?"; $__fdm = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__fdl, 0)); $__fdm->execute($__fdb + 1, $__fdd, join(",", @__fdk), authlib9_14_2::_wh($__fcz)); }; if ($@) { authlib9_14_2::_zq(239, "Database error.", "Database error. Cannot update aca_avg_imp table.", $@); } } else { my $__fdn = 0; eval { $__fdl = "SELECT * FROM `" . $authlib9_14_2::_akj . "_aca_avg_imp`"; $__fdn = $authlib9_14_2::_ake->selectrow_hashref(authlib9_14_2::_wn($__fdl, 0)); }; if (!$__fdn) { eval { $__fdl = "CREATE TABLE `" . $authlib9_14_2::_akj . "_aca_avg_imp` (`exercise_name` TEXT, `num_respondents` INT, `num_attributes` INT, `scores_array` TEXT) " . $authlib9_14_2::_ahn->{'_ami'}; $authlib9_14_2::_ake->do(authlib9_14_2::_wn($__fdl, 1)); }; if ($@) { my $__fdo = $@; $__fdo .= "\nYou may need to reduce the number of columns per table"; if ($authlib9_14_2::_ahn->{'_pj'} eq "mysql") { $__fdo .= "\nMake sure that 'innodb_file_format=Barracuda' and 'innodb_file_per_table=1' so ROW_FORMAT=DYNAMIC can be enabled"; } authlib9_14_2::_zq(273, "Database error.", "Database error. Cannot create aca_avg_imp table.", $__fdo); } } eval { $__fdl = "INSERT INTO `" . $authlib9_14_2::_akj . "_aca_avg_imp` (`exercise_name`, `num_respondents`, `num_attributes`, `scores_array`) VALUES (?, 1, ?, ?)"; $__fdm = $authlib9_14_2::_ake->prepare(authlib9_14_2::_wn($__fdl, 0)); $__fdm->execute(authlib9_14_2::_wh($__fcz), $__fdd, authlib9_14_2::_wh(join(",", @__fdk))); }; if ($@) { authlib9_14_2::_zq(238, "Database error.", "Database error. Cannot insert into aca_avg_imp table.", $@); } } } } } } $authlib9_14_2::_ake->commit(); } } sub _aro { my ($__fds, $__fdt, $__fdu) = @_; my $__fdp = 0; my $__fdq = 0; if ($__fdu != 0) { $__fdq = $__fdu->{'_hp'}; } if (!exists $__fds->{'_asr'}->{'blnComputeUtils'}) { $__fdt--; my $__fdr = $authlib9_14_2::_akn{"hid_respnum"} + $authlib9_14_2::_akn{"hid_pagenum"} + $__fdt; srand $__fdr; rand(); _arp($__fds, $__fdq); _arr($__fds); for ($__fdp = 0; $__fdp < $__fdt; $__fdp++) { _ars($__fds, $__fdp, $__fdu); } $__fds->{'_asr'}->{'blnComputeUtils'} = 1; } } sub _arp { my ($__fep, $__feq) = @_; my ($__fer,$__fes,$__fet,$__feu,$__fev) = (0) x 5; my ($__few,$__fex,$__fey,$__fez,$__ffa) = (0) x 5; my $__fdv = 0; my $__fdw = ""; my @__fdx = (); my $__fdy = $__fep->{'_asp'}; my @__fdz = (); my $__fea = $__fep->{'_ae'}; $__fer = @{$__fea}; if ($authlib9_14_2::_amg) { my @__feb = (3,7,4,6,5,2,1); my $__fec = 0; my $__fed = 0; for ($__fes = 0; $__fes < $__fer; $__fes++) { $__fed = @{$__fea->[$__fes]->{'_hf'}}; if ($__fes < 7) { $__fec = $__feb[$__fes]; } push @__fdz,($__fes, $__fec, 0, $__fed - 1); } } else { my $__fee = $authlib9_14_2::_akn{"hid_pagenum"}; my $__fef = ""; my $__feg = 0; my $__feh = 0; my $__fei = 0; my $__fej = 0; if (exists $__fep->{'_mf'}) { $__fei = 1; } for ($__fes = 0; $__fes < $__fer; $__fes++) { $__fej = 0; $__fef = $__fdy . "_Importance" . ($__fes+1); if ($__fei) { $__fej = 1; } else { if (exists $authlib9_14_2::_ahp{$__fef}) { $__feh = $authlib9_14_2::_ahp{$__fef}; $__feg = $__feh->{'_ji'}; if ($__feg > 0 && $__feg < $__fee) { $__fej = 1; } } } if ($__fej) { $__fdw = authlib9_14_2::_ws($__fef); if ($__fdw) { @__fdx = split(",", $__fdw); $__fdx[1]--; $__fdx[2]--; push @__fdz, ($__fes, @__fdx); } } } } my $__fek = 0; if (exists $__fep->{'_mf'}) { if (exists $__fep->{'_mf'}->{'_ff'}) { $__fek = 1; } } if ($__fek) { my $__fel = 0; my $__fem = 0; my $__fen = 0; my $__feo = 0; for ($__fes = 0; $__fes < $__fer; $__fes++) { $__fel += $__fdz[($__fes * 4) + 1]; } $__ffa = $authlib9_14_2::_akn{"hid_respnum"}; for ($__fes = 0; $__fes < $__fer - 1; $__fes++) { $__feo = $__fel * authlib9_14_2::_aco($__ffa * 47 + $__fes); $__fey = $__fes; $__fem = 0; for ($__fet=$__fes;$__fet<$__fer;$__fet++) { $__fen = $__fdz[$__fet*4+1]; $__fem += $__fen; if ($__fem > $__feo) { $__fey = $__fet; $__fel -= $__fen; last; } } if ($__fey != $__fes) { for($__feu=0;$__feu<4;$__feu++){ $__fev = $__fdz[$__fey*4+$__feu]; $__fdz[$__fey*4+$__feu] = $__fdz[$__fes*4+$__feu]; $__fdz[$__fes*4+$__feu] = $__fev; } } } } else { for ($__fes=0;$__fes<$__fer-1;$__fes++) { $__few = $__fdz[$__fes*4+1]; $__fex = 1; $__fey = $__fes; for ($__fet=$__fes+1;$__fet<$__fer;$__fet++) { if ($__fdz[$__fet*4+1] == $__few) { $__fex++; } elsif ($__fdz[$__fet*4+1] > $__few) { $__few = $__fdz[$__fet*4+1]; $__fex = 1; $__fey = $__fet; } } if (($__fey != $__fes) || ($__fex > 1)) { if ($__fex > 1) { $__ffa = $authlib9_14_2::_akn{"hid_respnum"}; $__fdv = authlib9_14_2::_acn($__ffa,$__fex,$__fes); $__fez = $__fdv->[0] + 1; $__fex = 0; for ($__fet=$__fes;$__fet<$__fer;$__fet++) { if ($__few == $__fdz[$__fet*4+1]) { $__fex++; if ($__fez == $__fex) { $__fey = $__fet; last; } } } } if ($__fey != $__fes) { for($__feu=0;$__feu<4;$__feu++){ $__fev = $__fdz[$__fey*4+$__feu]; $__fdz[$__fey*4+$__feu] = $__fdz[$__fes*4+$__feu]; $__fdz[$__fes*4+$__feu] = $__fev; } } } } } $__fep->{'_asr'}->{'ImpDesign'} = \@__fdz; } sub _arq { my ($__fft, $__ffu) = @_; my $__ffb = $__fft->{'_ae'}; my $__ffc = $__fft->{'_asp'}; my $__ffd = []; if (exists $__fft->{'_ks'}) { $__ffd = $__fft->{'_ks'}; } my $__ffe = @{$__ffd} / 4; my ($__ffv,$__ffw,$__ffx,$__ffy,$__ffz,$__fga) = (0) x 6; my ($__fgb,$__fgc,$__fgd,$__fge) = (0) x 4; my @__fff = (); my $__ffg = 15; $__ffv = @{$__ffb}; my $__ffh = 0; if (exists $authlib9_14_2::_ahp{$__ffc . "_Pair1"}) { my $__ffi = $authlib9_14_2::_ahp{$__ffc . "_Pair1"}; my $__ffj = $__ffi->{'_iz'}; seek $authlib9_14_2::_ajm, $__ffj, 0; my $__ffk = authlib9_14_2::_zi(0); $__ffh = $__ffk->{'_hp'}; } _arp($__fft, $__ffh); my @__ffl = (); my $__ffm = $__fft->{'_asr'}->{'ImpDesign'}; push @__ffl, @{$__ffm}; my $__ffn = 0; my $__ffo = 0; my $__ffp = 0; my $__ffq = 0; my $__ffr = 0; my $__ffs = 0; for ($__ffw=0;$__ffw<$__ffv-1;$__ffw++){ for ($__ffx=$__ffw+1;$__ffx<$__ffv;$__ffx++){ if ($__ffl[$__ffw*4+1]==-1 || $__ffl[$__ffx*4+1]==-1){ next; } $__fgb = $__ffl[$__ffw*4] + 1; $__fgc = $__ffl[$__ffx*4] + 1; $__ffn = @{$__ffb->[$__fgb - 1]->{'_hf'}}; $__ffo = @{$__ffb->[$__fgc - 1]->{'_hf'}}; for ($__ffy=0; $__ffy < $__ffo; $__ffy++){ for ($__ffz = 0; $__ffz < $__ffn; $__ffz++){ $__fff[$__ffy*$__ffg+$__ffz] = 0; } } $__fgd = 0; for ($__ffy = 0; $__ffy < $__ffe; $__ffy++){ $__ffp = $__ffy*4; $__ffq = $__ffp + 2; $__ffr = $__ffp + 1; $__ffs = $__ffp + 3; if ($__fgc==$__ffd->[$__ffp] && $__fgb==$__ffd->[$__ffq]) { $__ffz = $__ffd->[$__ffp]; $__ffd->[$__ffp] = $__ffd->[$__ffq]; $__ffd->[$__ffq] = $__ffz; $__ffz = $__ffd->[$__ffr]; $__ffd->[$__ffr] = $__ffd->[$__ffs]; $__ffd->[$__ffs] = $__ffz; } if ($__fgb==$__ffd->[$__ffp] && $__fgc==$__ffd->[$__ffq]) { if ($__ffd->[$__ffr]==-1 && $__ffd->[$__ffs]==-1){ $__fgd = 2; last; } elsif ($__ffd->[$__ffr]==-1){ for ($__ffz = 0; $__ffz < $__ffn; $__ffz++){ $__fff[($__ffd->[$__ffs]-1)*$__ffg+$__ffz] = -1; } $__fgd = 1; } elsif ($__ffd->[$__ffs]==-1){ for ($__ffz = 0; $__ffz < $__ffo; $__ffz++){ $__fff[$__ffz*$__ffg+$__ffd->[$__ffr]-1] = -1; } $__fgd = 1; } else { $__fff[($__ffd->[$__ffs]-1)*$__ffg+$__ffd->[$__ffr]-1] = -1; $__fgd = 1; } } } if ($__fgd==1){ for ($__ffy = 0; $__ffy < $__ffo; $__ffy++){ for ($__ffz = 0; $__ffz < $__ffn; $__ffz++){ if ($__fff[$__ffy*$__ffg+$__ffz] != -1){ $__fgd = 0; last; } } if ($__fgd==0){ last; } } if ($__fgd==1){ $__fgd = 2; } } if ($__fgd==2){ $__ffl[$__ffx*4+1] = -1; $__fge = 1; } } } if ($__fge==1){ for ($__ffw=0;$__ffw<$__ffv-1;$__ffw++){ for ($__ffx=$__ffw+1;$__ffx<$__ffv;$__ffx++){ if ($__ffl[$__ffw*4+1] < $__ffl[$__ffx*4+1]) { for($__ffy=0;$__ffy<4;$__ffy++){ $__fga = $__ffl[$__ffx*4+$__ffy]; $__ffl[$__ffx*4+$__ffy] = $__ffl[$__ffw*4+$__ffy]; $__ffl[$__ffw*4+$__ffy] = $__fga; } } } } } $__ffx = 0; for ($__ffw=0;$__ffw<$__ffv;$__ffw++) { if ($__ffl[$__ffw*4+1]>=0) { $__ffx++; } } if ($__ffu != 0) { if ($__ffx < $__ffu->{'_hp'}) { $__ffu->{'_hp'} = $__ffx; } if ($__ffx+1 < $__ffu->{'_ir'}) { $__ffu->{'_ir'} = $__ffx+1; } } return \@__ffl; } sub _arr { my ($__fgt) = @_; my $__fgf = $__fgt->{'_asp'}; my $__fgg = $__fgt->{'_ae'}; my ($__fgu,$__fgv,$__fgw,$__fgx,$__fgy,$__fgz,$__fha,$__fhb) = (0) x 8; my @__fgh = (); my $__fgi = $__fgt->{'_asq'}; my $__fgj = 0; my $__fgk = ""; my $__fgl = 0; my $__fgm = 0; my $__fgn = 0; my $__fgo = @{$__fgg}; my $__fgp = 0; my $__fgq = $__fgt->{'_asr'}->{'ImpDesign'}; my @__fgr = (); if (exists $authlib9_14_2::_ahp{$__fgf . "_Importance1"}) { my $__fgs = 0; $__fgm = $authlib9_14_2::_ahp{$__fgf . "_Importance1"}; $__fgn = $__fgm->{'_iz'}; seek $authlib9_14_2::_ajm, ($__fgn), 0; $__fgs = authlib9_14_2::_zi(0); $__fgi = @{$__fgs->{'_s'}->{'_v'}}; } for ($__fgu = 0; $__fgu < $__fgo; $__fgu++){ $__fgy = $__fgq->[$__fgu*4]; $__fgx = $__fgg->[$__fgy]->{'_pj'}; $__fgw = @{$__fgg->[$__fgy]->{'_hf'}}; if ($__fgx == 1){ for($__fgv=0;$__fgv<$__fgw;$__fgv++){ $__fgh[$__fgv] = $__fgv / ($__fgw - 1); } } elsif ($__fgx == 2){ for($__fgv=0;$__fgv<$__fgw;$__fgv++){ $__fgh[$__fgv] = ($__fgw - $__fgv - 1) / ($__fgw - 1); } } else { for ($__fgv=0;$__fgv<$__fgw;$__fgv++){ $__fgk = $__fgf . "_Rating" . ($__fgy + 1) . "_" . ($__fgv + 1); $__fgh[$__fgv] = authlib9_14_2::_ws($__fgk); if ($__fgv == 0){ $__fgz = $__fgh[$__fgv]; $__fha = $__fgh[$__fgv]; } if ($__fgh[$__fgv] < $__fgz){ $__fgz = $__fgh[$__fgv]; } if ($__fgh[$__fgv] > $__fha){ $__fha = $__fgh[$__fgv]; } } for ($__fgv=0;$__fgv<$__fgw;$__fgv++){ $__fgh[$__fgv] -= $__fgz; if ($__fha > $__fgz){ $__fgh[$__fgv] /= ($__fha - $__fgz); } } } $__fgl = 0; for ($__fgv=0;$__fgv<$__fgw;$__fgv++){ $__fgp = $__fgq->[$__fgu*4+1]; if ($__fgp <= 0) { $__fgp = 1 / ($__fgt->{'_asq'} + 1); } $__fgh[$__fgv] *= (4 * $__fgp); $__fgh[$__fgv] /= $__fgi; $__fgl += $__fgh[$__fgv]; } $__fgl /= $__fgw; for ($__fgv=0;$__fgv<$__fgw;$__fgv++){ $__fgh[$__fgv] -= $__fgl; push @__fgr, $__fgh[$__fgv]; } $__fgq->[$__fgu*4+2] = $__fhb; $__fgq->[$__fgu*4+3] = $__fgw; $__fhb += $__fgw; } $__fgt->{'_asr'}->{'XUtils'} = \@__fgr; } sub _ars { my ($__fhr, $__fhs, $__fht) = @_; my $__fhc = $__fhr->{'_asp'}; my ($__fhu,$__fhv,$__fhw,$__fhx,$__fhy,$__fhz) = (0) x 6; my @__fhd = (); my $__fhe = $__fht->{'_hp'}; my $__fhf = @{$__fht->{'_s'}->{'_v'}}; my $__fhg = $__fhr->{'_asr'}->{'ImpDesign'}; my @__fhh = (); my @__fhi = (); $__fhu = $__fhg->[($__fhe-1)*4+2] + $__fhg->[($__fhe-1)*4+3]; if ($__fhs == 0) { my @__fhj = (); my @__fhk = (); my @__fhl = (); $__fhw = $__fhu * ($__fhu + 1) / 2; for($__fhv=0;$__fhv<$__fhw;$__fhv++){ $__fhj[$__fhv] = 0; } $__fhx = 0; for ($__fhv=0;$__fhv<$__fhu;$__fhv++){ for ($__fhw=$__fhv;$__fhw<$__fhu;$__fhw++){ if ($__fhv==$__fhw){ $__fhj[$__fhx] = 1; } $__fhx++; } } $__fhx = 0; for($__fhv=0;$__fhv<$__fhe;$__fhv++){ @__fhh = (); $__fhx = $__fhg->[$__fhv*4+3]; $__fhx = $__fhx * ($__fhx - 1) / 2; for ($__fhw=0;$__fhw<$__fhx;$__fhw++){ $__fhh[$__fhw] = 0; } $__fhk[$__fhv] = [@__fhh]; for ($__fhw=0;$__fhw<$__fhe;$__fhw++){ $__fhl[$__fhv*$__fhe+$__fhw] = 0; } } $__fhr->{'_asr'}->{'jointMatrix'} = \@__fhl; $__fhr->{'_asr'}->{'ijMatrix'} = \@__fhk; $__fhr->{'_asr'}->{'CovMatrix'} = \@__fhj; } my $__fhm = $__fhc . "_Pair" . ($__fhs + 1); if (exists $authlib9_14_2::_ahp{$__fhm}) { my $__fhn = $authlib9_14_2::_ahp{$__fhm}; my $__fho = $__fhn->{'_ji'}; my $__fhp = $authlib9_14_2::_akn{"hid_pagenum"}; if ($__fho < $__fhp) { my $__fhq = authlib9_14_2::_ws($__fhm); if ($__fhq) { @__fhd = split(",", $__fhq); for ($__fhv=0;$__fhv<$__fhu;$__fhv++){ $__fhi[$__fhv] = 0; } for ($__fhv=1;$__fhv<@__fhd;$__fhv++){ $__fhy = _art($__fhr, $__fhd[$__fhv], $__fhe); if ($__fhd[$__fhv] < 0) { $__fhi[$__fhy] = -1; } else { $__fhi[$__fhy] = 1; } } $__fhz = 1 + (8 / ($__fhf - 1)) * ($__fhd[0] - 1); $__fhz -= 5; _aru($__fhr, $__fhu,$__fhz,\@__fhi); _arv($__fhr, $__fhe, \@__fhi); _arw($__fhr, $__fhe, \@__fhi); } } } } sub _art { my ($__fic, $__fid, $__fie) = @_; my $__fia = $__fic->{'_asr'}->{'ImpDesign'}; my $__fib = $__fic->{'_ass'}; my ($__fif,$__fig,$__fih) = (0) x 3; if ($__fid < 0){ $__fid = -$__fid; } $__fid--; $__fif = -1; for($__fig=0;$__fig<$__fie;$__fig++){ $__fih = $__fib->[$__fia->[$__fig*4]]; if (($__fid >= $__fih) && ($__fid < ($__fih + $__fia->[$__fig*4+3]))){ $__fif = $__fia->[$__fig*4+2] + $__fid - $__fih; last; } } if ($__fif == -1){ authlib9_14_2::_zq(141, "", "ACA error in LookupPersLevel.", ""); } return $__fif; } sub _aru { my ($__fik, $__fil, $__fim, $__fin) = @_; my ($__fio,$__fip,$__fiq,$__fir,$__fis) = (0) x 5; my ($__fit,$__fiu,$__fiv) = (0.0) x 3; my (@__fiw); my $__fii = 0; my $__fij = 0; if (exists $__fik->{'_asr'}->{'XUtils'}) { $__fii = $__fik->{'_asr'}->{'XUtils'}; } if (exists $__fik->{'_asr'}->{'CovMatrix'}) { $__fij = $__fik->{'_asr'}->{'CovMatrix'}; } for($__fio=0;$__fio<$__fil;$__fio++){ $__fiw[$__fio] = 0; $__fir = $__fio * $__fil - $__fio * ($__fio+1) / 2; for ($__fip=0;$__fip<$__fil;$__fip++){ $__fis = $__fin->[$__fip]; if ($__fis == 0) { next; } if ($__fio <= $__fip){ $__fiq = $__fir + $__fip; } else { $__fiq = $__fip * $__fil - $__fip * ($__fip+1)/2 + $__fio; } if ($__fis > 0){ $__fiw[$__fio] += $__fij->[$__fiq]; } else { $__fiw[$__fio] -= $__fij->[$__fiq]; } } } $__fiu = 0; $__fit = 0; for($__fio=0;$__fio<$__fil;$__fio++){ if ($__fin->[$__fio]==0) { next; } $__fiu += $__fin->[$__fio] * $__fiw[$__fio]; $__fit += $__fin->[$__fio] * $__fii->[$__fio]; } $__fiu = 1 / ($__fiu +1); $__fit = $__fim - $__fit; $__fiq = 0; for($__fio=0;$__fio<$__fil;$__fio++){ $__fiv = $__fiw[$__fio] * $__fiu; $__fii->[$__fio] += $__fiv * $__fit; for ($__fip=$__fio;$__fip<$__fil;$__fip++){ $__fij->[$__fiq] -= $__fiv * $__fiw[$__fip]; $__fiq++; } } } sub _arv { my ($__fiz, $__fja, $__fjb) = @_; my ($__fjc,$__fjd,$__fje,$__fjf,$__fjg,$__fjh,$__fji,$__fjj) = (0) x 8; my $__fix = $__fiz->{'_asr'}->{'ImpDesign'}; my $__fiy = $__fiz->{'_asr'}->{'ijMatrix'}; for($__fjc=0;$__fjc<$__fja;$__fjc++){ $__fjj = 0; $__fjd = $__fix->[$__fjc*4+2]; for($__fje = 0; $__fje < $__fix->[$__fjc*4+3]; $__fje++){ if ($__fjb->[$__fjd+$__fje] != 0) { if ($__fjj==1){ $__fji = $__fje; $__fjj = 2; } else { $__fjh = $__fje; $__fjj = 1; } } } if ($__fjj == 0) { next; } if ($__fjj != 2){ authlib9_14_2::_zq(142, "", "ACA error in Updateijmat.", ""); } $__fjg = 0; for($__fje = 0; $__fje < $__fix->[$__fjc*4+3] - 1; $__fje++){ for ($__fjf = $__fje + 1; $__fjf < $__fix->[$__fjc*4+3]; $__fjf++){ if ($__fje==$__fjh && $__fjf==$__fji){ $__fiy->[$__fjc][$__fjg] += 1; } $__fjg++; } } } } sub _arw { my ($__fjm, $__fjn, $__fjo) = @_; my $__fjk = $__fjm->{'_asr'}->{'ImpDesign'}; my $__fjl = $__fjm->{'_asr'}->{'jointMatrix'}; my ($__fjp,$__fjq,$__fjr,$__fjs,$__fjt) = (0) x 5; my (@__fju); @__fju = (); for($__fjp=0;$__fjp<$__fjn;$__fjp++){ $__fjq = $__fjk->[$__fjp*4+2]; for($__fjr = 0; $__fjr < $__fjk->[$__fjp*4+3]; $__fjr++){ if ($__fjo->[$__fjq+$__fjr] != 0) { push @__fju,$__fjp; last; } } } for($__fjp=0;$__fjp<scalar(@__fju)-1;$__fjp++){ for($__fjr=$__fjp+1;$__fjr<scalar(@__fju);$__fjr++){ $__fjs = $__fju[$__fjp]; $__fjt = $__fju[$__fjr]; $__fjl->[$__fjs*$__fjn+$__fjt] ++; $__fjl->[$__fjt*$__fjn+$__fjs] ++; } } } sub _arx { my ($__fkh, $__fki, $__fkj, $__fkk) = @_; my $__fjv = 0; my $__fjw = {}; if (exists $__fkh->{'_asu'}) { $__fjw = $__fkh->{'_asu'}; if (exists $__fjw->{$__fkj}) { $__fjv = $__fjw->{$__fkj}; } } if ($__fjv == 0) { my @__fjx = (); my $__fjy = []; if (exists $__fkh->{'_ks'}) { $__fjy = $__fkh->{'_ks'}; } my $__fjz = @{$__fjy} / 4; my $__fka = $__fkh->{'_asr'}->{'ImpDesign'}; my $__fkb = $__fkh->{'_ass'}; my @__fkc = (); my $__fkd = 0; my $__fke = 0; my ($__fkl,$__fkm,$__fkn,$__fko) = (0) x 4; my ($__fkp, $__fkq, $__fkr, $__fks, $__fkt, $__fku, $__fkv) = (0) x 7; my $__fkf = $authlib9_14_2::_akn{"hid_respnum"}; my $__fkg = ($__fkf * 31) + $__fkj; srand($__fkg); rand(); xyz: $__fkd = _ary($__fkh, $__fki,$__fkj,$__fkk,$__fkp,$__fkg); $__fkq = 0; abc: @__fjx = (); for ($__fkl=0;$__fkl<@{$__fkd};$__fkl++){ $__fke = $__fkd->[$__fkl]*4; @__fkc = _arz($__fkh, $__fkd->[$__fkl], $__fka->[$__fke + 3]); $__fkc[0] += $__fka->[$__fke + 2]; $__fkc[1] += $__fka->[$__fke + 2]; push @__fjx,@__fkc; } _asa($__fkh, scalar (@{$__fkd}), \@__fjx); for ($__fkm=0;$__fkm<@{$__fkd};$__fkm++){ $__fke = $__fkd->[$__fkm]*4; for($__fkn=0;$__fkn<2;$__fkn++){ $__fjx[$__fkm*2+$__fkn] -= $__fka->[$__fke + 2]; $__fjx[$__fkm*2+$__fkn] += $__fkb->[$__fka->[$__fke]]; } } $__fkr = 0; for($__fkl=0; $__fkl < $__fjz; $__fkl++){ for ($__fkm=0;$__fkm< scalar (@{$__fkd}) - 1;$__fkm++){ for ($__fkn=$__fkm+1;$__fkn<@{$__fkd};$__fkn++){ for ($__fko=0;$__fko<2;$__fko++){ $__fku = $__fka->[$__fkd->[$__fkm]*4] + 1; $__fkv = $__fka->[$__fkd->[$__fkn]*4] + 1; $__fks = $__fjx[$__fkm*2+$__fko] - $__fkb->[$__fka->[$__fkd->[$__fkm]*4]] + 1; $__fkt = $__fjx[$__fkn*2+$__fko] - $__fkb->[$__fka->[$__fkd->[$__fkn]*4]] + 1; $__fkr = _asc($__fjy, $__fkr, $__fkl, $__fku, $__fkv, $__fks, $__fkt); if ($__fkr){ last; } } if ($__fkr){ last; } } if ($__fkr){ last; } } if ($__fkr){ last; } } if ($__fkr){ if ($__fkq < 50){ $__fkq++; goto abc; } if ($__fkp < 50){ $__fkp++; goto xyz; } authlib9_14_2::_zq(143, "", "ACA error: Too many constraints in attributes.", ""); } _asb(scalar (@{$__fkd}), \@__fjx); $__fjv = \@__fjx; $__fjw->{$__fkj} = $__fjv; $__fkh->{'_asu'} = $__fjw; } return $__fjv; } sub _ary { my ($__flh, $__fli,$__flj,$__flk,$__fll,$__flm) = @_; my $__fkw = $__flh->{'_asr'}->{'ImpDesign'}; my $__fkx = $__flh->{'_asr'}->{'jointMatrix'}; my ($__fln, $__flo, $__flp, $__flq, $__flr, $__fls, $__flt) = (0) x 7; my @__fky = (); my ($__flu, $__flv, $__flw) = (0.0) x 3; my ($__flx,$__fly) = (0) x 2; my (@__flz); my $__fkz = 0; my $__fla = 0; if ($__fli == 2 && $__flj < $__flk && $__fll == 0){ if (exists $__flh->{'_mf'}) { if (exists $__flh->{'_mf'}->{'_ff'}) { $__fla = 1; my @__flb = (); my @__flc = (); my $__fld = 0; my $__fle = 0; my $__flf = 0; my $__flg = 0; for ($__fln=0;$__fln<$__flk;$__fln++){ $__flc[$__fln] = $__fkw->[$__fln*4+1]; $__fld += $__flc[$__fln]; } srand($authlib9_14_2::_akn{"hid_respnum"} * 31); rand(); for ($__fln=0;$__fln<$__flk;$__fln++){ $__fle = rand; $__flf = 0; $__flg = 0; for ($__flo=0;$__flo<$__flk;$__flo++) { if ($__flc[$__flo] > 0) { $__flg = $__flo; if (($__flf + ($__flc[$__flo]/ $__fld)) >= $__fle) { last; } else{ $__flf += ($__flc[$__flo] / $__fld); } } } $__flb[$__fln] = $__flg; $__fld -= $__flc[$__flg]; $__flc[$__flg] = 0; } srand($__flm); rand(); push @__fky,$__flb[$__flj]; if ($__flk == $__flj+1){ push @__fky,$__flb[0]; } else { push @__fky,$__flb[$__flj+1]; } } } if (!$__fla) { push @__fky,$__flj; if ($__flk == $__flj+1){ push @__fky,0; } else { push @__fky,($__flj+1); } } $__fln = $__fky[0]; $__flo = $__fky[1]; $__fkx->[$__fln*$__flk+$__flo] ++; $__fkx->[$__flo*$__flk+$__fln] ++; return (\@__fky); } $__flu = 0.0; $__flv = 0.0; $__flx = 0; $__fly = 1.; for ($__fln=0;$__fln<$__flk;$__fln++){ $__flz[$__fln] = rand; for ($__flo=0;$__flo<$__flk;$__flo++){ if ($__fln==$__flo){ next; } $__fkz = $__fln*$__flk+$__flo; $__flz[$__fln] += $__fkx->[$__fkz]; if ($__fln<$__flo){ next; } $__flx++; $__flu += $__fkx->[$__fkz]; } } if ($__flx != 0) { $__flv = $__flu / $__flx; } for($__fln=0;$__fln<$__fli;$__fln++){ RETRY: for ($__flt=0;$__flt<$__flk;$__flt++){ $__flp = 0; $__flw = $__flz[0]; for ($__flq=0;$__flq<$__flk;$__flq++){ if ($__flz[$__flq]<$__flw){ $__flw = $__flz[$__flq]; $__flp = $__flq; } } $__flr = 1; for ($__fls=0;$__fls<$__fln;$__fls++){ $__flq = $__fky[$__fls]; $__fkz = $__flp*$__flk+$__flq; if (($__flp==$__flq) || ($__fkx->[$__fkz] > $__flv * $__fly) || ($__fkx->[$__fkz] >= 1000)){ $__flr = 0; last; } } if ($__flr==1){ last; } $__flz[$__flp]++; } if ($__flr==0){ $__fly *= 1.1; if ($__fly > 1000){ authlib9_14_2::_zq(144, "", "ACA Error in PickAtts.", ""); } goto RETRY; } push @__fky,$__flp; $__flz[$__flp] = 1000; for ($__fls=0;$__fls<$__fln;$__fls++){ $__flq = $__fky[$__fls]; $__fkx->[$__flp*$__flk+$__flq] ++; $__fkx->[$__flq*$__flk+$__flp] ++; $__flz[$__flq] ++; $__flu++; } if ($__flx != 0){ $__flv = $__flu / $__flx; } } return (\@__fky); } sub _arz { my ($__fmb, $__fmc, $__fmd) = @_; my ($__fme,$__fmf,$__fmg,$__fmh,$__fmi,$__fmj,$__fmk,$__fml) = (0) x 8; my $__fma = $__fmb->{'_asr'}->{'ijMatrix'}; $__fmk = $__fmd - 1; $__fmj = $__fmd * $__fmk / 2; $__fmg = int (rand 32000); $__fml = 0; RESTART: for($__fmh=0;$__fmh<$__fmj;$__fmh++){ $__fmi = ($__fmh + $__fmg) % $__fmj; if ($__fma->[$__fmc][$__fmi]==0){ $__fml = 1; last; } } if ($__fml==0){ for($__fmh=0;$__fmh<$__fmj;$__fmh++){ if ($__fma->[$__fmc][$__fmh] > 0) { $__fma->[$__fmc][$__fmh] -= 1; } } goto RESTART; } $__fmh = 0; for ($__fme=0;$__fme<$__fmk;$__fme++){ for ($__fmf=$__fme+1;$__fmf<$__fmd;$__fmf++){ if ($__fmh==$__fmi) { goto FOUND; } $__fmh++; } } FOUND: $__fma->[$__fmc][$__fmi] = 1; return ($__fme,$__fmf); } sub _asa { my ($__fmn, $__fmo,$__fmp) = @_; my ($__fmq, $__fmr, $__fms) = (0) x 3; my ($__fmt, $__fmu, $__fmv) = (0.0) x 3; my (@__fmw); my $__fmm = 0; if (exists $__fmn->{'_asr'}->{'XUtils'}) { $__fmm = $__fmn->{'_asr'}->{'XUtils'}; } for ($__fmq=0;$__fmq<$__fmo;$__fmq++){ $__fmw[$__fmq] = $__fmm->[$__fmp->[$__fmq*2+1]] - $__fmm->[$__fmp->[$__fmq*2]]; $__fmt += $__fmw[$__fmq]; } $__fmu = $__fmt; if ($__fmu < 0) { $__fmu = -$__fmu; } for(;;){ $__fms = -1; for($__fmq=0;$__fmq<$__fmo;$__fmq++){ $__fmv = $__fmt - 2 * $__fmw[$__fmq]; if ($__fmv < 0) { $__fmv = -$__fmv; } if ($__fmv >= $__fmu){ next; } $__fms = $__fmq; $__fmu = $__fmv; } if ($__fms< 0){ last; } $__fmr = $__fmp->[$__fms*2+1]; $__fmp->[$__fms*2+1] = $__fmp->[$__fms*2]; $__fmp->[$__fms*2] = $__fmr; $__fmt -= 2 * $__fmw[$__fms]; $__fmw[$__fms] = -$__fmw[$__fms]; } $__fmv = rand; if ($__fmv < .5) { for ($__fmq=0;$__fmq<$__fmo;$__fmq++) { $__fmr = $__fmp->[$__fmq*2]; $__fmp->[$__fmq*2] = $__fmp->[$__fmq*2+1]; $__fmp->[$__fmq*2+1] = $__fmr; } } } sub _asb { my ($__fmx,$__fmy) = @_; my ($__fmz,$__fna,$__fnb,$__fnc) = (0) x 4; my (@__fnd); for($__fmz=0;$__fmz<$__fmx;$__fmz++){ $__fnd[$__fmz] = rand; } for($__fmz=0;$__fmz<$__fmx-1;$__fmz++){ for($__fna=$__fmz+1;$__fna<$__fmx;$__fna++){ if ($__fnd[$__fmz] >= $__fnd[$__fna]){ $__fnc = $__fnd[$__fmz]; $__fnd[$__fmz] = $__fnd[$__fna]; $__fnd[$__fna] = $__fnc; for($__fnb=0;$__fnb<2;$__fnb++){ $__fnc = $__fmy->[$__fmz*2+$__fnb]; $__fmy->[$__fmz*2+$__fnb] = $__fmy->[$__fna*2+$__fnb]; $__fmy->[$__fna*2+$__fnb] = $__fnc; } } } } } sub _asc { my ($__fni, $__fnj, $__fnk, $__fnl, $__fnm, $__fnn, $__fno) = @_; my $__fne = $__fni->[$__fnk*4]; my $__fnf = $__fni->[$__fnk*4+2]; my $__fng = $__fni->[$__fnk*4+1]; my $__fnh = $__fni->[$__fnk*4+3]; if ((($__fne==$__fnl) || ($__fne==$__fnm)) && (($__fnf==$__fnl) || ($__fnf==$__fnm))){ if ($__fng==-1 || $__fnh==-1){ if ($__fng==-1 && $__fnh==-1){ $__fnj = 1; } else { if ($__fng==-1){ if ($__fne==$__fnl){ if ($__fno == $__fnh){ $__fnj = 1; } } else { if ($__fnn == $__fnh){ $__fnj = 1; } } } else { if ($__fne==$__fnl){ if ($__fnn == $__fng){ $__fnj = 1; } } else { if ($__fno == $__fng){ $__fnj = 1; } } } } } else { if ($__fne==$__fnl){ if (($__fnn == $__fng) && ($__fno == $__fnh)){ $__fnj = 1; } } else { if (($__fno == $__fng) && ($__fnn == $__fnh)){ $__fnj = 1; } } } } return $__fnj; } sub _asd { my ($__fnw, $__fnx) = @_; my $__fnp = $__fnw->{'_ae'}; my $__fnq = $__fnw->{'_ass'}; my $__fnr = []; if (exists $__fnw->{'_ks'}) { $__fnr = $__fnw->{'_ks'}; } my $__fns = @{$__fnr} / 4; my ($__fny, $__fnz, $__foa, $__fob, $__foc, $__fod, $__foe, $__fof) = (0) x 8; my ($__fog, $__foh, $__foi, $__foj, $__fok, $__fol, $__fom, $__fon) = (0) x 8; my $__fnt = 0; my $__fnu = 0; my $__fnv = 0; abc: $__fof = 0; for($__fny = 0; $__fny < $__fns; $__fny++){ for ($__fnz=0;$__fnz< scalar (@{$__fnx}) - 1;$__fnz++){ for ($__foa=$__fnz+1;$__foa<@{$__fnx};$__foa++){ ($__fob,$__fod) = _ase($__fnw, $__fnx->[$__fnz]); ($__foc,$__foe) = _ase($__fnw, $__fnx->[$__foa]); $__fnt = @{$__fnp->[$__fob - 1]->{'_hf'}}; $__fnu = @{$__fnp->[$__foc - 1]->{'_hf'}}; $__fof = _asc($__fnr, $__fof, $__fny, $__fob, $__foc, $__fod, $__foe); if ($__fof){ $__fol = $__fny; last; } } if ($__fof){ last; } } if ($__fof){ last; } } if ($__fof==1){ if ($__foh == 0 && $__fog == 0 && $__fon == 0) { $__fok = 1; if ($__foe == $__fnu) { $__fok = 0; } $__foj = 1; if ($__fod == $__fnt) { $__foj = 0; } } $__foh++; $__foi ++; if ($__fok == 1) { $__fnx->[$__foa]++; if ($__fnx->[$__foa] >= ($__fnu + $__fnq->[$__foc-1])){ $__fnx->[$__foa] = $__fnq->[$__foc-1]; } } else { $__fnx->[$__foa]--; if ($__fnx->[$__foa] < $__fnq->[$__foc-1]){ $__fnx->[$__foa] = $__fnu + $__fnq->[$__foc-1] - 1; } } if ($__fol != $__fom) { $__fon = 1; $__foh = 0; } if (($__foh >= $__fnu) || ($__foi > 50)){ $__foh = 0; $__foi = 0; if ($__fon) { $__fon = 0; $__fok = 1 - $__fok; } $__fog++; if ($__foj == 1) { $__fnx->[$__fnz]++; if ($__fnx->[$__fnz] >= ($__fnt + $__fnq->[$__fob-1])){ $__fnx->[$__fnz] = $__fnq->[$__fob-1]; } } else { $__fnx->[$__fnz]--; if ($__fnx->[$__fnz] < $__fnq->[$__fob-1]){ $__fnx->[$__fnz] = $__fnt + $__fnq->[$__fob-1] - 1; } } if ($__fog > 50){ authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, "Too many Prohibitions in ACA design file."); $__fnv = 1; return $__fnv; } } $__fom = $__fol; goto abc; } return $__fnv; } sub _ase { my ($__foq, $__for) = @_; my $__foo = $__foq->{'_ae'}; my $__fop = $__foq->{'_ass'}; my ($__fos,$__fot,$__fou) = (0) x 3; $__fos = @{$__foo}; for($__fot=0;$__fot<$__fos;$__fot++){ $__fou = $__fop->[$__fot]; if (($__for >= $__fou) && ($__for < ($__fou + @{$__foo->[$__fot]->{'_hf'}}))){ return ($__fot+1,($__for - $__fou+1)); } } } sub _asf { my ($__fow, $__fox, $__foy, $__foz, $__fpa) = @_; my $__fov = $__fow->{'_ass'}; my ($__fpb,$__fpc) = (0) x 2; if ($__fpa == 0 || $__fpa == 1){ $__fpc = 1; } elsif ($__fpa == 2 || $__fpa == 5){ $__fpc = .5; } elsif ($__fpa == 3 || $__fpa == 4){ $__fpc = .25; } elsif ($__fpa == 6 || $__fpa == 7){ $__fpc = .75; } if ($__fpa < 8){ if ($__fpa%2 == 1){ if ($__foz < $__fpc * $__foy){ $__fpb = $__fov->[$__fox->[$__foz*4]] + $__fox->[$__foz*4+2]; } else { $__fpb = $__fov->[$__fox->[$__foz*4]] + $__fox->[$__foz*4+3]; } } else { if ($__foz >= $__fpc * $__foy){ $__fpb = $__fov->[$__fox->[$__foz*4]] + $__fox->[$__foz*4+2]; } else { $__fpb = $__fov->[$__fox->[$__foz*4]] + $__fox->[$__foz*4+3]; } } } return $__fpb; } sub _asg { my ($__fpm, $__fpn, $__fpo) = @_; my $__fpd = 0; my $__fpe = 0; my $__fpf = 0; my $__fpg = 0; my $__fph = 0; my $__fpi = $__fpm->{'_asp'}; if (authlib9_14_2::_ws($__fpi . "_Importance1") eq "") { $__fpd = 0; } else { if (!exists $__fpm->{'_asr'}->{'blnComputeUtils'}) { if (exists $authlib9_14_2::_ahp{$__fpi . "_Pair1"}) { my $__fpj = $__fpi . "_Pair"; $__fpe = grep(/^$__fpj/, keys(%authlib9_14_2::_ahp)); $__fpe = $__fpe + 1; $__fpg = $authlib9_14_2::_ahp{$__fpi . "_Pair1"}; $__fph = $__fpg->{'_iz'}; seek $authlib9_14_2::_ajm, ($__fph), 0; $__fpf = authlib9_14_2::_zi(0); } _aro($__fpm, $__fpe, $__fpf); } _ash($__fpm); if ($__fpo > 0) { my $__fpk = $__fpm->{'_asr'}->{'ACAUtil'}; $__fpd = $__fpk->[$__fpm->{'_ass'}->[$__fpn-1] + $__fpo - 1]; } else { my $__fpl = $__fpm->{'_asr'}->{'ACAImp'}; $__fpd = $__fpl->[$__fpn-1]; } } return $__fpd; } sub _ash { my ($__fpv) = @_; my ($__fpw,$__fpx,$__fpy,$__fpz,$__fqa,$__fqb) = (0) x 6; my ($__fqc,$__fqd,$__fqe,$__fqf) = (0) x 4; my $__fpp = $__fpv->{'_ae'}; my $__fpq = $__fpv->{'_ass'}; my $__fpr = 0; my $__fps = 0; if (exists $__fpv->{'_asr'}->{'XUtils'}) { $__fps = $__fpv->{'_asr'}->{'XUtils'}; } if (!exists $__fpv->{'_asr'}->{'blnNormalizedUtils'}) { my @__fpt = (); my @__fpu = (); $__fqf = @{$__fpp}; for ($__fpw=0;$__fpw<$__fqf;$__fpw++){ $__fqb = 0; $__fqa = @{$__fpp->[$__fpw]->{'_hf'}}; $__fpy = $__fpq->[$__fpw]; $__fpz = _art($__fpv, $__fpy+1, $__fqf); for($__fpx=0;$__fpx<$__fqa;$__fpx++){ $__fqb = $__fqb + $__fps->[$__fpz+$__fpx]; } if ($__fqa > 0){ $__fqb = $__fqb / $__fqa; } for($__fpx=0;$__fpx<$__fqa;$__fpx++){ $__fpr = $__fpy+$__fpx; $__fpt[$__fpr] = $__fps->[$__fpz+$__fpx] - $__fqb; if ($__fpx == 0) { $__fqc = $__fpt[$__fpy]; $__fqd = $__fpt[$__fpy]; } else { if ($__fpt[$__fpr] > $__fqc) { $__fqc = $__fpt[$__fpr]; } if ($__fpt[$__fpr] < $__fqd) { $__fqd = $__fpt[$__fpr]; } } } if ($__fqc > $__fqd) { $__fqe = $__fqe + $__fqc - $__fqd; } } for ($__fpw=0;$__fpw<$__fqf;$__fpw++){ $__fqa = @{$__fpp->[$__fpw]->{'_hf'}}; $__fpy = $__fpq->[$__fpw]; for($__fpx=0;$__fpx<$__fqa;$__fpx++){ if ($__fpx == 0) { $__fqc = $__fpt[$__fpy]; $__fqd = $__fpt[$__fpy]; } else { if ($__fpt[$__fpy+$__fpx] > $__fqc) { $__fqc = $__fpt[$__fpy+$__fpx]; } if ($__fpt[$__fpy+$__fpx] < $__fqd) { $__fqd = $__fpt[$__fpy+$__fpx]; } } } if ($__fqc > $__fqd && $__fqe > 0) { $__fpu[$__fpw] = 100 * ($__fqc - $__fqd) / $__fqe; } else { $__fpu[$__fpw] = 0; } for($__fpx=0; ($__fpx < $__fqa) && ($__fqe > 0); $__fpx++){ $__fpr = $__fpy+$__fpx; if ($__fpt[$__fpr] < 0) { $__fpt[$__fpr] = (abs($__fpt[$__fpr]) * $__fqf * 100 / $__fqe) * -1; } else { $__fpt[$__fpr] = $__fpt[$__fpr] * $__fqf * 100 / $__fqe; } } } $__fpv->{'_asr'}->{'ACAUtil'} = \@__fpt; $__fpv->{'_asr'}->{'ACAImp'} = \@__fpu; $__fpv->{'_asr'}->{'blnNormalizedUtils'} = 1; } } sub _asi { my ($__fqt) = @_; my $__fqg = $__fqt->{'_uf'}; my $__fqh = $__fqg->{'_asv'}; my @__fqi = ('_fn', '_fo', '_mz', '_hd', '_er'); my $__fqj = ""; my $__fqk = ""; foreach $__fqj (@__fqi) { if (exists $__fqg->{$__fqj}) { $__fqk = authlib9_14_2::_acq($__fqg->{$__fqj}->{'_op'}); if ($__fqt->{'_pj'} == &authlib9_14_2::_ANL || $__fqt->{'_pj'} == &authlib9_14_2::_ANM) { my $__fql = $__fqh->{'_ae'}; my $__fqm = $__fqg->{'_asw'}; $__fqk =~ s/\[%ACAATTRIBUTE\(\)%\]/$__fql->[$__fqm - 1]->{'_if'}/sig; if ($__fqt->{'_pj'} == &authlib9_14_2::_ANM) { my $__fqn = $__fqg->{'_asx'}; my $__fqo = $__fqg->{'_asy'}; my $__fqp = $__fql->[$__fqm - 1]->{'_hf'}->[$__fqn - 1]; my $__fqq = $__fql->[$__fqm - 1]->{'_hf'}->[$__fqo - 1]; $__fqk =~ s/\[%ACABEST\(\)%\]/$__fqp/sig; $__fqk =~ s/\[%ACAWORST\(\)%\]/$__fqq/sig; } } elsif ($__fqt->{'_pj'} == &authlib9_14_2::_ANO) { my $__fqr = $__fqg->{'_hx'}; my $__fqs = $__fqg->{'_ho'}; $__fqk =~ s/\[%ACACALMIN\(\)%\]/$__fqr/sig; $__fqk =~ s/\[%ACACALMAX\(\)%\]/$__fqs/sig; } $__fqg->{$__fqj}->{'_op'} = $__fqk; } } } sub _asj { my ($__fri) = @_; my $__fqu = $__fri->{'_if'}; my $__fqv = $__fri->{'_uf'}; my $__fqw = $__fqv->{'_asv'}; my $__fqx = acalib9_14_2::_arq($__fqw, $__fqv); my $__fqy = $__fqv->{'_gx'}; my $__fqz = $__fqv->{'_ir'}; my $__fra = $__fqv->{'_hp'}; my $__frb = 0; my $__frc = 0; my @__frd = (); my $__fre = 0; my $__frf = 0; my $__frg = 0; my @__frh = (); if ($__fqu =~ m/_Calibration(\d+)/) { $__fre = $1; $__fre--; } if ($__fqy == 1) { $__fqz = 1; } for ($__frb = 0; $__frb < $__fqz; $__frb++) { @__frd = (); for ($__frc = 0; $__frc < $__fra; $__frc++) { $__frf = _asf($__fqw, $__fqx, $__fra, $__frc, ($__fre + $__frb)); push @__frd, $__frf; } $__frg = _asd($__fqw, \@__frd); if ($__frg) { last; } if (exists $__fqv->{'_ny'}) { @__frd = sort {$a <=> $b} @__frd; } push @__frh, [@__frd]; } $__fqv->{'_hf'} = \@__frh; return $__frg; } sub _ask { my ($__frs, $__frt, $__fru) = @_; my $__frj = 1; my $__frk = 1; my $__frl = 0; my $__frm = 0; if ($__fru > @{$__frt}) { die("Script is referring to an attribute that is greater than the number of attributes in the study"); } else { $__frm = $__frt->[$__fru - 1]->{'_pj'}; $__frl = @{$__frt->[$__fru - 1]->{'_hf'}}; if ($__frm == 1) { $__frj = $__frl; $__frk = 1; } elsif ($__frm == 2 || $authlib9_14_2::_amg) { $__frj = 1; $__frk = $__frl; } else { my $__frn = 1; my $__fro = 1; my $__frp = 1; my $__frq = 1; my $__frr = ""; for ($__frn = 1; $__frn <= $__frl; $__frn++) { $__frr = $__frs . "_Rating" . $__fru . "_" . $__frn; $__fro = authlib9_14_2::_ws($__frr); if ($__fro) { if ($__frn == 1) { $__frp = $__fro; $__frq = $__fro; } else { if ($__fro > $__frp) { $__frp = $__fro; $__frj = $__frn; } elsif ($__fro <= $__frq) { $__frq = $__fro; $__frk = $__frn; } } } } } } return ($__frj, $__frk); } sub _asl { my ($__fsk, $__fsl) = @_; if (exists $__fsk->{'_mf'}) { my $__frv = $__fsk->{'_mf'}; my $__frw = @{$__fsk->{'_ae'}}; my $__frx = 0; my $__fry = 0; my $__frz = []; my $__fsa = 0; my $__fsb = 0; my $__fsc = 0; my $__fsd = 0; if (exists $__frv->{'_ff'}) { my $__fse = $__frv->{'_ff'}; my $__fsf = 0; ($__fsf, $__frz) = _asm($__fsl); if ($__fsf < $__fse) { $__fry = 1; } } elsif (exists $__frv->{'_nk'}) { $__fsa = 1; $__frz = $__frv->{'_nk'}; for ($__frx = 0; $__frx < $__frw; $__frx++) { $__fsb = $__frz->[$__frx]; if (authlib9_14_2::_abr($__fsb) == 0 || $__fsb < 0) { authlib9_14_2::_acg(&authlib9_14_2::_AOU, 0, "An incorrect value (" . $__fsb . ") was used while setting ACA Importance scores. This score has been set to 0."); $__fsb = 0; $__frz->[$__frx] = $__fsb; } else { $__fsb =~ s/,/\./; } if ($__frx == 0) { $__fsc = $__fsb; $__fsd = $__fsb; } else { if ($__fsb < $__fsc) { $__fsc = $__fsb; } if ($__fsb > $__fsd) { $__fsd = $__fsb; } } } if ($__fsc == $__fsd) { $__fry = 1; } } else { $__fry = 1; } my $__fsg = 0; my $__fsh = 0; my $__fsi = 0; my @__fsj = (); if (!$__fry) { if (@{$__frz} != $__frw) { authlib9_14_2::_zq(145, "ACA error.", "The number of ACAImportance scores generated " . @{$__frz} . " does not match the number of attributes in the study (" . $__frw . ").", ""); } } for ($__frx = 1; $__frx <= $__frw; $__frx++) { if ($__fry) { $__fsi = $__fsk->{'_asq'} / 2; } else { $__fsi = $__frz->[$__frx - 1]; if ($__fsa) { $__fsi = (($__fsi * $__fsk->{'_asq'}) / $__fsd); } } ($__fsg, $__fsh) = _ask($__fsl, $__fsk->{'_ae'}, $__frx); push @__fsj, [$__fsl . "_Importance" . $__frx, $__fsi . "," . $__fsg . "," . $__fsh]; } authlib9_14_2::_xv(\@__fsj, $authlib9_14_2::_akn{"hid_respnum"}, 1, 1); authlib9_14_2::_xj(\@__fsj, $authlib9_14_2::_akn{"hid_respnum"}, 0); } else { authlib9_14_2::_zq(146, "", "Arrived at ACAPair section without any ACAImportance data.", ""); } } sub _asm { my ($__fsr) = @_; my $__fsm = 0; my $__fsn = 0; my $__fso = {}; my $__fsp = ""; eval { $__fsp = "SELECT * FROM `" . $authlib9_14_2::_akj . "_aca_avg_imp` WHERE `exercise_name` = " . $authlib9_14_2::_ake->quote($__fsr); $__fso = $authlib9_14_2::_ake->selectrow_hashref(authlib9_14_2::_wn($__fsp, 0)); }; if (keys %{$__fso}) { $__fsm = $__fso->{"num_respondents"}; my @__fsq = split(/,/, $__fso->{"scores_array"}); $__fsn = \@__fsq; } return($__fsm, $__fsn); } 1;  package acaratlib9_14_2; our @ISA = qw(acalib9_14_2); sub new { my ($__fss) = @_; $__fss->{'_vo'} = "acarating"; bless($__fss); return $__fss; } sub _ve { my ($__fsx) = @_; $__fsx->SUPER::_ve(); my $__fst = $__fsx->{'_if'}; my $__fsu = $__fsx->{'_uf'}; my $__fsv = 0; if ($__fst =~ m/_Rating(\d+)/i) { $__fsv = $1; } my $__fsw = @{$__fsu->{'_asv'}->{'_ae'}->[$__fsv - 1]->{'_hf'}}; $__fsu->{'_asw'} = $__fsv; $__fsu->{'_asz'} = $__fsw; acalib9_14_2::_asi($__fsx); } sub _vf { my ($__ftb) = @_; my $__fsy = ""; my $__fsz = ""; my $__fta = $__ftb->{'_uf'}; if (exists $__fta->{'_hd'}) { $__fsz = ciwlib9_14_2::_tk($__fta->{'_hd'}, 0, 0); if ($__fsz) { $__fsy .= "\n#" . $__ftb->{'_if'} . "_div .row_label_cell {" . $__fsz . "}\n"; } } if (exists $__fta->{'_cc'}) { $__fsy .= "\n#" . $__ftb->{'_if'} . "_div .inner_table .input_cell {padding: " . $__fta->{'_cc'} . "px;}\n"; $__fsy .= "\n#" . $__ftb->{'_if'} . "_div .inner_table .row_label_cell {padding: " . $__fta->{'_cc'} . "px;}\n"; } if (exists $__fta->{'_s'}) { $__fsz = ciwlib9_14_2::_tk($__fta->{'_s'}, 0, 0); if ($__fsz) { $__fsy .= "\n#" . $__ftb->{'_if'} . "_div .anchor_text_cell {" . $__fsz . "}\n"; } } if (exists $__fta->{'_q'}) { if (exists $__fta->{'_q'}->{'_ay'}) { $__fsy .= "\n#" . $__ftb->{'_if'} . "_div .alt_color1 {background-color: #" . $__fta->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__fta->{'_q'}->{'_az'}) { $__fsy .= "\n#" . $__ftb->{'_if'} . "_div .alt_color2 {background-color: #" . $__fta->{'_q'}->{'_az'} . ";}\n"; } } return $__fsy; } sub _vr { my ($__fts, $__ftt, $__ftu, $__ftv, $__ftw) = @_; my $__ftc = ""; my $__ftd = $__fts->{'_if'}; my $__fte = $__fts->{'_uf'}; my $__ftf = $__fte->{'_asv'}; my $__ftg = $__fte->{'_asw'}; my $__fth = $__fte->{'_asz'}; my $__fti = 0; my $__ftj = 0; my $__ftk = ""; my $__ftl = ""; my $__ftm = @{$__fte->{'_s'}->{'_v'}}; my $__ftn = 20; if (exists $__fte->{'_gv'}) { $__ftn = $__fte->{'_gv'}; } if ($__ftm < 2) { $__ftm = 2; } my $__fto = int((100 - $__ftn) / $__ftm); $__ftc .= "<table role=\"table\" class=\"inner_table\" width=\"100%\">\n"; if (exists($__fte->{'_mz'})) { $__ftc .= "<tr><td>&nbsp;</td>"; $__ftc .= "<td class=\"scale_header_cell\" colspan=\"" . $__ftm . "\">"; $__ftc .= "<div class=\"scale_header\" "; $__ftc .= ciwlib9_14_2::_tk($__fte->{'_mz'}, 1, 0); $__ftc .= ">\n" . $__fte->{'_mz'}->{'_op'}; $__ftc .= "</div></td></tr>"; } $__ftc .= "<tr><td>&nbsp;</td>"; for ($__fti = 0; $__fti < $__ftm; $__fti++) { $__ftc .= "<td role=\"columnheader\" width=\"" . $__fto . "%\" class=\"anchor_text_cell\""; if ($__fte->{'_s'}->{'_m'}->[$__fti] ne "") { $__ftc .= " style=\"text-align: " . $__fte->{'_s'}->{'_m'}->[$__fti] . "\""; } $__ftc .= "><div class=\"anchor_text\">\n"; $__ftk = $__fte->{'_s'}->{'_v'}->[$__fti]; if ($__ftk eq "") { $__ftc .= "&nbsp;"; } else { $__ftc .= $__ftk; } $__ftc .= "</div></td>"; } $__ftc .= "</tr>\n"; my $__ftp = 0; my $__ftq = []; my $__ftr = 0; if (exists $__fte->{'_lr'}) { $__ftr = 1; $__ftq = authlib9_14_2::_acn($__ftu, $__fth, 7417); } for ($__fti = 0; $__fti < $__fth; $__fti++) { if ($__ftr) { $__ftp = $__ftq->[$__fti]; } else { $__ftp = $__fti; } $__ftc .= "<tr "; $__ftl = $__ftd . "_" . ($__ftp + 1); $__ftc .= "id=\"" . $__ftl . "_row\""; $__ftc .= " role=\"radiogroup\""; $__ftc .= " class=\"body_row"; if ($__ftw) { $__ftc .= " alt_color1"; } else { $__ftc .= " alt_color2"; } $__ftc .= "\">\n"; $__ftc .= "<td role=\"rowheader\" width=\"" . $__ftn . "%\" class=\"row_label_cell " . $__ftl . "\">"; $__ftc .= "<div class=\"label_text\">\n"; $__ftc .= $__ftf->{'_ae'}->[$__ftg - 1]->{'_hf'}->[$__ftp]; $__ftc .= "</div>\n"; $__ftc .= "</td>\n"; for ($__ftj = 0; $__ftj < $__ftm; $__ftj++) { $__ftc .= "<td class=\"input_cell clickable " . $__ftl . "\">"; $__ftc .= ciwlib9_14_2::_tm($__ftl, $__ftj + 1, 1, $__fte); $__ftc .= "</td>"; } $__ftc .= "</tr>\n"; if ($authlib9_14_2::_ajg) { $__ftc .= "<!--LoadTestMode: <question><name>$__ftl</name><type>acarat</type><min>1</min><max>$__ftm</max></question>-->\n"; } $__ftw = !$__ftw; } $__ftc .= "</table>\n"; $__ftc .= "<input type=\"hidden\" name=\"hid_" . $__ftd . "_levels\" value=\"" . $__fth . "\">\n"; return $__ftc; } sub _vs { my ($__fue, $__fuf, $__fug, $__fuh) = @_; my $__ftx = $__fue->{'_if'}; my $__fty = $__fue->{'_uf'}; my $__ftz = $__fty->{'_asw'}; my $__fua = $__fty->{'_asz'}; my $__fub = 0; my $__fuc = ""; my $__fud = ""; if (exists $__fty->{'_ek'}) { $__fud = $__fty->{'_ek'}; } for ($__fub = 1; $__fub <= $__fua; $__fub++) { $__fuc = "SSI_RadCheck(\"" . $__ftx . "_" . $__fub . "\",\"" . $__ftx . "\",\"" . $__fud . "\"," . $__fuh . ", true)"; push @{$__fuf}, ($__fuc); } $__fug->{'_uu'} = 1; } 1;  package acaimplib9_14_2; our @ISA = qw(acalib9_14_2); sub new { my ($__fui) = @_; $__fui->{'_vo'} = "acaimportance"; bless($__fui); return $__fui; } sub _ve { my ($__fuo) = @_; $__fuo->SUPER::_ve(); my $__fuj = $__fuo->{'_if'}; my $__fuk = $__fuo->{'_uf'}; my $__ful = $__fuk->{'_asv'}; my $__fum = $__ful->{'_ae'}; my $__fun = 0; if ($__fuj =~ m/_Importance(\d+)/i) { $__fun = $1; } my ($__fup, $__fuq) = acalib9_14_2::_ask($__ful->{'_asp'}, $__fum, $__fun); $__fuk->{'_asw'} = $__fun; $__fuk->{'_asx'} = $__fup; $__fuk->{'_asy'} = $__fuq; acalib9_14_2::_asi($__fuo); } sub _vf { my ($__fuu) = @_; my $__fur = ""; my $__fus = ""; my $__fut = $__fuu->{'_uf'}; if (exists $__fut->{'_hd'}) { $__fus = ciwlib9_14_2::_tk($__fut->{'_hd'}, 0, 0); if ($__fus) { $__fur .= "\n#" . $__fuu->{'_if'} . "_div .row_label_cell {" . $__fus . "}\n"; } } if (exists $__fut->{'_s'}) { $__fus = ciwlib9_14_2::_tk($__fut->{'_s'}, 0, 0); if ($__fus) { $__fur .= "\n#" . $__fuu->{'_if'} . "_div .anchor_text_cell {" . $__fus . "}\n"; } } if (exists $__fut->{'_cc'}) { $__fur .= "\n#" . $__fuu->{'_if'} . "_div .inner_table .input_cell {padding: " . $__fut->{'_cc'} . "px;}\n"; $__fur .= "\n#" . $__fuu->{'_if'} . "_div .inner_table .row_label_cell {padding: " . $__fut->{'_cc'} . "px;}\n"; } if (exists $__fut->{'_q'}) { if (exists $__fut->{'_q'}->{'_ay'}) { $__fur .= "\n#" . $__fuu->{'_if'} . "_div .alt_color1 {background-color: #" . $__fut->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__fut->{'_q'}->{'_az'}) { $__fur .= "\n#" . $__fuu->{'_if'} . "_div .alt_color2 {background-color: #" . $__fut->{'_q'}->{'_az'} . ";}\n"; } } return $__fur; } sub _vr { my ($__fvi, $__fvj, $__fvk, $__fvl, $__fvm) = @_; my $__fuv = ""; my $__fuw = $__fvi->{'_uf'}; my $__fux = $__fvi->{'_if'}; my $__fuy = 0; my $__fuz = 0; my $__fva = 0; my $__fvb = 0; my $__fvc = ""; my $__fvd = 0; my $__fve = 0; my $__fvf = @{$__fuw->{'_s'}->{'_v'}}; my $__fvg = 30; if (exists $__fuw->{'_gv'}) { $__fvg = $__fuw->{'_gv'}; } if ($__fvf < 2) { $__fvf = 2; } my $__fvh = int((100 - $__fvg) / $__fvf); $__fuv .= "<table role=\"table\" class=\"inner_table\" width=\"100%\">"; if (exists($__fuw->{'_mz'})) { $__fuv .= "<tr><td>&nbsp;</td>"; $__fuv .= "<td class=\"scale_header_cell\" colspan=\"" . $__fvf . "\">\n"; $__fuv .= "<div class=\"scale_header\" "; $__fuv .= ciwlib9_14_2::_tk($__fuw->{'_mz'}, 1, 0); $__fuv .= ">\n" . $__fuw->{'_mz'}->{'_op'}; $__fuv .= "</div></td></tr>"; } $__fuv .= "<tr><td>&nbsp;</td>"; for ($__fvb = 0; $__fvb < $__fvf; $__fvb++) { $__fuv .= "<td role=\"columnheader\" width=\"" . $__fvh . "%\" class=\"anchor_text_cell\""; if ($__fuw->{'_s'}->{'_m'}->[$__fvb] ne "") { $__fuv .= " style=\"text-align: " . $__fuw->{'_s'}->{'_m'}->[$__fvb] . "\""; } $__fuv .= "><div class=\"anchor_text\">\n"; $__fvc = $__fuw->{'_s'}->{'_v'}->[$__fvb]; if ($__fvc eq "") { $__fuv .= "&nbsp;"; } else { $__fuv .= $__fvc; } $__fuv .= "</div></td>"; } $__fuv .= "</tr>\n"; $__fuv .= "<tr role=\"radiogroup\" class=\"body_row"; if ($__fvm == 1) { $__fuv .= " alt_color1"; } else { $__fuv .= " alt_color2"; } $__fuv .= "\">\n"; $__fuv .= "<td role=\"rowheader\" width=\"" . $__fvg . "%\" class=\"row_label_cell\">"; $__fuv .= "<div class=\"label_text\">\n"; $__fuv .= $__fuw->{'_hd'}->{'_op'}; $__fuv .= "</div>\n"; $__fuv .= "</td>\n"; for ($__fvb = 0; $__fvb < $__fvf; $__fvb++) { $__fuv .= "<td class=\"input_cell clickable\">"; $__fuv .= ciwlib9_14_2::_tm($__fux, $__fvb + 1, 1, $__fuw); $__fuv .= "</td>\n"; } $__fuv .= "</tr>\n"; $__fuv .= "</table>\n"; $__fuv .= "<input type=\"hidden\" name=\"hid_" . $__fux . "\" value=\"" . $__fuw->{'_asx'} . "," . $__fuw->{'_asy'} . "\">\n"; if ($authlib9_14_2::_ajg) { $__fuv .= "<!--LoadTestMode: <question><name>$__fux</name><type>acaimp</type><min>1</min><max>$__fvf</max></question>-->\n"; } return $__fuv; } sub _vs { my ($__fvr, $__fvs, $__fvt, $__fvu) = @_; my $__fvn = $__fvr->{'_if'}; my $__fvo = $__fvr->{'_uf'}; my $__fvp = ""; if (exists $__fvo->{'_ek'}) { $__fvp = $__fvo->{'_ek'}; } my $__fvq = "SSI_RadCheck(\"" . $__fvn . "\",\"" . $__fvn . "\",\"" . $__fvp . "\"," . $__fvu . ", true)"; push @{$__fvs}, ($__fvq); $__fvt->{'_uu'} = 1; } 1;  package acaparlib9_14_2; our @ISA = qw(acalib9_14_2); sub new { my ($__fvv) = @_; $__fvv->{'_vo'} = "acapair"; bless($__fvv); return $__fvv; } sub _ve { my ($__fwb) = @_; $__fwb->SUPER::_ve(); my $__fvw = $__fwb->{'_if'}; my $__fvx = ""; my $__fvy = $__fwb->{'_uf'}; my $__fvz = 0; if ($__fvw =~ m/(.*?)_Pair(\d+)/) { $__fvx = $1; $__fvz = $2; } my $__fwa = $__fvy->{'_asv'}; if ((authlib9_14_2::_ws($__fvx . "_Importance1") eq "") && !$authlib9_14_2::_amg) { acalib9_14_2::_asl($__fwa, $__fvx); } acalib9_14_2::_aro($__fwa, $__fvz, $__fvy); } sub _vf { my ($__fwg) = @_; my $__fwc = ""; my $__fwd = ""; my $__fwe = $__fwg->{'_uf'}; if (exists $__fwe->{'_hd'}) { if (exists $__fwe->{'_hd'}->{'_et'}) { my $__fwf = $__fwe->{'_hd'}->{'_et'}; if (exists $__fwf->{'_m'}) { if ($__fwf->{'_m'} eq "left - right") { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .left_concept {text-align: left;}\n"; $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .right_concept {text-align: right;}\n"; } } } $__fwd = ciwlib9_14_2::_tk($__fwe->{'_hd'}, 0, 0); if ($__fwd) { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .level_text {" . $__fwd . "}\n"; } } if (exists $__fwe->{'_s'}) { $__fwd = ciwlib9_14_2::_tk($__fwe->{'_s'}, 0, 0); if ($__fwd) { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .options {" . $__fwd . "}\n"; } } if (exists $__fwe->{'_cc'}) { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .inner_table .level_text_cell {padding: " . $__fwe->{'_cc'} . "px;}\n"; } if (exists $__fwe->{'_q'}) { if (exists $__fwe->{'_q'}->{'_ay'}) { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .alt_color1 {background-color: #" . $__fwe->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__fwe->{'_q'}->{'_az'}) { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .alt_color2 {background-color: #" . $__fwe->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__fwe->{'_bg'}) { $__fwc .= "\n#" . $__fwg->{'_if'} . "_div .level_text_cell{border-width: " . $__fwe->{'_bg'} . "px; border-style: solid;}\n"; } return $__fwc; } sub _vr { my ($__fxf, $__fxg, $__fxh, $__fxi, $__fxj) = @_; my $__fwh = ""; my $__fwi = $__fxf->{'_if'}; my $__fwj = $__fxf->{'_uf'}; my $__fwk = $__fwj->{'_asv'}; my $__fwl = 0; my ($__fxk, $__fxl) = (0) x 2; my $__fwm = ""; my $__fwn = ""; my $__fwo = 0; my $__fwp = 0; my $__fwq = @{$__fwj->{'_s'}->{'_v'}}; my $__fwr = $__fwj->{'_s'}->{'_m'}; my $__fws = ""; my $__fwt = 50; my $__fwu = 0; my $__fwv = 0; my $__fww = "alt_color1"; my $__fwx = "alt_color2"; if ($__fxj == 0) { $__fww = "alt_color2"; $__fwx = "alt_color1"; } if ($__fwi =~ m/_Pair(\d+)/i) { $__fwo = $1; $__fwo--; } $__fwl = $__fwj->{'_ah'} + int ($__fwo / $__fwj->{'_jp'}); if ($__fwl > $__fwj->{'_ai'}) { $__fwl = $__fwj->{'_ai'}; } my $__fwy = acalib9_14_2::_arx($__fwk, $__fwl, $__fwo, $__fwj->{'_hp'}); my $__fwz = @{$__fwy}; my @__fxa = (); for ($__fxl = 0; $__fxl < $__fwz; $__fxl += 2) { push @__fxa, [$__fwy->[$__fxl], $__fwy->[$__fxl + 1]]; } if (exists $__fwj->{'_ny'}) { @__fxa = sort {$a->[0] <=> $b->[0]} @__fxa; } my $__fxb = @__fxa; my $__fxc = ""; my $__fxd = ""; my $__fxe = ""; for ($__fxl = 0; $__fxl < $__fxb; $__fxl++) { $__fxc .= "-" . ($__fxa[$__fxl]->[0] + 1) . ","; $__fxd .= ($__fxa[$__fxl]->[1] + 1) . ","; } chop $__fxd; $__fxe = $__fxc . $__fxd; $__fwh .= "<input type=\"hidden\" name=\"hid_" . $__fwi . "\" value=\"" . $__fxe . "\">\n"; $__fwh .= "<div class=\"acapair_row\">\n"; $__fwh .= "<div class=\"level_text_div left_concept " . $__fww . "\">\n"; for ($__fxl = 0; $__fxl < $__fwl; $__fxl++) { $__fwh .= "<div class=\"level_text\">\n"; $__fwh .= $__fwk->{'_ast'}->[$__fxa[$__fxl]->[0]]; $__fwh .= "</div>"; } $__fwh .= "</div>\n"; if (exists($__fwj->{'_je'})) { $__fwh .= "<div class=\"or_header "; $__fwh .= ciwlib9_14_2::_tk($__fwj->{'_je'}, 1, 0); $__fwh .= "\">\n"; $__fwh .= $__fwj->{'_je'}->{'_op'}; $__fwh .= "</div>"; } $__fwh .= "<div class=\"level_text_div right_concept " . $__fwx . "\">\n"; for ($__fxl = 0; $__fxl < $__fwl; $__fxl++) { $__fwh .= "<div class=\"level_text\">\n"; $__fwh .= $__fwk->{'_ast'}->[$__fxa[$__fxl]->[1]]; $__fwh .= "</div>"; } $__fwh .= "</div>\n"; $__fwh .= "</div>\n"; $__fwh .= "<div role=\"radiogroup\" class=\"acapair_options\">"; for ($__fxl = 0; $__fxl < $__fwq; $__fxl++) { $__fwh .= "<div class=\"option_div\">"; $__fwh .= "<div class=\"options\">\n"; $__fwh .= "<label for=\"" . $__fwi . "_" . ($__fxl + 1) . "\">\n"; $__fwh .= $__fwj->{'_s'}->{'_v'}->[$__fxl]; $__fwh .= "</label></div>\n"; $__fwh .= "<div class=\"clickable input_cell\">" . ciwlib9_14_2::_tm($__fwi, $__fxl + 1, 1, $__fwj) . "</div>"; $__fwh .= "</div>"; } $__fwh .= "</div>"; if ($authlib9_14_2::_ajg) { $__fwh .= "<!--LoadTestMode: <question><name>$__fwi</name><type>acapar</type><min>1</min><max>$__fwq</max></question>-->\n"; } return $__fwh; } sub _vs { my ($__fxq, $__fxr, $__fxs, $__fxt) = @_; my $__fxm = $__fxq->{'_if'}; my $__fxn = $__fxq->{'_uf'}; my $__fxo = ""; if (exists $__fxn->{'_ek'}) { $__fxo = $__fxn->{'_ek'}; } my $__fxp = "SSI_RadCheck(\"" . $__fxm . "\",\"" . $__fxm . "\", \"" . $__fxo . "\"," . $__fxt . ", true)"; push @{$__fxr}, ($__fxp); $__fxs->{'_uu'} = 1; } 1;  package acacallib9_14_2; our @ISA = qw(acalib9_14_2); sub new { my ($__fxu) = @_; $__fxu->{'_vo'} = "acacalibration"; bless($__fxu); return $__fxu; } sub _ve { my ($__fxz) = @_; $__fxz->SUPER::_ve(); my $__fxv = acalib9_14_2::_asj($__fxz); if ($__fxv) { $__fxz->{'_uk'} = 1; } my $__fxw = $__fxz->{'_uf'}->{'_gx'}; if ($__fxw == 2) { my $__fxx = $__fxz->{'_if'}; my $__fxy = 0; if ($__fxx =~ m/_Calibration(\d)/i) { $__fxy = $1; } if ($__fxy > 1) { $__fxz->{'_uk'} = 1; } } acalib9_14_2::_asi($__fxz); } sub _vf { my ($__fyd) = @_; my $__fya = ""; my $__fyb = ""; my $__fyc = $__fyd->{'_uf'}; if (exists $__fyc->{'_hd'}) { $__fyb = ciwlib9_14_2::_tk($__fyc->{'_hd'}, 0, 0); if ($__fyb) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .level_text_cell {" . $__fyb . "}\n"; } } if (exists $__fyc->{'_q'}) { if (exists $__fyc->{'_q'}->{'_ay'}) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .alt_color1 {background-color: #" . $__fyc->{'_q'}->{'_ay'} . ";}\n"; } if (exists $__fyc->{'_q'}->{'_az'}) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .alt_color2 {background-color: #" . $__fyc->{'_q'}->{'_az'} . ";}\n"; } } if (exists $__fyc->{'_bg'}) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .inner_table td{border-width: " . $__fyc->{'_bg'} . "px; border-style: solid;}\n"; } if (exists $__fyc->{'_cc'}) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .inner_table .level_text_cell {padding: " . $__fyc->{'_cc'} . "px;}\n"; } if (exists $__fyc->{'_og'}) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .inner_table {" . ciwlib9_14_2::_tl($__fyc->{'_og'}) . "}\n"; } if (exists $__fyc->{'_om'}) { $__fya .= "\n#" . $__fyd->{'_if'} . "_div .inner_table {width: " . $__fyc->{'_om'} . "px;}\n"; } return $__fya; } sub _vr { my ($__fyv, $__fyw, $__fyx, $__fyy, $__fyz) = @_; my $__fye = ""; my $__fyf = $__fyv->{'_if'}; my $__fyg = $__fyv->{'_uf'}; my $__fyh = $__fyg->{'_asv'}; my $__fyi = 0; my $__fyj = 0; my $__fyk = $__fyg->{'_ir'}; my $__fyl = ""; my $__fym = 0; my $__fyn = 0; my $__fyo = ""; my $__fyp = $__fyg->{'_gx'}; my $__fyq = $__fyg->{'_hp'}; my $__fyr = 0; my $__fys = $__fyg->{'_hx'}; my $__fyt = $__fyg->{'_ho'}; $__fym = length(authlib9_14_2::_zo($__fys)); $__fyn = length(authlib9_14_2::_zo($__fyt)); if ($__fyn > $__fym) { $__fym = $__fyn; } if ($__fyp == 1) { $__fyk = 1; } $__fye .= "<table class=\"inner_table"; if ($__fyk == 1) { $__fye .= " single_concept"; } $__fye .= "\" width=\"100%\">"; $__fyr = int(100 / $__fyk); my $__fyu = ""; for ($__fyi = 0; $__fyi <= $__fyq; $__fyi++) { $__fye .= "<tr>"; for ($__fyj = 0; $__fyj < $__fyk; $__fyj++) { $__fye .= "<td class=\""; if ($__fyi == $__fyq) { $__fye .= "input_row"; } else { $__fye .= "level_text_cell"; } if ($__fyz) { $__fye .= " alt_color1"; } else { $__fye .= " alt_color2"; } $__fye .= "\""; if (exists $__fyg->{'_ga'} && $__fyi == $__fyq) { $__fye .= " style=\"text-align: " . $__fyg->{'_ga'} . "\""; } $__fye .= " width=\"" . $__fyr . "%\">"; if ($__fyi == $__fyq) { $__fyl = $__fyf; if ($__fyj > 0) { if ($__fyf =~ m/(.*?_Calibration)/i) { $__fyl = $1 . ($__fyj + 1); } } if (exists $authlib9_14_2::_akn{"hid_test_mode"} && $__fyp == 2) { $__fye .= ciwlib9_14_2::_td($__fyl, 0, 1); } $__fye .= "<input type=\"tel\" class=\"numeric_input\" name=\"" . $__fyl . "\""; if (exists $__fyg->{'_ug'}) { $__fye .= " value=\"" . $__fyg->{'_ug'}->{$__fyl} . "\""; } $__fyu = join(",", map{$_ + 1} @{$__fyg->{'_hf'}->[$__fyj]}); $__fye .= " size=\"" . $__fym . "\" id=\"" . $__fyl . "_input\">\n"; $__fye .= "<input type=\"hidden\" name=\"hid_" . $__fyl . "\" value=\"" . $__fyu . "\">\n"; if ($authlib9_14_2::_ajg) { $__fye .= "<!--LoadTestMode: <question><name>$__fyl</name><type>acacal</type><min>" . $__fys . "</min><max>" . $__fyt . "</max></question>-->\n"; } } else { $__fye .= "<div class=\"level_text\">\n"; $__fye .= $__fyh->{'_ast'}->[$__fyg->{'_hf'}->[$__fyj][$__fyi]]; $__fye .= "</div>\n"; } $__fye .= "</td>"; if ($__fyp == 2) { $__fyz = !$__fyz; } } if (($__fyp == 2) && ($__fyk % 2)) { $__fyz = !$__fyz; } $__fye .= "</tr>"; } $__fye .= "</table>\n"; return $__fye; } sub _vs { my ($__fzj, $__fzk, $__fzl, $__fzm) = @_; my $__fza = 0; my $__fzb = $__fzj->{'_if'}; my $__fzc = $__fzj->{'_uf'}; my $__fzd = $__fzc->{'_ir'}; my $__fze = $__fzc->{'_gx'}; my $__fzf = ""; my $__fzg = ""; my $__fzh = ""; my $__fzi = ""; if (exists $__fzc->{'_ek'}) { $__fzi = $__fzc->{'_ek'}; } if ($__fzb =~ m/(.*?_Calibration)/i) { $__fzf = $1; } if ($__fze == 1) { $__fzd = 1; } authlib9_14_2::_adt($__fzc); for ($__fza = 1; $__fza <= $__fzd; $__fza++) { if ($__fze == 2) { $__fzh = $__fzf . $__fza; } else { $__fzh = $__fzb; } $__fzg = "SSI_NumCheck(\"" . $__fzh . "\",\"" . $__fzb . "\",\"" . $__fzi . "\", " . $__fzm . ", true" . ", " . $__fzc->{'_hx'} . ", " . $__fzc->{'_ho'} . ", \"\", false)"; push @{$__fzk}, ($__fzg); } $__fzl->{'_uw'} = 1; } 1;
