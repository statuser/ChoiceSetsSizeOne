# ---------------------------------------------------------------------------
#     CBCLIB.PL
#
#      Ver: 9_14_2
# ---------------------------------------------------------------------------
# Lighthouse Studio - Web Surveying System
# Copyright Sawtooth Software, Inc. 1998-2022. All rights reserved.
# Provo, UT  USA  (801) 477-4700
#
# Any modification of this script will be considered violation of
# copyright (with the exception of the first line which can be
# modified to reflect the correct path to the Perl interpreter)
#
# Any use of this script or its code for purposes outside of
# the systems created by Sawtooth Software is prohibited.
# ---------------------------------------------------------------------------
 use strict; package cbclib9_14_2; our @ISA = qw(questionlib9_14_2); use constant _BBK => 0; use constant _BBL => 1; use constant _BBM => 2; use constant _BBN => 3; use constant _BBO => 4; use constant _BBP => 5; use constant _BBQ => 6; use constant _BBR => 2; use constant _BBS => 1; use constant _BBT => 2; use constant NONE_AS_CONCEPT=> 2; use constant _BBU => 1; use constant _BBV => 3; use constant _BBW => 1; use constant _BBX => 2; sub new { my ($__fzn) = @_; $__fzn->{'_vo'} = "cbc"; bless($__fzn); return $__fzn; } sub _ata { $cbclib9_14_2::_azt = 0; $cbclib9_14_2::_azu = 0; } sub _ve { my ($__gad, $__gae) = @_; if ($__gae) { $__gad->SUPER::_ve($__gae); } else { $__gad->SUPER::_ve(); my $__fzo = $authlib9_14_2::_akn{"hid_respnum"}; my $__fzp = $__gad->{'_uf'}; my $__fzq = $__gad->{'_if'}; my $__fzr = _ayy($__gad, $__fzq); if ($__fzr) { $__fzp->{'_azv'} = $__fzr; } my $__fzs = 0; my $__fzt = 0; my $__fzu = 0; my $__fzv = ""; my $__fzw = 0; my $__fzx = 0; if (exists $__fzp->{'_dj'}) { my $__fzy = substr($__fzq, 0, index($__fzq, '_')); my $__fzz = 'sys_CBC_' . $__fzy . '_design'; my $__gaa = authlib9_14_2::_ws($__fzz); my $__gab = 0; if ($__gaa) { $__gab = eval($__gaa); if ($@) { authlib9_14_2::_zq(295, "", "Reading CBC saved design error.", $@); } } else { $__gab = _azb($__fzy, $__fzp); if ($__gab && !$authlib9_14_2::_amg) { my @__gac = (); push @__gac, [$__fzz, authlib9_14_2::_wz($__gab)]; push @__gac, [$__fzz . "_info", _azd($__fzp)]; authlib9_14_2::_xv(\@__gac, $authlib9_14_2::_akn{"hid_respnum"}, 1, 1); authlib9_14_2::_xj(\@__gac, $authlib9_14_2::_akn{"hid_respnum"}, 0); } } ($__fzs, $__fzt, $__fzu, $__fzv, $__fzw, $__fzx) = _aze($__fzp, $__fzo, $__fzq, 0, $__gab); } else { ($__fzs, $__fzt, $__fzu, $__fzv, $__fzw, $__fzx) = _aze($__fzp, $__fzo, $__fzq, 0, 0); } $__fzp->{'_azw'} = $__fzs; $__fzp->{'_azx'} = $__fzt; $__fzp->{'_azy'} = $__fzu; $__fzp->{'_azz'} = $__fzv; $__fzp->{'_baa'} = $__fzw; $__fzp->{'_bab'} = $__fzx; } } sub _vn { my ($__gag, $__gah, $__gai) = @_; my $__gaf = $__gag->SUPER::_vn($__gah, $__gai); $__gaf = $__gag->_azk($__gag->{'_uf'}, $__gag->{'_if'}, $__gag->{'_uf'}->{'_azx'}, $__gaf); return $__gaf; } sub _atb { my ($__gaj) = @_; return $__gaj->{'_uf'}->{'cbc_seed'}; } sub _atc { my ($__gak, $__gal) = @_; $__gak->{'_uf'}->{'cbc_seed'} = $__gal; } sub _atd { my ($__gan) = @_; my $__gam = $__gan->{'_uf'}->{'_cx'}; return $__gam; } sub _ate { my ($__gao) = @_; return $__gao->{'_if'}; } sub _atf { my ($__gap) = @_; return $__gap->{'_uf'}->{'_cv'}; } sub _atg { my ($__gaq) = @_; return $__gaq->{'_uf'}->{'_hv'}; } sub _ath { my ($__gar, $__gas) = @_; return $__gar->{'_uf'}->{'_azw'}->[$__gas]; } sub _ati { my ($__gat) = @_; return scalar @{$__gat->{'_uf'}->{'_ae'}}; } sub _atj { my ($__gau) = @_; return exists $__gau->_atl()->{'_mj'}; } sub _atk { my ($__gav, $__gaw) = @_; return $__gav->{'_uf'}->{'_ct'}->{'_gw'}->[$__gaw]; } sub _atl { my ($__gax) = @_; return $__gax->{'_uf'}->{'_ct'}; } sub _atm { my ($__gay) = @_; return $__gay->{'_uf'}->{'_dd'}->{'_pa'} } sub _atn { my ($__gaz) = @_; return $__gaz->{'_uf'}->{'_dd'}->{'_bl'} } sub _ato { my ($__gba) = @_; return $__gba->{'_uf'}->{'_baa'} } sub _atp { my ($__gbb) = @_; return $__gbb->{'_uf'}->{'_bab'} } sub _atq { my ($__gbc) = @_; return $__gbc->{'_uf'}->{'_azy'}; } sub _atr { my ($__gbd, $__gbe) = @_; return $__gbd->{'_uf'}->{'_ae'}->[$__gbe]; } sub _ats { my ($__gbg, $__gbh) = @_; my $__gbf = $__gbg->_atr($__gbh); return $__gbf->{'_if'}; } sub _att { my ($__gbi) = @_; return $__gbi->{'_uf'}->{'_aw'}; } sub _atu { my ($__gbj) = @_; return $__gbj->{'_uf'}->{'_df'}; } sub _atv { my ($__gbm) = @_; my $__gbk = $__gbm->_atq(); my $__gbl = $__gbm->_ath($__gbk); return $__gbl; } sub _atw { my ($__gbn) = @_; return $__gbn->{'_uf'}->{'_cv'}; } sub _atx { my ($__gbo) = @_; return $__gbo->{'_uf'}->{'_ph'}; } sub _aty { my ($__gbp) = @_; return $__gbp->{'_uf'}->{'_eh'}; } sub _atz { my ($__gbq) = @_; return $__gbq->_atw() + 1; } sub _aua { my ($__gbr) = @_; return $__gbr->_aub() || $__gbr->_auc(); } sub _aub { my ($__gbs) = @_; return $__gbs->{'_uf'}->{'_z'} == &cbclib9_14_2::_BBS; } sub _auc { my ($__gbt) = @_; return $__gbt->{'_uf'}->{'_z'} == &cbclib9_14_2::_BBR; } sub _aud { my ($__gbu) = @_; return $__gbu->{'_uf'}->{'_z'} == &cbclib9_14_2::_BBT; } sub _aue { my ($__gbx) = @_; my $__gbv = 0; my $__gbw = $__gbx->_atx(); if ($__gbw && $__gbw->{'_jx'} == &cbclib9_14_2::NONE_AS_CONCEPT) { $__gbv = 1; } return $__gbv; } sub _auf { my ($__gby) = @_; return exists($__gby->{'_uf'}->{'_hv'}); } sub _aug { my ($__gbz) = @_; return exists($__gbz->{'_uf'}->{'_ct'}); } sub _auh { my ($__gca) = @_; return exists($__gca->{'_uf'}->{'_dd'}); } sub _aui { my ($__gcb) = @_; return ($__gcb->_auh() && exists($__gcb->{'_uf'}->{'_dd'}->{'_pa'})); } sub _auj { my ($__gcc) = @_; return ($__gcc->_auh() && exists($__gcc->{'_uf'}->{'_dd'}->{'_bl'})); } sub _auk { my ($__gcd) = @_; return exists $__gcd->{'_uf'}->{'_pq'}; } sub _aul { my ($__gcg) = @_; my $__gce = 0; if ($__gcg->_aun()) { my $__gcf = $__gcg->_att(); $__gce = exists $__gcf->{'_po'}; } return $__gce; } sub _aum { my ($__gch) = @_; return (exists $__gch->{'_uf'}->{'_df'}); } sub _aun { my ($__gci) = @_; return exists $__gci->{'_uf'}->{'_aw'}; } sub _auo { my ($__gcj) = @_; return exists $__gcj->{'_uf'}->{'_nl'}; } sub _aup { my ($__gck) = @_; return $__gck->{'_uf'}->{'_gx'} == &cbclib9_14_2::_BBK; } sub _auq { my ($__gcl) = @_; return $__gcl->{'_uf'}->{'_gx'} == &cbclib9_14_2::_BBM; } sub _aur { my ($__gcm) = @_; return $__gcm->{'_uf'}->{'_gx'} == &cbclib9_14_2::_BBL; } sub _aus { my ($__gcp) = @_; my $__gcn = 0; my $__gco = 0; if ($__gcp->_auh()) { if ($__gcp->_aui()) { $__gcn = _aza($__gcp->_atm(), $__gcp->_ato()); } if ($__gcp->_auj()) { $__gco = _aza($__gcp->_atn(), $__gcp->_atp()); } } return ($__gcn, $__gco); } sub _atv { my ($__gcs) = @_; my $__gcq = $__gcs->_atq(); my $__gcr; if ($__gcq >= 0) { $__gcr = $__gcs->_ath($__gcq); } return $__gcr; } sub _aut { my ($__gct, $__gcu, $__gcv) = @_; return $__gcv eq "C-$__gcu"; } sub _auu { my ($__gdb, $__gdc) = @_; my $__gcw = 0; my $__gcx = $__gdb->_atv(); my $__gcy = $__gdb->_ava(); for (my $__gcz=0; $__gcz < $__gcy; $__gcz++) { my $__gda = $__gcx->{'_bac'}->[$__gcz]->[0]; if ($__gdc == $__gda || $__gdb->_aut($__gdc, $__gda)) { $__gcw = 1; last; } } return $__gcw; } sub _auv { my ($__gdg, $__gdh) = @_; my $__gdd = $__gdh->{'_mk'} - 1; if (!$__gdg->_auu($__gdd)) { foreach my $__gde (@{$__gdh->{'_ae'}}) { my $__gdf = $__gde -1; if ($__gdg->_auu($__gdf)) { $__gdd = $__gdf; $__gdh->{'_mk'} = $__gdd + 1; last; } else { $__gdd = -1; } } } return $__gdd; } sub _auw { my ($__gdp) = @_; my $__gdi = {}; my $__gdj = {}; my $__gdk = {}; if ($__gdp->_auf()) { my $__gdl = $__gdp->_atg(); my $__gdm = 0; my $__gdn = -1; foreach $__gdm (@{$__gdl}) { $__gdn = $__gdp->_auv($__gdm); if ($__gdn >= 0) { $__gdi->{$__gdn} = []; if (exists $__gdm->{'_es'}) { $__gdk->{$__gdn} = $__gdm->{'_es'}; } else { $__gdk->{$__gdn} = "commas"; } foreach my $__gdo (@{$__gdm->{'_ae'}}) { $__gdj->{$__gdo -1 } = $__gdn; } } } } else { $__gdi = 0; $__gdj = 0; $__gdk = 0; } return ($__gdi, $__gdj, $__gdk); } sub _aux { my ($__gdx, $__gdy, $__gdz, $__gea) = @_; my $__gdq = 0; my $__gdr = 0; my $__gds = {}; while ($__gdq < _ayw($__gdy)) { my $__gdt = $__gdy->{'_hf'}->[$__gdq]; my $__gdu = $__gdt->{'_bad'}; $__gdt->{'_jx'} = $__gdq; if (_ayv($__gdz, $__gdu)) { $__gdt->{'_bae'} = $__gdz->{$__gdu}; $__gdt->{'_baf'} = 1; $__gdt->{'_bag'} = $__gea->{$__gdu}; $__gds->{int($__gdu)} = 1; } if (exists $__gdt->{'_bah'}) { _ayx($__gdy, $__gdq); } else { $__gdq++; } } foreach my $__gdv (keys %{$__gdz}) { if (!exists $__gds->{$__gdv}) { my $__gdw = {}; $__gdw->{'_bad'} = $__gdv; $__gdw->{'_bah'} = 1; $__gdw->{'_jx'} = _ayw($__gdy); $__gdw->{'_baf'} = 1; $__gdw->{'_bae'} = $__gdz->{$__gdv}; $__gdw->{'_bag'} = $__gea->{$__gdv}; push(@{$__gdy->{'_hf'}}, $__gdw); } } } sub _auy { my ($__gef, $__geg) = @_; my $__geb = ""; if ($__gef->_auf()) { my $__gec = $__gef->_atg(); my $__ged = 0; my $__gee = -1; foreach $__ged (@{$__gec}) { if ($__ged->{'_mk'} -1 == $__geg) { $__geb = $__ged->{'_gr'}; last; } } } return $__geb; } sub _auz { my ($__gei, $__gej, $__gek) = @_; my $__geh = ""; if (_ayr($__gej)) { $__geh = $__gek; } else { if ($__gek != 255 && $__gek ne "") { $__geh = $__gei->{'_uf'}->{'_ae'}->[$__gej]->{'_hf'}->[$__gek]; } } return $__geh; } sub _ava { my ($__gem) = @_; my $__gel = $__gem->_atv(); return scalar @{ $__gel->{'_bac'} }; } sub _avb { my ($__geo, $__gep) = @_; my $__gen = -1; $__gen = substr $__gep, 2; return $__gen; } sub _avc { my ($__gfb, $__gfc) = @_; my $__geq = {}; my $__ger = $__gfb->_ath($__gfc); my $__ges = $__gfb->_avu($__ger); my @__get; my $__geu = -1; my $__gev = -1; my $__gew = 0; my $__gex; my ($__gfd, $__gfe, $__gff) = $__gfb->_auw(); for ($__gew = 0; $__gew < $__gfb->_ava(); $__gew++) { my $__gey = {}; my $__gez = scalar @{ $__ger->{'_bac'} }; if ($__gew >= $__gez || scalar @{ $__ger->{'_bac'}->[$__gew] } == 0) { $__geu = $__gev = -1; $__gex = ""; } else { $__geu = $__ger->{'_bac'}->[$__gew]->[0]; $__gev = $__ger->{'_bac'}->[$__gew]->[1]; $__gex = $__gfb->_auz($__geu, $__gev); } if (_ayr($__geu)) { $__geu = $__gfb->_avb($__geu); } $__gey->{'_bad'} = $__geu; $__gey->{'_bai'} = $__gev; $__gey->{'_bae'} = $__gex; $__gey->{'_jx'} = $__gew; if ($__gfb->_auf()) { if (exists $__gfe->{$__geu}) { my $__gfa = $__gfe->{$__geu}; if ($__gex ne "") { push(@{$__gfd->{$__gfa}}, $__gex); } if (_ayu($__gfd, $__gfe, $__geu)) { $__gey->{'_bah'} = 1; } } } push(@__get, $__gey); } $__geq->{'_hf'} = \@__get; $__geq->{'_baj'} = $__ges; $__geq->{'_pt'} = $__ger->{'_pt'}; if ($__gfb->_aug()) { $__geq->{'_bak'} = $__gfb->_atk($__gfc); if ($__gfb->_atj()) { $__geq->{'_bal'} = 1; } } if ($__gfb->_auf()) { $__gfb->_aux($__geq, $__gfd, $__gff); } return $__geq; } sub _avd { my ($__gfl) = @_; my @__gfg = (); my $__gfh = $__gfl->_atf(); my $__gfi = $__gfl->_avf(); for (my $__gfj = 0; $__gfj < $__gfh; $__gfj++) { my $__gfk = $__gfl->_avc($__gfj); push(@__gfg, $__gfk); } return \@__gfg; } sub _ave { my ($__gfo, $__gfp) = @_; my $__gfm = $__gfo->_atv(); my $__gfn = $__gfm->{'_bac'}->[$__gfp]->[0]; return $__gfn; } sub _avf { my ($__gfw) = @_; my $__gfq = $__gfw->_ava(); my $__gfr = ""; my ($__gfx, $__gfy) = $__gfw->_aus(); my $__gfs = 0; my @__gft = (); my @__gfu = (); my $__gfv = 0; my ($__gfz, $__gga, $__ggb) = $__gfw->_auw(); for ($__gfv = 0; $__gfv < $__gfq; $__gfv++) { $__gfr = ""; $__gfs = $__gfw->_ave($__gfv); if ($__gfs eq "C-T") { if ($__gfx != 0 && @{$__gfx}) { $__gfr = shift @{$__gfx}; } } elsif ($__gfs eq "C-B") { if ($__gfy != 0 && @{$__gfy}) { $__gfr = shift @{$__gfy}; } } else { if ($__gfs =~ m/^C-(\d+)/i) { $__gfs = $1; } if (_ayv($__gfz, $__gfs)) { $__gfr = $__gfw->_auy($__gfs); } else { $__gfr = $__gfw->_ats($__gfs); } } $__gfr = authlib9_14_2::_zw($__gfr, 0); if (!_ayu($__gfz, $__gga, $__gfs)) { push @__gft, $__gfr; push @__gfu, $__gfs; } } return (\@__gft, \@__gfu); } sub _avg { my ($__ggd) = @_; my $__ggc = $__ggd->_ate(); return $__ggc . "_b"; } sub _avh { my ($__ggf) = @_; my $__gge = $__ggf->_ate(); return $__gge . "_w"; } sub _avi { my ($__ggo, $__ggp) = @_; my $__ggg = $__ggo->_att(); my $__ggh = {}; my $__ggi = $__ggo->_avg(); my $__ggj = $__ggo->_avh(); my $__ggk = $__ggp->{'_pt'}; my $__ggl = 0; my $__ggm = $__ggg->{'_at'}->{'_op'}; my $__ggn = $__ggg->{'_qb'}->{'_op'}; $__ggh->{'_bam'} = "best worst"; $__ggh->{'_ban'} = {'_if' => $__ggi, '_pt' => $__ggk, '_op'=> $__ggm}; $__ggh->{'_bao'} = {'_if' => $__ggj, '_pt' => $__ggk, '_op' => $__ggn}; if ($__ggo->_aul()) { $__ggh->{'_ban'}->{'_bap'} = 1; $__ggh->{'_bao'}->{'_bap'} = 1; } return $__ggh; } sub _avj { my ($__ggr) = @_; my $__ggq = $__ggr->_atu(); return exists $__ggq->{'_gy'}; } sub _avk { my ($__ggt) = @_; my $__ggs = $__ggt->_atu(); return exists $__ggs->{'_mq'}; } sub _avl() { my ($__ggt) = @_; return $__ggt->_atu()->{'_gy'}; } sub _avm { my ($__ggu) = @_; return exists $__ggu->_atu()->{'_dq'}; } sub _avn() { my ($__ggu) = @_; return $__ggu->_atu()->{'_mq'}; } sub _avo() { my ($__ggu) = @_; return $__ggu->_atu()->{'_ge'}; } sub _avp { my ($__ghb, $__ghc) = @_; my $__ggv = {}; my $__ggw = $__ghb->_ate() . "_" . $__ghc->{'_pt'}; my $__ggx = $__ghb->_avo(); my $__ggy = ""; my $__ggz = ""; if ($__ghb->_avj()) { $__ggy = $__ghb->_avl(); } if ($__ghb->_avk()) { $__ggz = $__ghb->_avn(); } if ($__ghb->_avm()) { $__ggv->{'_dq'} = 1; } $__ggv->{'_if'} = $__ggw; $__ggv->{'_gy'} = $__ggy; $__ggv->{'_mq'} = $__ggz; $__ggv->{'_px'} = $__ggx; if ($__ghb->_ayl()) { my $__gha = $__ghb->_ayj($__ggw); if ($__gha) { $__ggv->{'_ug'} = $__gha; } } return $__ggv; } sub _avq { my ($__ghd) = @_; return exists $__ghd->{'_uf'}->{'_gd'} && exists $__ghd->{'_uf'}->{'_gd'}->{'_op'}; } sub _avr { my ($__ghe) = @_; return $__ghe->{'_uf'}->{'_gd'}; } sub _avs { my ($__ghf) = @_; return $__ghf->_avr()->{'_op'}; } sub _avt { my ($__ghj, $__ghk) = @_; my $__ghg = {}; my $__ghh = $__ghj->_ate(); my $__ghi = $__ghk->{'_pt'}; $__ghg->{'_if'} = $__ghh; $__ghg->{'_pt'} = $__ghi; if ($__ghj->_auk()) { $__ghg->{'_bap'} = 1; } if ($__ghj->_avq()) { $__ghg->{'_op'} = $__ghj->_avs(); } return $__ghg; } sub _avu { my ($__ghm, $__ghn) = @_; my $__ghl = {}; if ($__ghm->_aun()) { $__ghl = $__ghm->_avi($__ghn); } elsif ($__ghm->_aum()) { $__ghl = $__ghm->_avp($__ghn); } else { $__ghl = $__ghm->_avt($__ghn); } return $__ghl; } sub _avv { my ($__ghp) = @_; my $__gho = -1; if ($__ghp->_aur()) { $__gho = cbclib9_14_2::_BBL(); } elsif ($__ghp->_aup()) { $__gho = cbclib9_14_2::_BBK; } elsif ($__ghp->_auq()) { $__gho = cbclib9_14_2::_BBM; } return $__gho; } sub _avw { my ($__ghv) = @_; my $__ghq = -1; if ($__ghv->_aun()){ $__ghq = cbclib9_14_2::_BBP; } elsif ($__ghv->_aum()){ $__ghq = cbclib9_14_2::_BBO; } else { $__ghq = cbclib9_14_2::_BBQ; } return $__ghq; } sub _avx() { my ($__ghv) = @_; return exists $__ghv->{'_uf'}->{'_ph'}; } sub _avy() { my ($__ghv) = @_; return exists $__ghv->{'_uf'}->{'_eh'}; } sub _avz() { my ($__ghv) = @_; return $__ghv->_avx() && ($__ghv->_atx()->{'_jx'} == &cbclib9_14_2::_BBV); } sub _awa() { my ($__ghv) = @_; my $__ghr = {}; my $__ghs = $__ghv->_atx(); my $__ght = 0; my $__ghu = $__ghv->_ate(); $__ghr->{'_jx'} = $__ghs->{'_jx'}; $__ghs->{'_pt'} = $__ghv->_atz(); if ($__ghs->{'_jx'} != &cbclib9_14_2::_BBV) { if ($__ghv->_aug()) { $__ghr->{'_bak'} = $__ghv->_atk($__ghv->_atw()); } } $__ghr->{'_baj'} = $__ghv->_avu($__ghs); $__ghr->{'_op'} = $__ghs->{'_op'}; $__ghr->{'_pj'} = cbclib9_14_2::_BBW; return $__ghr; } sub _awb { my ($__ghx) = @_; my $__ghw = $__ghx->_ate() . "_none"; } sub _awc { my ($__gib) = @_; my $__ghy = {}; my $__ghz = $__gib->_aty(); my $__gia = 0; $__ghy->{'_pj'} = cbclib9_14_2::_BBX; $__ghy->{'_op'} = $__ghz->{'_io'}->{'_op'}; $__ghy->{'_qd'} = $__ghz->{'_qd'}; $__ghy->{'_qe'} = $__ghz->{'_qe'}; $__ghy->{'_baq'} = {'_if' => $__gib->_awb(), '_pt' => 1}; $__ghy->{'_bar'} = {'_if' => $__gib->_awb(), '_pt' => 2}; $__ghy->{'_bas'} = $__gib->_awb(); return $__ghy; } sub _awd{ my ($__gib) = @_; my $__ghy = {}; if ($__gib->_avx()) { $__ghy = $__gib->_awa(); } elsif ($__gib->_avy()) { $__ghy = $__gib->_awc(); } return $__ghy; } sub _awe { my ($__gic) = @_; return $__gic->_avx() || $__gic->_avy(); } sub _awf { my ($__giq) = @_; my $__gid = 0; my $__gie = $__giq->_atu(); my $__gif = $__giq->_ate() . "_total"; my $__gig = ""; my $__gih = ""; my $__gii = $__gie->{'_ge'}; my $__gij = $__gie->{'_hx'}; my $__gik = $__gie->{'_ho'}; my $__gil = $__gie->{'_dg'}; my $__gim = exists $__gie->{'_pw'}; my $__gin = exists $__gie->{'_dq'}; my $__gio = 1; my $__gip = ""; if (exists $__gie->{'_ha'}) { $__gig = $__gie->{'_ha'}; } if (exists $__gie->{'_ms'}) { $__gih = $__gie->{'_ms'}; } if (exists $__gie->{'_pf'}) { $__gip = $__gie->{'_pf'}; } else { $__gio = 0; } $__gid = { '_if'=> $__gif, '_bgi'=> $__gig, '_bgj'=> $__gih, '_px'=> $__gii, '_hx'=> $__gij, '_ho'=> $__gik, '_bgg'=> $__gil, 'all_required'=> $__gim, '_bgh'=> $__gin, '_jx' => $__gip, 'show_total' => $__gio }; if ($__giq->_ayl()) { $__gid->{'_ug'} = $__giq->_ayj($__gif); } return $__gid; } sub _awg { my ($__gir) = @_; return exists $__gir->{'_uf'}->{'_q'}; } sub _awh { my ($__gis) = @_; return exists $__gis->{'_uf'}->{'_bj'}; } sub _awi { my ($__git) = @_; return exists $__git->{'_uf'}->{'_oy'}; } sub _awj { my ($__giu) = @_; return $__giu->{'_uf'}->{'_bj'}; } sub _awk { my ($__giv) = @_; return $__giv->{'_uf'}->{'_oy'}; } sub _awl { my ($__giw) = @_; return $__giw->_awj()->{'_op'}; } sub _awm { my ($__gix) = @_; return $__gix->_awk()->{'_op'}; } sub _awn { my ($__giz) = @_; my $__giy = 0; if ($__giz->_awh()) { $__giy = {}; $__giy->{'_op'} = $__giz->_awl(); } return $__giy; } sub _awo { my ($__gjb) = @_; my $__gja = 0; if ($__gjb->_awi()) { $__gja = {}; $__gja->{'_op'} = $__gjb->_awm(); } return $__gja; } sub _awp { my ($__gjd) = @_; my $__gjc = 0; if (exists $__gjd->{'_uf'}->{'_n'}) { $__gjc = $__gjd->{'_uf'}->{'_n'}; } return $__gjc; } sub _awq { my ($__gjp, $__gjq) = @_; my $__gje = {}; my $__gjf = $__gjp->_ate(); my $__gjg = $__gjp->_atd(); my $__gjh = $__gjp->_atf(); my $__gji = $__gjp->_avd(); my ($__gjr, $__gjs) = $__gjp->_avf(); my ($__gjt, $__gju) = _ayt($__gjf); my $__gjj = $__gjp->_avv(); my $__gjk = $__gjp->_avw(); my $__gjl = 0; my $__gjm = $__gjp->_awo(); my $__gjn = $__gjp->_awn(); my $__gjo = $__gjp->_awp(); if ($__gjp->_awe()) { $__gjl = $__gjp->_awd(); } $__gje->{'_ud'} = $__gjf; $__gje->{'_cv'} = $__gji; $__gje->{'_ae'} = $__gjr; $__gje->{'_bat'} = $__gjs; $__gje->{'_bau'} = $__gjt; $__gje->{'_bav'} = $__gju; $__gje->{'_gx'} = $__gjj; $__gje->{'_cx'} = $__gjg; $__gje->{'_bam'} = $__gjk; $__gje->{'_baw'} = {'_ug' => $__gjp->_ayk()}; $__gje->{'_bax'} = $__gjo; if ($__gjl) { $__gje->{'_bay'} = $__gjl; } if ($__gjm) { $__gje->{'_oy'} = $__gjm; } if ($__gjn) { $__gje->{'_bj'} = $__gjn; } if ($__gjp->_awg()) { $__gje->{'_baz'} = 1; } if ($__gjp->_aum()) { $__gje->{'_bba'} = $__gjp->_awf(); } if ($__gjp->_auo()) { $__gje->{'_nl'} = 1; $__gje->{'_cx'} = $__gjh; $__gje->{'_bbb'} = $__gjp->_axw(); $__gje->{'_bbc'} = $__gjp->_axv(); } if ($__gjq && !$__gjp->_auo()) { $__gje->{'_bbd'} = $__gjp->_awy(); } return $__gje; } sub _awr { my ($__gjy) = @_; my $__gjv = $__gjy->_atf(); if ($__gjy->_avx()) { $__gjv++; } my $__gjw = authlib9_14_2::_adw($__gjv); my %__gjx = (); $__gjx{'_bbe'} = $__gjw; $__gjy->{'_vy'} = \%__gjx; } sub _aws { my ($__gka) = @_; my $__gjz = ""; if (exists $__gka->{'_uf'}->{'question_css_id'}) { $__gjz = $__gka->{'_uf'}->{'question_css_id'}; } else { $__gjz = "#" . $__gka->_ate() . "_div"; $__gka->{'_uf'}->{'question_css_id'} = $__gjz; } return $__gjz; } sub _awt { my ($__gkb) = @_; return exists $__gkb->{'_uf'}->{'_gv'}; } sub _awu { my ($__gkd) = @_; my $__gkc = 15; if ($__gkd->_awt()) { $__gkc = $__gkd->{'_uf'}->{'_gv'}; } if (!$__gkd->_aub()) { $__gkc = 0; } return $__gkc; } sub _awv { my ($__gkf) = @_; my $__gke = 2; if (exists $__gkf->{'_uf'}->{'_oa'}) { $__gke = $__gkf->{'_uf'}->{'_oa'}; } return $__gke; } sub _aww { my ($__gki) = @_; my $__gkg = $__gki->_aws(); my $__gkh = "$__gkg .attribute_label_column{\n display: none;\n}\n"; return $__gkh; } sub _awx { my ($__gkl) = @_; my $__gkj = $__gkl->_aws(); my $__gkk = "\@media only screen and (max-width: 800px) {\n $__gkj .mobile_attribute_label{\n display: none;\n }\n}\n"; return $__gkk; } sub _awy { my ($__gkx) = @_; my $__gkm = ""; my $__gkn = $__gkx->_atd(); my $__gko = $__gkx->_awu(); my $__gkp = $__gkx->_awv(); my $__gkq = 100; my $__gkr = 0; my $__gks = "#" . $__gkx->_ate() . "_div"; my $__gkt = ($__gkp * $__gkn); if ($__gkx->_aub()) { $__gkq -= $__gko; } if ($__gko == 0) { $__gkm .= $__gkx->_aww(); } $__gkq -= $__gkt; $__gkr = $__gkq/$__gkn; if ($__gko > $__gkr && !$__gkx->_awt()) { $__gkq += $__gko; $__gkn += 1; $__gkr = $__gkq/$__gkn; $__gko = $__gkr; } my $__gku = $__gkp + $__gko; my $__gkv = ""; $__gkv .= " $__gks .attribute_label_column {\n width:$__gko%;\n }\n\n"; $__gkv .= " $__gks .cbc_task .cbc_concept {\n width:$__gkr%;\n margin-left:$__gkp%;\n }\n"; $__gkv .= " $__gks .cbc_concept.lower_none {\n margin-left: $__gku%;\n }\n"; if ($__gkp == 0) { my $__gkw = $__gkx->_axk(); $__gkv .= " $__gks .cbc_concept {\n box-shadow: none;\n border-color: #D1D1D1;\n border-left-width: 0;\n }\n"; $__gkv .= " $__gks .cbc_concept.first_in_row {\n border-left-width: $__gkw;\n }\n"; $__gkv .= " $__gks .attribute_label_column .cbc_cell {\n padding-right: 6px;\n }\n"; } if (!$__gkx->_aup()) { $__gkm .= $__gkx->_axm($__gkv); } else { $__gkm .= $__gkv; } return $__gkm; } sub _awz { my ($__gli) = @_; my $__gky = ""; my $__gkz = $__gli->_aws(); my $__gla = $__gli->_att(); my $__glb = $__gla->{'_av'}; my $__glc = $__gla->{'_qc'}; my $__gld = $__gla->{'_ez'}; my $__gle = $__gla->{'_ey'}; my $__glf = ""; my $__glg = ""; my $__glh = ""; if ($__gld) { $__glf .= " width: $__gld" . "px;\n"; } if ($__gle) { $__glf .= " height: $__gle" . "px;\n"; } if ($__glb) { $__glg .= "background-image: url($__glb);\n"; } if ($__glc) { $__glg .= "background-image: url($__glc);\n"; } if ($__glg || $__glf) { $__gky .= "$__gkz .best_button .selected_image {\n $__glg\n $__glf\n}\n"; } if ($__glh || $__glf) { $__gky .= "$__gkz .worst_button .selected_image {\n $__glh\n $__glf\n}\n"; } if ($__glf) { $__gky .= "$__gkz .select_label {\n $__glf\n}\n"; } return $__gky; } sub _axa { my ($__glq) = @_; my $__glj = ""; my $__glk = $__glq->_aws(); my $__gll = $__glq->{'_uf'}->{'_ne'}; my $__glm = $__glq->{'_uf'}->{'_ng'}; my $__gln = $__glq->{'_uf'}->{'_nf'}; my $__glo = ""; my $__glp = ""; if ($__glm) { $__glo .= " width: $__glm" . "px;\n"; } if ($__gln) { $__glo .= " height: $__gln" . "px;\n"; } if ($__gll) { $__glp .= " background-image: url($__gll);\n" } if ($__glp || $__glo) { $__glj .= "$__glk .task_select_button .selected_image {\n $__glp\n $__glo\n}\n"; } if ($__glo) { $__glj .= "$__glk .task_select_button .input_label {\n $__glo\n}\n"; } return $__glj; } sub _axb { my ($__glt) = @_; my $__glr = ""; my $__gls = $__glt->_aws(); if ($__glt->_aun()) { $__glr .= $__glt->_awz(); } elsif ($__glt->_auk()) { $__glr .= $__glt->_axa(); } return $__glr; } sub _axc { my ($__glz) = @_; my $__glu = ""; my $__glv = $__glz->_aws(); if (exists $__glz->{'_uf'}->{'_gw'}) { my $__glw = ciwlib9_14_2::_tk($__glz->{'_uf'}->{'_gw'}, 0, 0); my $__glx = $__glz->{'_uf'}->{'_gw'}->{'justify'}; if ($__glx) { if ($__glz->_aub()) { my $__gly = "flex-end"; if ($__glx eq "left") { $__gly = "flex-start"; } if ($__glx eq "center") { $__gly = "center"; } $__glu .= "$__glv .cbc_cell.attribute_label_cell {\n justify-content:$__gly;\n}\n"; } $__glu .= "$__glv .mobile_attribute_label {\n text-align: justification;\n}\n"; } if ($__glw) { $__glu .= "$__glv .att_label_text {\n $__glw\n}\n"; } } return $__glu; } sub _axd { my ($__gmc) = @_; my $__gma = ""; my $__gmb = $__gmc->_aws(); $__gma .= $__gmc->_axc(); if (!$__gmc->_aub()) { $__gma .= $__gmc->_aww(); $__gma .= $__gmc->_awx(); } if ($__gmc->_auc()) { $__gma .= "$__gmb .mobile_attribute_label {\n display: block;\n}\n"; } return $__gma; } sub _axe { my ($__gmh) = @_; my $__gmd = ""; if (exists $__gmh->{'_uf'}->{'_lc'}) { my $__gme = $__gmh->_aws(); my $__gmf = $__gmh->{'_uf'}->{'_lc'}; my $__gmg = $__gmf . "px"; $__gmd .= "$__gme {\n width: $__gmg\n}\n"; } return $__gmd; } sub _axf { my ($__gmm) = @_; my $__gmi = ""; if (exists $__gmm->{'_uf'}->{'_om'}) { my $__gmj = $__gmm->_aws(); my $__gmk = $__gmm->{'_uf'}->{'_om'}; my $__gml = $__gmk . "px"; $__gmi .= "$__gmj .question_body {\n width: $__gml;\n}\n"; } return $__gmi; } sub _axg { my ($__gmv) = @_; my $__gmn = ""; my $__gmo = $__gmv->_aws(); if (exists $__gmv->{'_uf'}->{'_cc'}) { my $__gmp = $__gmv->{'_uf'}->{'_cc'}; my $__gmq = $__gmp . "px"; my $__gmr = $__gmp + 12; my $__gms = $__gmr . "px"; my $__gmt = $__gmp + 6; my $__gmu = $__gmt . "px"; $__gmn .= "$__gmo .cbc_cell {\n padding: $__gmq;\n}\n"; $__gmn .= "$__gmo .concept_label_cell {\n padding-top: $__gms;\n padding-bottom: $__gms;\n}\n"; $__gmn .= "$__gmo .cbc_cell.first_att {\n padding-top: $__gmu;\n}\n"; $__gmn .= "$__gmo .cbc_cell.cbc_response_cell { \n padding-top: $__gmu;\n padding-bottom: $__gmu;\n}\n"; } return $__gmn; } sub _axh { my ($__gmz) = @_; my $__gmw = ""; my $__gmx = $__gmz->_aws(); if (exists $__gmz->{'_uf'}->{'_bw'}) { my $__gmy = $__gmz->{'_uf'}->{'_bw'} . "px"; $__gmw .= "$__gmx .cbc_cell {\n border-width: $__gmy;\n}\n"; $__gmw .= "$__gmx .cbc_cell.cbc_response_cell {\n border-width: 0;\n}\n"; } return $__gmw; } sub _axi { my ($__gna) = @_; return exists $__gna->{'_uf'}->{'_cs'}; } sub _axj { my ($__gnb) = @_; return $__gnb->{'_uf'}->{'_cs'}; } sub _axk { my ($__gnd) = @_; my $__gnc = 2; if ($__gnd->_axi()) { $__gnc = $__gnd->_axj(); } return $__gnc . "px"; } sub _axl { my ($__gni) = @_; my $__gne = ""; my $__gnf = $__gni->_aws(); if ($__gni->_axi()) { my $__gng = $__gni->_axk(); $__gne .= "$__gnf .cbc_concept {\n"; my $__gnh = " border-width: $__gng;\n"; if ($__gni->_awv() == 0) { $__gnh .= " border-left-width: 0;\n"; } $__gne .= $__gnh . "}\n"; $__gne .= "$__gnf .attribute_label_column {\n border-top-width: $__gng;\n}\n"; } return $__gne; } sub _axm { my ($__gnk, $__gnl) = @_; my $__gnj = ""; if (authlib9_14_2::_aet()) { $__gnj = "\@media only screen and (min-width: 801px) {\n$__gnl\n}"; } else { $__gnj = $__gnl; } return $__gnj; } sub _axn { my ($__gnn, $__gno) = @_; my $__gnm = "\@media only screen and (max-width: 800px) {\n$__gno\n}"; return $__gnm; } sub _axo { my ($__gns) = @_; my $__gnp = ""; my $__gnq = $__gns->_aws(); if (exists $__gns->{'_uf'}->{'_nz'}) { my $__gnr = $__gns->{'_uf'}->{'_nz'} . "px"; if ($__gns->_auo()) { $__gnp .= "$__gnq .shelf_container, $__gnq .lower_none {\n margin-top: $__gnr;\n}\n"; } else { $__gnp .= $__gns->_axn("$__gnq .extra_concept_row {\n margin-top: $__gnr;\n}\n"); } } return $__gnp; } sub _axp { my ($__gnx) = @_; my $__gnt = ""; my $__gnu = $__gnx->_aws(); if (exists $__gnx->{'_uf'}->{'_hc'}) { my $__gnv = ciwlib9_14_2::_tk($__gnx->{'_uf'}->{'_hc'}, 0, 0); if ($__gnv) { $__gnt .= "$__gnu .level_text {\n $__gnv\n}\n"; my $__gnw = $__gnx->{'_uf'}->{'_hc'}->{'_et'}->{'_m'}; if ($__gnw eq "center" || $__gnw eq "right") { $__gnt .= "$__gnu .level {\n text-align: $__gnw;\n}\n"; if ($__gnx->_auf()) { $__gnt .= "$__gnu ol, $__gnu ul {\n text-align: $__gnw;\n list-style-position: inside;\n padding-left: 0;\n}\n"; $__gnt .= "$__gnu .merged_text {\n text-align: $__gnw;\n}\n"; } } } } return $__gnt; } sub _axq { my ($__god) = @_; my $__gny = ""; my $__gnz = $__god->_aws(); if (exists $__god->{'_uf'}->{'_gd'} && $__god->{'_uf'}->{'_gd'}->{'_et'}) { my $__goa = ciwlib9_14_2::_tk($__god->{'_uf'}->{'_gd'}, 0, 0); $__gny .= " $__gnz .input_label{\n $__goa\n}\n"; } if (exists $__god->{'_uf'}->{'_nd'}) { my $__gob = "#" . $__god->{'_uf'}->{'_nd'}; my $__goc = "$__gnz .cbc_concept.best {\n border-color: $__gob;\n}\n"; if ($__god->_awv() != 0) { $__gny .= $__goc; } else { $__gny .= $__god->_axn($__goc); } $__gny .= "$__gnz .nav_dot.best .nav_dot_circle {fill: $__gob;}\n"; $__gny .= "$__gnz .nav_dot.best .nav_dot_border {stroke: $__gob;}\n"; $__gny .= "$__gnz .cbc_concept.best .best_button, $__gnz .custom_position_none.best .best_button {\n background-color: $__gob;\n border-color: $__gob;\n}\n"; } return $__gny; } sub _axr { my ($__goj) = @_; my $__goe = ""; my $__gof = -1; my $__gog = -1; my $__goh = $__goj->_aws(); my $__goi = $__goj->{'_uf'}->{'_aw'}; if (exists $__goi->{'_ng'}) { $__gog = $__goi->{'_ez'}; } if (exists $__goi->{'_nf'}) { $__gof = $__goi->{'_ey'}; } if ($__gof >=0 || $__gog >= 0) { $__goe .= "$__goh .selected_image{\n"; if ($__gof >=0) { $__goe .= " height:$__gof" . "px;\n"; } if ($__gog >= 0) { $__goe .= " width:$__gog" . "px;\n;"; } $__goe .= "}\n"; } return $__goe; } sub _axs { my ($__gor) = @_; my $__gok = ""; my $__gol = $__gor->{'_uf'}->{'_aw'}; my $__gom = $__gor->_aws(); if (exists $__gol->{'_at'} && exists $__gol->{'_at'}->{'_et'}) { my $__gon = ciwlib9_14_2::_tk($__gol->{'_at'}, 0, 0); if ($__gon) { $__gok .= "$__gom .best_button .input_label {\n $__gon\n}\n"; } } if (exists $__gol->{'_nc'}) { my $__goo = "#" . $__gol->{'_nc'}; my $__gop = "$__gom .cbc_concept.best {\n border-color: $__goo;\n}\n"; if ($__gor->_awv() != 0) { $__gok .= $__gop; } else { $__gok .= $__gor->_axn($__gop); } $__gok .= "$__gom .nav_dot.best .nav_dot_circle {fill: $__goo;}\n"; $__gok .= "$__gom .nav_dot.best .nav_dot_border {stroke: $__goo;}\n"; $__gok .= "$__gom .cbc_concept.best .best_button, $__gom .custom_position_none.best .best_button, $__gom .dual_response_none_button.would_button.selected, $__gom .dual_response_none_button.would_not_button.selected {\n background-color: $__goo;\n border-color: $__goo;\n}\n"; } if (exists $__gol->{'_po'} && exists $__gol->{'_av'}) { my $__goq = $__gol->{'_av'}; $__gok .= "$__gom .best_button .selected_image{\n background-image: url($__goq);\n}\n"; } return $__gok; } sub _axt { my ($__goz) = @_; my $__gos = ""; my $__got = $__goz->{'_uf'}->{'_aw'}; my $__gou = $__goz->_aws(); if (exists $__got->{'_qb'} && exists $__got->{'_qb'}) { my $__gov = ciwlib9_14_2::_tk($__got->{'_qb'}, 0, 0); if ($__gov) { $__gos .= "$__gou .worst_button .input_label {\n $__gov\n}\n"; } } if (exists $__got->{'_nh'}) { my $__gow = "#" . $__got->{'_nh'}; my $__gox = "$__gou .cbc_concept.worst {\n border-color: $__gow;\n}\n"; if ($__goz->_awv() != 0) { $__gos .= $__gox; } else { $__gos .= $__goz->_axn($__gox); } $__gos .= "$__gou .nav_dot.worst .nav_dot_circle {fill: $__gow;}\n"; $__gos .= "$__gou .nav_dot.worst .nav_dot_border {stroke: $__gow;}\n"; $__gos .= "$__gou .cbc_concept.worst .worst_button, $__gou .custom_position_none.worst .worst_button, $__gou .dual_response_none_button.would_not_button.selected {\n background-color: $__gow;\n border-color: $__gow;\n}\n"; } if (exists $__got->{'_po'} && exists $__got->{'_qc'}) { my $__goy = $__got->{'_qc'}; $__gos .= "$__gou .worst_button .selected_image{\n background-image: url($__goy);\n}\n"; } return $__gos; } sub _axu { my ($__gpa) = @_; return $__gpa->{'_uf'}->{'_nl'}; } sub _axv { my ($__gpb) = @_; return $__gpb->_axu()->{'_mw'}; } sub _axw { my ($__gpc) = @_; return scalar @{ $__gpc->_axv() }; } sub _axx { my ($__gpi) = @_; my $__gpd = $__gpi->_axw(); my $__gpe = $__gpi->_axv(); my $__gpf = 0; for (my $__gpg = 0; $__gpg < $__gpd; $__gpg++) { my $__gph = $__gpe->[$__gpg]; if ($__gph > $__gpf) { $__gpf = $__gph; } } return $__gpf; } sub _axy { my ($__gpn) = @_; my $__gpj = $__gpn->_axu(); my $__gpk = ""; if (exists $__gpj->{'_nn'}) { my $__gpl = $__gpj->{'_nn'}; my $__gpm = $__gpn->_aws(); $__gpk .= "$__gpm .shelf_top {\n border-bottom-color: #$__gpl;\n}\n"; } return $__gpk; } sub _axz { my ($__gps) = @_; my $__gpo = $__gps->_axu(); my $__gpp = ""; if (exists $__gpo->{'_nm'}) { my $__gpq = $__gpo->{'_nm'}; my $__gpr = $__gps->_aws(); $__gpp .= "$__gpr .shelf_edge {\n background-color: #$__gpq;\n}\n"; } return $__gpp; } sub _aya { my ($__gpu) = @_; my $__gpt = ""; $__gpt .= $__gpu->_axy(); $__gpt .= $__gpu->_axz(); return $__gpt; } sub _ayb { my ($__gqa) = @_; my $__gpv = ""; my $__gpw = $__gqa->_atx(); if (exists $__gpw->{'_ps'}) { my $__gpx = $__gpw->{'_ps'}; my $__gpy = ""; my $__gpz = $__gqa->_aws(); if ($__gpx eq "top") { $__gpy = "flex-start"; } if ($__gpx eq "middle") { $__gpy = "center"; } if ($__gpx eq "bottom") { $__gpy = "flex-end"; } $__gpv = "$__gpz .none_cell{\n align-items: $__gpy;\n}\n"; } return $__gpv; } sub _ayc { my ($__gqg) = @_; my $__gqb = ""; my $__gqc = $__gqg->_aty(); my $__gqd = $__gqg->_aws(); my $__gqe = ciwlib9_14_2::_tk($__gqc->{'_io'}, 0, 0); my $__gqf = ""; if (exists $__gqc->{'_mn'}) { $__gqf = ciwlib9_14_2::_tk($__gqc->{'_mn'}, 0, 0); } if ($__gqe) { $__gqb .= "$__gqd .dual_response_none .none_cell {\n $__gqe\n}\n"; } if ($__gqf) { $__gqb .= "$__gqd .dual_response_none .dual_response_none_button .input_label {\n $__gqf\n}\n"; } return $__gqb; } sub _ayd { my ($__gqi) = @_; my $__gqh = ""; if ($__gqi->_avx()) { $__gqh .= $__gqi->_ayb(); } elsif ($__gqi->_avy()) { $__gqh .= $__gqi->_ayc(); } return $__gqh; } sub _aye { my ($__gqo) = @_; my $__gqj = ""; if ($__gqo->_awg()) { my $__gqk = $__gqo->{'_uf'}->{'_q'}; my $__gql = $__gqo->_aws(); if (exists $__gqk->{'_ay'}) { my $__gqm = "#" . $__gqk->{'_ay'}; $__gqj .= "$__gql .alt_color1{\n background-color: $__gqm;\n}\n"; } if (exists $__gqk->{'_az'}) { my $__gqn = "#" . $__gqk->{'_az'}; $__gqj .= "$__gql .alt_color2{\n background-color: $__gqn;\n}\n"; } } return $__gqj; } sub _ayf { my ($__gqs) = @_; my $__gqp = ""; my $__gqq = $__gqs->_aws(); if ($__gqs->_awi()) { my $__gqr = ciwlib9_14_2::_tk($__gqs->_awk(), 0, 0); if ($__gqr) { $__gqp .= "$__gqq .top_corner_label {\n $__gqr\n}\n"; } } if ($__gqs->_awh()) { my $__gqr = ciwlib9_14_2::_tk($__gqs->_awj(), 0, 0); if ($__gqr) { $__gqp .= "$__gqq .bottom_corner_label {\n $__gqr\n}\n"; } } return $__gqp; } sub _ayg { my ($__gqx) = @_; my $__gqt = ""; if ($__gqx->_aug()) { my $__gqu = $__gqx->_atl(); my $__gqv = ciwlib9_14_2::_tk($__gqu, 0, 0); if ($__gqv) { my $__gqw = $__gqx->_aws(); $__gqt .= "$__gqw .concept_label_cell {\n $__gqv\n}\n"; } } return $__gqt; } sub _ayh { my ($__grb) = @_; my $__gqy = ""; if ($__grb->_awv() == 0) { my $__gqz = $__grb->_aws(); my $__gra = $__grb->_axk(); $__gqy .= $__grb->_axm(" $__gqz .cbc_concept {\n border-width: $__gra;\n border-left-width: 0px;\n }\n}\n"); } return $__gqy; } sub _ayi { my ($__grf) = @_; my $__grc = ""; my $__grd = $__grf->_atu(); $__grc = ".cbc .cbc_totals_box{\n "; if (exists $__grd->{'_pf'}) { my $__gre = $__grd->{'_pf'}; $__grc .= "text-align: $__gre\n"; } else { $__grc .= "display: none;\n"; } $__grc .= "}\n"; return $__grc; } sub _vf { my ($__grh) = @_; my $__grg = ""; if ($__grh->_auo()) { $__grg .= $__grh->_aya(); } else { $__grg .= $__grh->_awy(); $__grg .= $__grh->_axd(); } $__grg .= $__grh->_axf(); $__grg .= $__grh->_axb(); $__grg .= $__grh->_axg(); $__grg .= $__grh->_axl(); $__grg .= $__grh->_axh(); $__grg .= $__grh->_axo(); $__grg .= $__grh->_axp(); $__grg .= $__grh->_ayd(); $__grg .= $__grh->_aye(); $__grg .= $__grh->_ayf(); $__grg .= $__grh->_ayg(); if ($__grh->_aun()) { $__grg .= $__grh->_axr(); $__grg .= $__grh->_axs(); $__grg .= $__grh->_axt(); } elsif ($__grh->_aum()) { $__grg .= $__grh->_ayh(); $__grg .= $__grh->_ayi(); } else { $__grg.=$__grh->_axq(); } if ($__grh->_auo() || $__grh->_aup()) { $__grg .= ".page {\n min-width: 800px;\n}\n}"; } return $__grg; } sub _ayj { my ($__gri, $__grj) = @_; return $__gri->{'_uf'}->{'_ug'}->{$__grj}; } sub _ayk { my ($__grk) = @_; return $__grk->{'_uf'}->{'_ug'}; } sub _ayl { my ($__grl) = @_; return exists $__grl->{'_uf'}->{'_ug'}; } sub _aym { my ($__grr, $__grs, $__grt, $__gru) = @_; my $__grm = ""; my $__grn = $__grr->_atf(); my $__gro = 0; my $__grp = 0; while (!$__gro && $__grp < $__grn) { my $__grq = $__grr->_ath($__grp); if ($__grq->{'_pt'} == $__grs) { $__gro = $__grq; } $__grp++; } if ($__grt) { $__grm .= $__grr->_avg(); } elsif ($__gru) { $__grm .= $__grr->_avh(); } else { $__grm .= $__grr->_ate(); } $__grm .= "_" . $__grs; return $__grm; } sub _ayn { my ($__grw, $__grx) = @_; my $__grv = ""; $__grv .= " SSI_RestoreBestConcept(\"$__grx\")"; return $__grv; } sub _ayo { my ($__grz, $__gsa) = @_; my $__gry = ""; $__gry .= " SSI_RestoreWorstConcept(\"$__gsa\")"; return $__gry; } sub _ayp { my ($__gsi) = @_; my $__gsb = ""; my $__gsc = $__gsi->_avg(); my $__gsd = $__gsi->_avh(); my $__gse = $__gsi->_ayj($__gsc); my $__gsf = $__gsi->_ayj($__gsd); my $__gsg = $__gsi->_aym($__gse, 1, 0); my $__gsh = $__gsi->_aym($__gsf, 0, 1); $__gsb .= $__gsi->_ayn($__gsg); $__gsb .= $__gsi->_ayo($__gsg); return $__gsb; } sub _ayq { my ($__gsn) = @_; my $__gsj = ""; my $__gsk = $__gsn->_ate(); my $__gsl = $__gsn->_ayj($__gsk); my $__gsm = $__gsn->_aym($__gsl, 0, 0); $__gsj = $__gsn->_ayn($__gsm); return $__gsj; } sub _vr { my ($__gsu, $__gsv, $__gsw) = @_; $__gsu->_atc($__gsv); my $__gso = ""; my $__gsp = $__gsu->{'_uf'}; my $__gsq = $__gsu->{'_if'}; my $__gsr = _ays($__gsq); my $__gss = $__gsu->_awq(0); my $__gst = cbcviewgenerator9_14_2::_bbz($__gss); $__gso .= $__gst->_vr(); $__gsu->_awr(); return $__gso; } sub _vs { my ($__gti, $__gtj, $__gtk, $__gtl) = @_; my $__gsx = $__gti->{'_uf'}; my $__gsy = 0; my $__gsz = 0; my $__gta = $__gti->_ate(); my $__gtb = $__gti->_ate(); my $__gtc = ""; if (exists $__gti->{'_vy'}) { my $__gtd = $__gti->{'_vy'}; if (exists $__gtd->{'_bbe'}) { $__gsy = $__gtd->{'_bbe'}; } if (exists $__gtd->{'_bbf'}) { $__gsz = 1; if (exists $__gtd->{'_bbg'}) { $__gta = $__gtd->{'_bbg'}; $__gtl--; } if (exists $__gtd->{'_bbh'}) { $__gtb = $__gtd->{'_bbh'}; } } if ($__gti->_aum()) { my $__gte = $__gsx->{'_df'}; $__gte->{'_uh'} = $__gsy; $__gte->{'_ml'} = 1; if ($__gsz) { $__gte->{'_uz'} = $__gta . "*"; } else { $__gte->{'_uz'} = $__gta . "_*"; } if (exists $__gsx->{'_ek'}) { $__gte->{'_ek'} = $__gsx->{'_ek'}; } ciwlib9_14_2::_sv($__gte, $__gtb, $__gtj, $__gtk, $__gtl); } elsif ($__gti->_aun()) { my $__gtf = "_b"; my $__gtg = "_w"; if ($__gsz) { $__gtf = "best"; $__gtg = "worst"; } $__gtc = "SSI_RadCheck(\"" . $__gta . $__gtf . "\",\"" . $__gtb . "\",\""; if (exists $__gsx->{'_ek'}) { $__gtc .= ciwlib9_14_2::_sx($__gsx->{'_ek'}); } $__gtc .= "\"," . $__gtl . ", true)"; push @{$__gtj}, ($__gtc); $__gtc = "SSI_RadCheck(\"" . $__gta . $__gtg . "\",\"" . $__gtb . "\",\""; if (exists $__gsx->{'_ek'}) { $__gtc .= ciwlib9_14_2::_sx($__gsx->{'_ek'}); } $__gtc .= "\"," . $__gtl . ", true)"; push @{$__gtj}, ($__gtc); $__gtk->{'_uu'} = 1; $__gtc = "SSI_CheckCBCUnique(\"" . $__gta . "\", \"" . $__gtb . "\", \"" . $__gtf . "\", \"" . $__gtg . "\", \"" . ciwlib9_14_2::_sx($__gsx->{'_ek'}) . "\", " . $__gtl . ")"; push @{$__gtj}, $__gtc; $__gtk->{'_bv'} = 1; } else { $__gtc = "SSI_RadCheck(\"" . $__gta . "\",\"" . $__gtb . "\",\""; if (exists $__gsx->{'_ek'}) { $__gtc .= ciwlib9_14_2::_sx($__gsx->{'_ek'}); } $__gtc .= "\"," . $__gtl . ", true)"; push @{$__gtj}, ($__gtc); $__gtk->{'_uu'} = 1; } if (exists $__gsx->{'_eh'}) { my $__gth = $__gta; if ($__gsz) { $__gth =~ s/^(.*?)_(.*?)$/$1_none/; } else { $__gth .= "_none"; } $__gtc = "SSI_RadCheck(\"" . $__gth . "\",\"" . $__gtb . "\",\""; if (exists $__gsx->{'_eh'}->{'_ek'}) { $__gtc .= ciwlib9_14_2::_sx($__gsx->{'_eh'}->{'_ek'}); } $__gtc .= "\"," . $__gtl . ", true)"; push @{$__gtj}, ($__gtc); $__gtk->{'_uu'} = 1; } } } sub _ayr { my ($__gtm) = @_; return $__gtm =~ m/^C-/i; } sub _ays { my ($__gto) = @_; my $__gtn = ""; if ($__gto =~ m/^(.*?)_(.*?)$/) { $__gtn = $2; } return $__gtn; } sub _ayt { my ($__gtr) = @_; my $__gtp = 0; my $__gtq = 0; if ($__gtr =~ m/_Random(\d+)/i || $__gtr =~ m/_Choice(\d+)/i) { $__gtp = int($1); } elsif ($__gtr =~ m/_Fixed(\d+)/i) { $__gtp = int($1); $__gtq = 1; } return ($__gtp, $__gtq); } sub _ayu { my ($__gtt, $__gtu, $__gtv) = @_; my $__gts = 0; if ($__gtt && $__gtu) { $__gts = (exists $__gtu->{$__gtv} && !exists $__gtt->{$__gtv}); } return $__gts; } sub _ayv { my ($__gtw, $__gtx) = @_; return ($__gtw && exists $__gtw->{$__gtx}); } sub _ayw { my ($__gty) = @_; return scalar @{ $__gty->{'_hf'} }; } sub _ayx { my ($__gtz, $__gua) = @_; splice @{$__gtz->{'_hf'}}, $__gua, 1 } sub _ayy { my ($__guq, $__gur) = @_; my $__gub = ""; my $__guc = $__guq->{'_uf'}; if (exists $__guc->{'_fn'}) { my $__gud = $__guc->{'_fn'}->{'_op'}; if ($__gud =~ m/<!--(.*?)SSI_Comment:\s*CUSTOM_CBC_DESIGN(.*?)-->/is) { my $__gue = $2; my $__guf = ""; my $__gug = ""; my $__guh = 0; if ($__gue =~ m/Free_Format_Base_Name:\s*(.*?)\s/is) { $__guf = $1; if (!exists($authlib9_14_2::_ahp{$__guf . "Random1"}) && !exists($authlib9_14_2::_ahp{$__guf . "Fixed1"})) { $__guh = 1; if (!$authlib9_14_2::_amg) { authlib9_14_2::_zq(147, "Custom CBC error.", "Cannot find the question " . $__guf . "Random1 or " . $__guf . "Fixed1, in the question list. Please check the Free_Format_Base_Name in the CUSTOM_CBC_DESIGN comment.", ""); } } } else { $__guh = 1; if (!$authlib9_14_2::_amg) { authlib9_14_2::_zq(148, "Custom CBC error.", "Cannot find the Free_Format_Base_Name instruction in the CUSTOM_CBC_DESIGN comment. Check syntax.", ""); } } if ($__gue =~ m/Free_Format_Variable_Name:\s*(.*?)\s/is) { $__gug = $1; } else { $__guh = 1; if (!$authlib9_14_2::_amg) { authlib9_14_2::_zq(149, "Custom CBC error.", "Cannot find the Free_Format_Variable_Name instruction in the CUSTOM_CBC_DESIGN comment. Check syntax.", ""); } } if (!$__guh) { my $__gui = 1; my $__guj = ""; if ($__gue =~ m/Verification:\s*(.*?)\s/is) { $__guj = $1; if ($__guj =~ m/^OFF$/i) { $__gui = 0; } } my $__guk = $__gur; $__guk =~ s/^(.*?)_//i; my $__gul = $__guf . $__guk; my $__gum = $__gul . "_" . $__gug; $__gub .= "<input type=\"hidden\" name=\"hid_Custom_CBC_" . $__gur . "\" value=\"" . $__gum . "\">"; $__gub .= "<input type=\"hidden\" name=\"" . $__gur . "\" value=\"\">"; if ($__gui == 0) { $__gum = ""; $__gub .= "<input type=\"hidden\" name=\"hid_Custom_CBC_" . $__gur . "_No_Verification\" value=\"1\">"; } my $__gun = $__guc->{'_cv'}; if (exists($__guc->{'_ph'})) { $__gun++; } if ($authlib9_14_2::_ajg) { my $__gun = $__guc->{'_cv'}; if (exists $__guc->{'_ph'}) { $__gun++; } $__gub .= "<!--LoadTestMode: <question><name>$__gur</name><type>customcbc</type>"; $__gub .= "<freeformquest>" . $__gul . "</freeformquest>"; $__gub .= "<freeformvars>" . ($__gul . "_" . $__gug) . "</freeformvars>"; $__gub .= "<min>1</min><max>" . $__gun . "</max>"; $__gub .= "<dualresponsenone>" . (exists $__guc->{'_eh'} ? "true" : "false") . "</dualresponsenone>"; $__gub .= "<traditionalnone>" . (exists $__guc->{'_ph'} ? "true" : "false") . "</traditionalnone>"; $__gub .= "<subtype>"; if (exists $__guc->{'_df'}) { $__gub .= "constantsum"; } elsif (exists $__guc->{'_aw'}) { $__gub .= "bestworst"; } else { $__gub .= "discretechoice"; } $__gub .= "</subtype>"; if (exists $__guc->{'_df'}) { $__gub .= "<constantsum>"; $__gub .= "<consum>" . $__guc->{'_df'}->{'_dg'} . "</consum>"; $__gub .= "<min>" . $__guc->{'_df'}->{'_hx'} . "</min>"; $__gub .= "<max>" . $__guc->{'_df'}->{'_ho'} . "</max>"; $__gub .= "<decimal>" . (exists $__guc->{'_df'}->{'_dq'} ? "true" : "false") . "</decimal>"; $__gub .= "<wholereq>" . (exists $__guc->{'_df'}->{'_pw'} ? "true" : "false") . "</wholereq>"; $__gub .= "</constantsum>"; } $__gub .= "</question>-->"; } my $__guo = authlib9_14_2::_adw($__gun); my %__gup = (); if ($__gui) { $__gup{'_bbf'} = 1; $__gup{'_bbg'} = $__gum; $__gup{'_bbh'} = $__gul; $__gup{'_bbe'} = $__guo; $__guq->{'_vy'} = \%__gup; } } } } return $__gub; } sub _ayz { my ($__guz, $__gva, $__gvb) = @_; my $__gus = @{$__guz->[$__gva]->{'_bac'}}; my $__gut = ""; my $__guu = 0; my $__guv = 0; my $__guw = 0; my $__gux = 0; my @__guy = (); if (exists $__gvb->{'_dd'}) { if (exists($__gvb->{'_dd'}->{'_pa'})) { $__guv = _aza($__gvb->{'_dd'}->{'_pa'}, $__gvb->{'_baa'}); } if (exists($__gvb->{'_dd'}->{'_bl'})) { $__guu = _aza($__gvb->{'_dd'}->{'_bl'}, $__gvb->{'_bab'}); } } for ($__guw = 0; $__guw < $__gus; $__guw++) { $__gut = ""; $__gux = $__guz->[$__gva]->{'_bac'}->[$__guw]->[0]; if ($__gux eq "C-T") { if ($__guv != 0 && @{$__guv}) { $__gut = shift @{$__guv}; } } elsif ($__gux eq "C-B") { if ($__guu != 0 && @{$__guu}) { $__gut = shift @{$__guu}; } } else { if ($__gux =~ m/^C-(\d+)/i) { $__gux = $1; } $__gut = $__gvb->{'_ae'}->[$__gux]->{'_if'}; } $__gut = authlib9_14_2::_zw($__gut, 0); push @__guy, $__gut; } return \@__guy; } sub _aza { my ($__gve, $__gvf) = @_; my @__gvc = (); my $__gvd = 0; for ($__gvd = 0; $__gvd < @{$__gve}; $__gvd++) { if (exists $__gvf->{$__gvd + 1}) { next; } else { push @__gvc, $__gve->[$__gvd]; } } return \@__gvc; } sub _azb { my ($__hat, $__hau) = @_; my $__gvg = $__hau->{'_dj'}; my $__gvh = $authlib9_14_2::_akn{"hid_respnum"}; my $__gvi = $__gvg->{'_cz'}; my $__gvj = $__gvg->{'_on'}; my @__gvk = @{$__hau->{'_ae'}}; my @__gvl = (); if (exists $__gvg->{'_ks'}) { @__gvl = @{$__gvg->{'_ks'}}; } my $__gvm = 0; my $__gvn = 0; my $__gvo = 7919 * $__gvh; my $__gvp = @__gvk; my $__gvq = $__gvi * $__gvj; my $__gvr = @__gvl > 0; my $__gvs = $__gvi >= 4; my @__gvt = (); my $__gvu = 0; my @__gvv = (); my @__gvw = (); my @__gvx = (); my @__gvy = (); my @__gvz = (); my @__gwa = (); my @__gwb = (); my @__gwc = (); my $__gwd = 0; my $__gwe = 1.1; my @__gwf = (); my @__gwg = (); my @__gwh = (); my $__gwi = (($__gvi * ($__gvi - 1)) / 2) * 100; my $__gwj = ($__gvi % 2); if ($authlib9_14_2::_amg) { if ($__gvi == 0) { return [[1, 1]]; } if ($__gvj == 0) { return [[1, 1]]; } if ($__gvp == 1 && @{$__gvk[0]->{'_hf'}} == 0) { my @__gwk = ([1, 1]) x $__gvi; return \@__gwk; } } authlib9_14_2::_aco($__gvo); for ($__gvm = 0; $__gvm < $__gvp; $__gvm++) { push (@__gwc, $__gwi); push (@__gvv, scalar @{$__gvk[$__gvm]->{'_hf'}}); push (@__gvw, $__gvu); my @__gwl = (0) x $__gvv[$__gvm]; if ($__gvv[$__gvm] == 2 && $__gwj) { $__gwg[$__gvm] = 0; } my $__gwm = 0; for ($__gvn = 0, $__gwm = 0; $__gvn < $__gvi; $__gvn++) { $__gwl[$__gwm]++; $__gwm = ($__gwm + 1) % $__gvv[$__gvm]; } my $__gwn = 0; for ($__gvn = 0; $__gvn < @__gwl; $__gvn++) { $__gwn += ($__gwl[$__gvn] * ($__gwl[$__gvn] - 1)) / 2; } push (@__gvz, $__gwn); $__gvu += $__gvv[$__gvm]; push (@__gwg, $__gvk[$__gvm]->{'_jh'}); my @__gwo = (1..$__gvv[$__gvm]); push(@__gwh, \@__gwo); my @__gwp = (0..($__gvv[$__gvm] - 1)); authlib9_14_2::_xg(\@__gwp); push (@__gwb, \@__gwp); if ($__gvk[$__gvm]->{'_jf'} == &authlib9_14_2::_AOP) { my @__gwq = (); for ($__gvn = 0; $__gvn < $__gvv[$__gvm]; $__gvn++) { push(@__gwq, $__gwh[$__gvm]->[$__gvn]); } push(@__gwf, \@__gwq); } elsif ($__gvk[$__gvm]->{'_jf'} == &authlib9_14_2::_AOQ) { my @__gwq = (); for ($__gvn = $__gvv[$__gvm] - 1; $__gvn >= 0; $__gvn--) { push(@__gwq, $__gwh[$__gvm]->[$__gvn]); } push(@__gwf, \@__gwq); } elsif ($__gvk[$__gvm]->{'_jf'} == &authlib9_14_2::_AOO) { my @__gwq = (); for ($__gvn = 1; $__gvn <= $__gvv[$__gvm]; $__gvn++) { my $__gwr = authlib9_14_2::_ws($__hat . '_Rating' . ($__gvm + 1) . '_r' . $__gvn); if ($__gwr ne "" && $__gwr ne "4") { push(@__gwq, $__gwr); } else { push(@__gwq, 0); } } push(@__gwf, \@__gwq); } elsif ($__gvk[$__gvm]->{'_jf'} == &authlib9_14_2::_AOR) { my @__gwq = (0) x $__gvv[$__gvm]; push (@__gwf, \@__gwq); } my @__gws = sort {$a <=> $b} grep { $_ != 0 } @{$__gwf[$__gvm]}; if (@__gws == 0) { $__gwd++; push (@__gvt, {}); } elsif ($__gws[0] == $__gws[-1]) { $__gwd++; push (@__gvt, {$__gws[0] => scalar @__gws, '_hx' => $__gws[0], '_ho' => $__gws[0]}); } else { my %__gwt = (); foreach $__gvn (@__gws) { $__gwt{$__gvn}++; } $__gwt{'_hx'} = $__gws[0]; $__gwt{'_ho'} = $__gws[-1]; push (@__gvt, \%__gwt); } } my @__gwu = (); my @__gwv = (); my @__gww = (); my @__gwx = (0) x $__gvp; my @__gwy = (0 .. ($__gvp - 1)); authlib9_14_2::_xg(\@__gwy); if (!$authlib9_14_2::_amg) { for ($__gvm = 0; $__gvm < $__gvu; $__gvm++) { my @__gwq = (0) x $__gvu; push (@__gwa, \@__gwq); my @__gwp = @__gwq; push (@__gvy, \@__gwp); } foreach my $__gwz (@__gvl) { foreach my $__gxa (@{$__gwz}) { $__gwc[$__gxa->[0] - 1] = 0; } } my @__gxb = grep { @{$_} == 2 } @__gvl; for ($__gvm = 0; $__gvm < $__gvp; $__gvm++) { my $__gxc = $__gvw[$__gvm]; my $__gxd = $__gvq / $__gvv[$__gvm]; for ($__gvn = 0; $__gvn < $__gvv[$__gvm]; $__gvn++) { $__gvy[$__gxc]->[$__gxc] = $__gxd; $__gwa[$__gxc]->[$__gxc] = ($__gxd * $__gxd) * $__gwe; for (my $__gwm = $__gvm + 1; $__gwm < $__gvp; $__gwm++) { my $__gxe = $__gvw[$__gwm]; my $__gxf = $__gvv[$__gvm] * $__gvv[$__gwm]; foreach my $__gxg (@__gxb) { my $__gxh = $__gxg->[0]->[0] - 1; my $__gxi = $__gxg->[1]->[0] - 1; $__gxf-- if (($__gxh == $__gvm && $__gxi == $__gwm) || ($__gxi == $__gvm && $__gxh == $__gwm)); } my $__gxj = $__gvq / $__gxf; for (my $__gxk = 0; $__gxk < $__gvv[$__gwm]; $__gxk++) { my $__gxl = 0; foreach my $__gxg (@__gxb) { my $__gxh = $__gxg->[0]->[0] - 1; my $__gxi = $__gxg->[1]->[0] - 1; my $__gxm = $__gxg->[0]->[1] - 1; my $__gxn = $__gxg->[1]->[1] - 1; if (($__gxh == $__gvm && $__gxi == $__gwm && $__gxm == $__gvn && $__gxn == $__gxk) || ($__gxi == $__gvm && $__gxh == $__gwm && $__gxn == $__gvn && $__gxm == $__gxk)) { $__gxl = 1; last; } } unless ($__gxl) { $__gvy[$__gxc]->[$__gxe] = $__gxj; $__gwa[$__gxc]->[$__gxe] = $__gxj * $__gxj; } $__gxe++; } } $__gxc++; } } } my $__gxo = $__gwd != $__gvp; my $__gxp = 20000; my $__gxq = 1000; my $__gxr = 2000; my $__gxs = 1; my $__gxt = 0; my $__gxu = 0; my $__gxv = 0; my @__gxw = (); my @__gxx = (); my $__gxy = 0; my $__gxz = 0; my @__gya = (); my @__gyb = (); my $__gyc = 0; my $__gyd = 0; my $__gye = 0; my $__gyf = 0; my %__gyg = (); my @__gyh = (0..($__gvq - 1)); my $__gyi = 0; my $__gyj = 0; my $__gyk = 0; my $__gyl = 0; my $__gym = 0; my $__gyn = 0.01; if ($authlib9_14_2::_amg) { $__gxr = 1; $__gxq = 20; $__gxp = 200; } else { $__gyg{'_bbi'} = { 'VsCounts' => authlib9_14_2::_acv(\@__gwa), }; eval { require "Time/HiRes.pm"; }; if ($@) { authlib9_14_2::_zq(0, "Unable to load Time/HiRes.pm<br/><br/>", $@, ""); } $__gyk = [Time::HiRes::gettimeofday()]; } while ($__gyi < $__gxr && !$__gyj) { $__gxv = 0; $__gxy = 0; @__gxw = (0..($__gvj - 1)); @__gxx = (); for ($__gvm = 0; $__gvm < $__gvj; $__gvm++) { push (@__gxx, []); } if (!$authlib9_14_2::_amg) { $__gxz = 0; $__gyc = 0; $__gyd = 0; $__gye = 0; @__gwa = @{authlib9_14_2::_acv($__gyg{'_bbi'}->{'VsCounts'})}; @__gya = (); @__gyb = (); @__gwu = (1) x $__gvp; @__gwv = (0) x $__gvp; @__gww = (0) x $__gvp; @__gvx = (); for ($__gvm = 0; $__gvm < $__gvu; $__gvm++) { my @__gwq = (0) x $__gvu; push (@__gvx, \@__gwq); } } while ($__gxy < $__gvq) { $__gxs = 1; $__gxt = 0; my @__gyo = (0); push (@__gyo, (0) x $__gvp); my $__gyp = -1; $__gxo = $__gwd != $__gvp; while ($__gxs) { $__gxu = 0; if ($__gxo && $__gxt == $__gxq) { $__gxo = 0; authlib9_14_2::_zp($__hat, "Cannot create a new concept after " . $__gxq . " iterations. Turning off avoid dominated concepts code."); } elsif ($__gxt >= $__gxp) { $__gxv = 1; authlib9_14_2::_zp($__hat, "Cannot create a new concept after " . $__gxp . " iterations. Proceeding with " . $__gxy . " concepts."); last; } for ($__gvm = 0; $__gvm < $__gvp; $__gvm++) { $__gyo[$__gvm + 1] = $__gwh[$__gvm]->[_azm(\@__gwb, \@__gwx, $__gvm)]; } if ($__gvr) { $__gxu = _azq(\@__gyo, \@__gvl); } if (!$__gxu && $__gxo) { $__gxu = _azn(\@__gyo, \@__gwf, \@__gvt); } unless ($__gxu) { $__gvm = 0; while ($__gvm < @__gxw) { my $__gyq = $__gxx[$__gxw[$__gvm]]; if (_azs($__gyq, \@__gyo, -1)) { $__gvm++; next; } if ($__gxo) { if (_azp($__gyq, \@__gyo, \@__gwf)) { $__gvm++; next; } if ($__gvs && _azr($__gyq, \@__gyo, -1)) { $__gvm++; next; } } $__gyp = $__gxw[$__gvm]; last; } } if ($__gyp == -1 || $__gxu) { $__gxt++; } else { $__gxs = 0; } } if ($__gxv) { last; } my $__gyr = $__gxx[$__gyp]; if (!$authlib9_14_2::_amg) { for ($__gvm = 0; $__gvm < $__gvp; $__gvm++) { my $__gxc = $__gvw[$__gvm] + $__gyo[$__gvm + 1] - 1; my $__gys = $__gvx[$__gxc]; my $__gyt = $__gvy[$__gxc]; my $__gyu = $__gwa[$__gxc]; for ($__gvn = $__gvm; $__gvn < $__gvp; $__gvn++) { my $__gxe = $__gvw[$__gvn] + $__gyo[$__gvn + 1] - 1; $__gys->[$__gxe]++; my $__gyv = ($__gys->[$__gxe] - $__gyt->[$__gxe]) ** 2; $__gyv *= $__gwe if ($__gxc == $__gxe); $__gyu->[$__gxe] = $__gyv; } } for ($__gvm = 0; $__gvm < @{$__gyr}; $__gvm++) { for ($__gvn = 0; $__gvn < $__gvp; $__gvn++) { if ($__gyo[$__gvn + 1] == $__gyr->[$__gvm]->[$__gvn + 1]) { $__gwv[$__gvn]++; } } } } push (@{$__gyr}, \@__gyo); $__gxy++; if (@{$__gyr} == $__gvi) { my $__gyw = _azl($__gyp, \@__gxw); splice(@__gxw, $__gyw, 1); } } my @__gyx = (); if (!$authlib9_14_2::_amg) { $__gxo = $__gwd != $__gvp; for ($__gvm = 0; $__gvm < $__gvp; $__gvm++) { my $__gyy = $__gwv[$__gvm] / $__gvj; $__gwu[$__gvm] = ($__gyy + 1) / ($__gvz[$__gvm] + 1); my $__gxj = abs($__gwu[$__gvm] - (1 + $__gwg[$__gvm])); push (@__gya, $__gxj); $__gyc += $__gxj; if ($__gwg[$__gvm] == 0 && $__gyy > $__gvz[$__gvm]) { $__gww[$__gvm] = $__gyy * $__gwc[$__gvm]; } $__gyd += $__gww[$__gvm]; } for ($__gvm = 0; $__gvm < $__gvu; $__gvm++) { my $__gyu = $__gwa[$__gvm]; for ($__gvn = $__gvm; $__gvn < $__gvu; $__gvn++) { $__gxz += $__gyu->[$__gvn]; } } if ($__gxo) { for ($__gvm = 0; $__gvm < $__gvj; $__gvm++) { my $__gyr = $__gxx[$__gvm]; my $__gxj = _azo($__gyr, \@__gwf); push (@__gyb, int($__gxj * 100)); $__gye += $__gyb[$__gvm]; } } else { @__gyb = (0) x $__gvj; } $__gyc += $__gyn; $__gyf = _azc($__gyc, $__gxz, $__gyd, $__gye); $__gyl = $__gyf; $__gym = 1; $__gyj = authlib9_14_2::_ww($__gyk, 0.99); while ($__gym && !$__gyj) { $__gym = 0; authlib9_14_2::_xg(\@__gyh); for (my $__gyz = 0; $__gyz < $__gvq && !$__gyj; $__gyz++) { $__gvm = int($__gyh[$__gyz] / $__gvi); $__gvn = int($__gyh[$__gyz] % $__gvi); my $__gyr = $__gxx[$__gvm]; my $__gza = $__gyr->[$__gvn]; authlib9_14_2::_xg(\@__gwy); for (my $__gzb = 0; $__gzb < $__gvp && !$__gyj; $__gzb++) { my $__gzc = $__gwy[$__gzb]; my $__gzd = $__gza->[$__gzc + 1]; my $__gze = $__gzd; my @__gzf = @{$__gza}; my %__gzg = (); for (my $__gzh = 0; $__gzh < $__gvv[$__gzc]; $__gzh++) { if ($__gwh[$__gzc]->[$__gzh] != $__gzd) { $__gzf[$__gzc + 1] = $__gwh[$__gzc]->[$__gzh]; if ($__gvr && _azq(\@__gzf, \@__gvl)) { next; } if (_azs($__gyr, \@__gzf, $__gvn)) { next; } if ($__gxo) { if ($__gvs && _azr($__gyr, \@__gzf, $__gvn)) { next; } } my $__gzi = $__gvw[$__gzc] + $__gzd - 1; my $__gzj = $__gvw[$__gzc] + $__gwh[$__gzc]->[$__gzh] - 1; my $__gzk = $__gxz; my $__gyv = 0; for (my $__gzl = 0; $__gzl < $__gzc; $__gzl++) { my $__gxc = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; $__gzk -= $__gwa[$__gxc]->[$__gzi]; $__gzk -= $__gwa[$__gxc]->[$__gzj]; $__gyv = (($__gvx[$__gxc]->[$__gzi] - 1) - $__gvy[$__gxc]->[$__gzi]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__gxc]->[$__gzj] + 1) - $__gvy[$__gxc]->[$__gzj]) ** 2; $__gzk += $__gyv; } $__gzk -= $__gwa[$__gzi]->[$__gzi]; $__gzk -= $__gwa[$__gzj]->[$__gzj]; $__gyv = (($__gvx[$__gzi]->[$__gzi] - 1) - $__gvy[$__gzi]->[$__gzi]) ** 2; $__gzk += $__gyv * $__gwe; $__gyv = (($__gvx[$__gzj]->[$__gzj] + 1) - $__gvy[$__gzj]->[$__gzj]) ** 2; $__gzk += $__gyv * $__gwe; for (my $__gzl = $__gzc + 1; $__gzl < $__gvp; $__gzl++) { my $__gxe = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; $__gzk -= $__gwa[$__gzi]->[$__gxe]; $__gzk -= $__gwa[$__gzj]->[$__gxe]; $__gyv = (($__gvx[$__gzi]->[$__gxe] - 1) - $__gvy[$__gzi]->[$__gxe]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__gzj]->[$__gxe] + 1) - $__gvy[$__gzj]->[$__gxe]) ** 2; $__gzk += $__gyv; } my $__gzm = 0; my $__gzn = 0; for (my $__gzo = 0; $__gzo < $__gvi; $__gzo++) { next if ($__gzo == $__gvn); if ($__gyr->[$__gzo]->[$__gzc + 1] == $__gzd) { $__gzm++; } if ($__gyr->[$__gzo]->[$__gzc + 1] == $__gwh[$__gzc]->[$__gzh]) { $__gzn++; } } my $__gyy = ($__gwv[$__gzc] - $__gzm + $__gzn) / $__gvj; my $__gzp = ($__gyy + 1) / ($__gvz[$__gzc] + 1); my $__gzq = abs($__gzp - (1 + $__gwg[$__gzc])); my $__gzr = $__gyc - $__gya[$__gzc] + $__gzq; my $__gzs = 0; if ($__gwg[$__gzc] == 0 && $__gyy > $__gvz[$__gzc]) { $__gzs = $__gyy * $__gwc[$__gzc]; } my $__gzt = $__gyd - $__gww[$__gzc] + $__gzs; my $__gzu = 0; if ($__gxo) { $__gza->[$__gzc + 1] = $__gwh[$__gzc]->[$__gzh]; my $__gxj = _azo($__gyr, \@__gwf); $__gza->[$__gzc + 1] = $__gzd; $__gzu = int($__gxj * 100); } my $__gzv = $__gye - $__gyb[$__gvm] + $__gzu; my $__gzw = _azc($__gzr, $__gzk, $__gzt, $__gzv); if ($__gzw < $__gyl) { $__gze = $__gwh[$__gzc]->[$__gzh]; $__gyl = $__gzw; $__gzg{$__gwh[$__gzc]->[$__gzh]} = [$__gzk, $__gzr, $__gzt, $__gzv, $__gzp, ($__gwv[$__gzc] - $__gzm + $__gzn), $__gzs, $__gzq, $__gzu]; } } } if ($__gze != $__gzd) { $__gym = 1; ($__gxz, $__gyc, $__gyd, $__gye, $__gwu[$__gzc], $__gwv[$__gzc], $__gww[$__gzc], $__gya[$__gzc], $__gyb[$__gvm]) = @{$__gzg{$__gze}}; $__gyf = $__gyl; $__gza->[$__gzc + 1] = $__gze; my $__gzi = $__gvw[$__gzc] + $__gzd - 1; my $__gzj = $__gvw[$__gzc] + $__gze - 1; my $__gyv = 0; for (my $__gzl = 0; $__gzl < $__gzc; $__gzl++) { my $__gxc = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; $__gvx[$__gxc]->[$__gzi]--; $__gyv = ($__gvx[$__gxc]->[$__gzi] - $__gvy[$__gxc]->[$__gzi]) ** 2; $__gwa[$__gxc]->[$__gzi] = $__gyv; $__gvx[$__gxc]->[$__gzj]++; $__gyv = ($__gvx[$__gxc]->[$__gzj] - $__gvy[$__gxc]->[$__gzj]) ** 2; $__gwa[$__gxc]->[$__gzj] = $__gyv; } $__gvx[$__gzi]->[$__gzi]--; $__gyv = ($__gvx[$__gzi]->[$__gzi] - $__gvy[$__gzi]->[$__gzi]) ** 2; $__gwa[$__gzi]->[$__gzi] = $__gyv * $__gwe; $__gvx[$__gzj]->[$__gzj]++; $__gyv = ($__gvx[$__gzj]->[$__gzj] - $__gvy[$__gzj]->[$__gzj]) ** 2; $__gwa[$__gzj]->[$__gzj] = $__gyv * $__gwe; for (my $__gzl = $__gzc + 1; $__gzl < $__gvp; $__gzl++) { my $__gxe = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; $__gvx[$__gzi]->[$__gxe]--; $__gyv = ($__gvx[$__gzi]->[$__gxe] - $__gvy[$__gzi]->[$__gxe]) ** 2; $__gwa[$__gzi]->[$__gxe] = $__gyv; $__gvx[$__gzj]->[$__gxe]++; $__gyv = ($__gvx[$__gzj]->[$__gxe] - $__gvy[$__gzj]->[$__gxe]) ** 2; $__gwa[$__gzj]->[$__gxe] = $__gyv; } } $__gyj = authlib9_14_2::_ww($__gyk, 0.99); } } for ($__gvm = 0; $__gvm < $__gvj && !$__gyj; $__gvm++) { my $__gyr = $__gxx[$__gvm]; for ($__gvn = 0; $__gvn < $__gvi && !$__gyj; $__gvn++) { my $__gza = $__gyr->[$__gvn]; for (my $__gwm = $__gvn + 1; $__gwm < $__gvi && !$__gyj; $__gwm++) { my %__gzg = (); my $__gzx = -1; my $__gzy = $__gyr->[$__gwm]; authlib9_14_2::_xg(\@__gwy); for (my $__gzb = 0; $__gzb < $__gvp; $__gzb++) { my $__gzc = $__gwy[$__gzb]; my $__gzz = 0; my $__haa = $__gza->[$__gzc + 1]; my $__hab = $__gzy->[$__gzc + 1]; next if ($__haa == $__hab); $__gza->[$__gzc + 1] = $__hab; $__gzy->[$__gzc + 1] = $__haa; if ($__gvr) { $__gzz = _azq($__gzy, \@__gvl) || _azq($__gza, \@__gvl); } if (!$__gzz) { $__gzz = _azs($__gyr, $__gzy, $__gwm) || _azs($__gyr, $__gza, $__gvn); } if ($__gzz) { $__gza->[$__gzc + 1] = $__haa; $__gzy->[$__gzc + 1] = $__hab; next; } my $__hac = $__gvw[$__gzc] + $__haa - 1; my $__had = $__gvw[$__gzc] + $__hab - 1; my $__gzk = $__gxz; my $__gyv = 0; for (my $__gzl = 0; $__gzl < $__gzc; $__gzl++) { my $__hae = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; my $__haf = $__gvw[$__gzl] + $__gzy->[$__gzl + 1] - 1; $__gzk -= $__gwa[$__hae]->[$__hac]; $__gzk -= $__gwa[$__hae]->[$__had]; $__gzk -= $__gwa[$__haf]->[$__hac]; $__gzk -= $__gwa[$__haf]->[$__had]; $__gyv = (($__gvx[$__hae]->[$__hac] - 1) - $__gvy[$__hae]->[$__hac]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__haf]->[$__had] - 1) - $__gvy[$__haf]->[$__had]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__hae]->[$__had] + 1) - $__gvy[$__hae]->[$__had]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__haf]->[$__hac] + 1) - $__gvy[$__haf]->[$__hac]) ** 2; $__gzk += $__gyv; } for (my $__gzl = $__gzc + 1; $__gzl < $__gvp; $__gzl++) { my $__hag = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; my $__hah = $__gvw[$__gzl] + $__gzy->[$__gzl + 1] - 1; $__gzk -= $__gwa[$__hac]->[$__hag]; $__gzk -= $__gwa[$__hac]->[$__hah]; $__gzk -= $__gwa[$__had]->[$__hag]; $__gzk -= $__gwa[$__had]->[$__hah]; $__gyv = (($__gvx[$__hac]->[$__hag] - 1) - $__gvy[$__hac]->[$__hag]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__had]->[$__hah] - 1) - $__gvy[$__had]->[$__hah]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__hac]->[$__hah] + 1) - $__gvy[$__hac]->[$__hah]) ** 2; $__gzk += $__gyv; $__gyv = (($__gvx[$__had]->[$__hag] + 1) - $__gvy[$__had]->[$__hag]) ** 2; $__gzk += $__gyv; } my $__gzu = 0; if ($__gxo) { my $__gxj = _azo($__gyr, \@__gwf); $__gzu = int($__gxj * 100); } my $__gzv = $__gye - $__gyb[$__gvm] + $__gzu; my $__gzw = _azc($__gyc, $__gzk, $__gyd, $__gzv); if ($__gzw < $__gyl) { $__gzx = $__gzc; $__gyl = $__gzw; $__gzg{$__gzc} = [$__gzk, $__gzv, $__gzu]; } $__gza->[$__gzc + 1] = $__haa; $__gzy->[$__gzc + 1] = $__hab; } if ($__gzx != -1) { $__gym = 1; ($__gxz, $__gye, $__gyb[$__gvm]) = @{$__gzg{$__gzx}}; $__gyf = $__gyl; my $__haa = $__gza->[$__gzx + 1]; my $__hab = $__gzy->[$__gzx + 1]; $__gza->[$__gzx + 1] = $__hab; $__gzy->[$__gzx + 1] = $__haa; my $__hac = $__gvw[$__gzx] + $__haa - 1; my $__had = $__gvw[$__gzx] + $__hab - 1; my $__gyv = 0; for (my $__gzl = 0; $__gzl < $__gzx; $__gzl++) { my $__hae = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; my $__haf = $__gvw[$__gzl] + $__gzy->[$__gzl + 1] - 1; $__gvx[$__hae]->[$__hac]--; $__gyv = ($__gvx[$__hae]->[$__hac] - $__gvy[$__hae]->[$__hac]) ** 2; $__gwa[$__hae]->[$__hac] = $__gyv; $__gvx[$__haf]->[$__had]--; $__gyv = ($__gvx[$__haf]->[$__had] - $__gvy[$__haf]->[$__had]) ** 2; $__gwa[$__haf]->[$__had] = $__gyv; $__gvx[$__hae]->[$__had]++; $__gyv = ($__gvx[$__hae]->[$__had] - $__gvy[$__hae]->[$__had]) ** 2; $__gwa[$__hae]->[$__had] = $__gyv; $__gvx[$__haf]->[$__hac]++; $__gyv = ($__gvx[$__haf]->[$__hac] - $__gvy[$__haf]->[$__hac]) ** 2; $__gwa[$__haf]->[$__hac] = $__gyv; } for (my $__gzl = $__gzx + 1; $__gzl < $__gvp; $__gzl++) { my $__hag = $__gvw[$__gzl] + $__gza->[$__gzl + 1] - 1; my $__hah = $__gvw[$__gzl] + $__gzy->[$__gzl + 1] - 1; $__gvx[$__hac]->[$__hag]--; $__gyv = ($__gvx[$__hac]->[$__hag] - $__gvy[$__hac]->[$__hag]) ** 2; $__gwa[$__hac]->[$__hag] = $__gyv; $__gvx[$__had]->[$__hah]--; $__gyv = ($__gvx[$__had]->[$__hah] - $__gvy[$__had]->[$__hah]) ** 2; $__gwa[$__had]->[$__hah] = $__gyv; $__gvx[$__hac]->[$__hah]++; $__gyv = ($__gvx[$__hac]->[$__hah] - $__gvy[$__hac]->[$__hah]) ** 2; $__gwa[$__hac]->[$__hah] = $__gyv; $__gvx[$__had]->[$__hag]++; $__gyv = ($__gvx[$__had]->[$__hag] - $__gvy[$__had]->[$__hag]) ** 2; $__gwa[$__had]->[$__hag] = $__gyv; } } $__gyj = authlib9_14_2::_ww($__gyk, 0.99); } } } } push(@__gyx, shift(@__gxx)); my $__hai = $__gyx[0]; my $__haj = 0; my $__hak = 0; my $__hal = 1; while (@__gxx > 0) { for ($__gvm = 0; $__gvm < @__gxx; $__gvm++) { my $__ham = $__gxx[$__gvm]; $__hal = 1; for (my $__han = 0; $__han < $__gvi && $__hal; $__han++) { my $__hao = $__hai->[$__han]; my $__hap = 0; for ($__gvn = 0; $__gvn < $__gvi && !$__hap; $__gvn++) { my $__haq = $__ham->[$__gvn]; $__hal = 1; for (my $__gwm = 1; $__gwm <= $__gvp && $__hal; $__gwm++) { $__hal = $__hao->[$__gwm] == $__haq->[$__gwm]; } $__hap = $__hal; } $__hal = $__hap; } if (!$__hal) { $__haj = 0; if ($__hak == 0) { $__hai = $__gxx[$__gvm]; push (@__gyx, $__hai); splice(@__gxx, $__gvm , 1); last; } elsif ($__hak == -1) { $__hai = $__gxx[$__gvm]; unshift (@__gyx, $__hai); splice(@__gxx, $__gvm, 1); last; } } } if ($__hal) { if ($__haj == 1) { $__haj = 0; $__gvn = int(rand(scalar @__gyx)); $__hai = $__gxx[0]; splice(@__gyx, $__gvn, 0, $__hai); shift(@__gxx); } else { $__hai = $__gyx[$__hak]; $__hak = $__hak == -1 ? 0 : -1; $__haj++; } } } } else { @__gyx = @__gxx; } $__gyj = authlib9_14_2::_ww($__gyk, 0.99); if ($__gyi == 0 && $__gyj) { my $__har = "Design optimize timed out. Possibility that design contains more overlap than specified and dominated tasks. Proceeding with current concepts.\n"; authlib9_14_2::_zp($__hat, $__har); } if ($__gyi == 0 || $__gyf < $__gyg{'_ban'}->{'TotalPenalty'}) { $__gyg{'_ban'} = { 'TotalPenalty' => $__gyf, 'Tasks' => authlib9_14_2::_acv(\@__gyx), }; } $__gyi++; } @__gxx = @{$__gyg{'_ban'}->{'Tasks'}}; $__gxy = 1; my @__has = (); for ($__gvm = 0; $__gvm < $__gvj; $__gvm++) { for ($__gvn = 0; $__gvn < $__gvi; $__gvn++) { $__gxx[$__gvm]->[$__gvn]->[0] = $__gxy++; push(@__has, $__gxx[$__gvm]->[$__gvn]); } } return \@__has; } sub _azc { my ($__hav, $__haw, $__hax, $__hay) = @_; return $__hav * $__haw + $__hax + $__hay + rand()*0.00001; } sub _azd { my ($__hbi) = @_; my $__haz = $__hbi->{'_dj'}; my $__hba = $__haz->{'_cz'}; my $__hbb = $__haz->{'_on'}; my @__hbc = @{$__hbi->{'_ae'}}; my $__hbd = 0; my $__hbe = 1; my @__hbf = (); foreach $__hbd (@__hbc) { push @__hbf, [$__hbe, scalar @{$__hbd->{'_hf'}}, $__hbd->{'_jf'}]; $__hbe++; } my $__hbg = 0; if (exists $__hbi->{'_ph'}) { $__hbg = 1; } my $__hbh = "{"; $__hbh .= "\"atts\"=>" . authlib9_14_2::_wz(\@__hbf) . ","; $__hbh .= "\"tasks\"=>" . $__hbb . ","; $__hbh .= "\"concepts\"=>" . $__hba . ","; $__hbh .= "\"none\"=>" . $__hbg; $__hbh .= "}"; return $__hbh; } sub _aze { my ($__hew, $__hex, $__hey, $__hez, $__hfa) = @_; my $__hbj = ""; my $__hbk = 0; my $__hbl = 0; my $__hbm = 0; my $__hbn = 0; my $__hbo = 0; my @__hbp = (); my @__hbq = (); my $__hbr = ""; my $__hbs = 0; my $__hbt = 0; my $__hbu = $authlib9_14_2::_ahv{'_aml'}; my $__hbv = 0; my $__hbw = 0; my $__hbx = 0; my $__hby = 0; my $__hbz = 0; my $__hca = 0; my $__hcb = 0; my $__hcc = 0; my $__hcd = 0; my $__hce = 0; my $__hcf = 0; my $__hcg = ""; my %__hch = (); my %__hci = (); ($__hbm, $__hbw) = _ayt($__hey); if ($__hfa) { $__hce = $__hew->{'_cv'}; $__hcf = @{$__hew->{'_ae'}}; my $__hcj = ($__hbm - 1) * $__hce; my $__hck = 0; my $__hcl = 0; my $__hcm = 0; for ($__hbn = 0; $__hbn < $__hce; $__hbn++) { $__hck = $__hfa->[$__hcj + $__hbn]; $__hcm = 0; foreach $__hcl(@{$__hck}) { if ($__hcm > 0) { push @__hbp, $__hcl - 1; } $__hcm++; } } } elsif ($__hbw) { $__hce = $__hew->{'_cv'}; $__hcf = @{$__hew->{'_ae'}}; if (exists $__hew->{'_ep'}) { push @__hbp, @{$__hew->{'_ep'}->{$__hey}}; } } else { my $__hcn = $__hbu . $authlib9_14_2::_akh . "_CBC" . $__hew->{'_el'} . "_" . $__hew->{'_dv'} . ".cgi"; my ($__hfb, $__hfc) = authlib9_14_2::_yg($__hcn, "read", 1, 1); binmode $__hfb; if (((-s $__hcn) != $__hew->{'_ef'}) && !$authlib9_14_2::_amg) { close $__hfb; authlib9_14_2::_zq(150, "CBC design file error.", "The size of the CBC Design file (" . $__hcn . ") does not match the size expected by the QST file. Try uploading the file again in binary mode.", ""); } my $__hco = 25; read ($__hfb, $__hbr, $__hco); ($__hbx, $__hby, $__hbz, $__hca, $__hcb, $__hcc, $__hcd, $__hce, $__hcf) = unpack("VVVVCvvvv", $__hbr); if ($__hby != $__hew->{'_el'}) { close $__hfb; authlib9_14_2::_zq(151, "CBC design file error.", "Exercise ID in CBC design file (" . $__hby . ") does not match exercise ID in the QST file (" . $__hew->{'_el'} . ").", ""); } elsif ($__hbz != $__hew->{'_dv'}) { close $__hfb; authlib9_14_2::_zq(152, "CBC design file error.", "Design ID in CBC design file (" . $__hbz . ") does not match design ID in the QST file (" . $__hew->{'_dv'} . ").", ""); } $__hbl = ($__hex - 1) % $__hcc; $__hcg = _azg($__hex, $__hey, $__hby, $__hbz, $__hbl, $__hcb); $__hbk = $__hco; $__hbt = $__hce * $__hcf; $__hbk += ($__hbl * $__hcd * $__hbt); $__hbk += (($__hbm - 1) * $__hbt); seek ($__hfb, $__hbk, 0); read $__hfb, $__hbj, $__hbt; @__hbp = unpack("C*", $__hbj); close $__hfb; } my $__hcp = $__hew->{'_lk'}; my $__hcq = $__hew->{'_lj'}; my $__hcr = 0; my @__hcs = ("") x $__hcf; my $__hct = 0; my $__hcu = 0; my $__hcv = 1; if (exists $__hew->{'_i'}) { $__hct = $__hew->{'_i'}; } if (($__hct == 2) && !(exists $__hew->{'_n'}) && ($__hez == 0)) { $__hcu = 1; } if ($__hez && $__hct != 3) { $__hcv = 0; } if ($__hcp > 0) { $__hcr = authlib9_14_2::_acm($__hex, $__hcf, 20981, $__hcp, $__hcq); } else { for ($__hbn = 0; $__hbn < $__hcf; $__hbn++) { $__hcs[$__hbn] = $__hbn; } $__hcr = \@__hcs; } my $__hcw = 0; my $__hcx = 0; my $__hcy = 0; my $__hcz = 0; my $__hda = 0; my $__hdb = 0; my $__hdc = ""; my $__hdd = 0; my @__hde = ("") x 2; my @__hdf = ("") x $__hce; my $__hdg = 0; my $__hdh = 0; my %__hdi = (); my $__hdj = 1; my $__hdk = 0; my $__hdl = 0; my $__hdm = 0; my $__hdn = 0; my $__hdo = 0; my $__hdp = 0; my @__hdq = ("") x $__hce; my %__hdr = (); my $__hds = 0; my @__hdt = ("") x $__hce; my @__hdu = ("") x $__hcf; my $__hdv = 0; my $__hdw = 0; my $__hdx = {}; if (exists $__hew->{'_dd'}) { $__hdv = 1; $__hdw = $__hew->{'_dd'}->{'_md'}; my $__hdy = 0; if (exists $__hew->{'_dd'}->{'_gg'}) { foreach $__hdy (@{$__hew->{'_dd'}->{'_gg'}}) { $__hdi{$__hdy - 1} = $__hdy - 1; } } if (exists $__hew->{'_dd'}->{'_qf'}) { $__hdx = $__hew->{'_dd'}->{'_qf'}; } } if (exists $__hew->{'_cu'} && ($authlib9_14_2::_amg != &authlib9_14_2::_AOY)) { $__hdo = 1; $__hdp = $__hew->{'_cu'}->{'_ab'} - 1; } for ($__hbn = 0; $__hbn < $__hce; $__hbn++) { my @__hdz = (); for ($__hbo = 0; $__hbo < $__hcf; $__hbo++) { $__hdk = 0; $__hdh = $__hcr->[$__hbo]; $__hdg = $__hbp[($__hcf * $__hbn) + $__hdh]; if ($__hdv) { $__hdu[$__hbo] = $__hbp[($__hcf * $__hbn) + $__hbo]; } if ($__hdo && ($__hdh == $__hdp)) { $__hds = $__hdg; while(exists $__hdr{$__hds}) { $__hds += .001; } $__hdq[$__hbn] = $__hds; } if (!exists $__hdi{$__hdh}) { if ($__hdg == 255) { if (($__hbn == 0) && $__hcv) { $__hdj = 1; for ($__hcz = ($__hbn + 1); $__hcz < $__hce; $__hcz++) { if ($__hbp[($__hcf * $__hcz) + $__hdh] < 255) { $__hdj = 0; last; } } if ($__hdj) { $__hdl = 1; if ($__hdv) { my $__hea = 0; foreach $__hea (@{$__hdw}) { if ($__hdh == ($__hea->{'_jx'} - 1)) { if (!_azf($__hea, \@__hbp, $__hce, $__hcf)) { $__hdl = 0; last; } } } } if ($__hdl) { $__hdi{$__hdh} = $__hdh; $__hdk = 1; } } } if ($__hcu) { $__hdk = 1; } } elsif (exists $__hew->{'_no'}) { $__hew->{'_n'} = 0; if ($__hew->{'_no'}->[$__hdh] == $__hdg) { my $__heb = 0; if ($__hdv) { my $__hea = 0; foreach $__hea (@{$__hdw}) { if ($__hdh == ($__hea->{'_jx'} - 1)) { $__heb = 1; last; } } } if (!$__heb) { $__hdk = 1; } } } if (!$__hdk) { $__hde[0] = $__hdh; $__hde[1] = $__hdg; push @__hdz, [@__hde]; } } } if ($__hdv) { my $__hea = 0; my $__hec = ""; my $__hed = 0; my $__hee = 0; my $__hef = 0; my $__heg = 0; my $__heh = 0; my $__hei = 0; my $__hej = 0; my $__hek = 0; my @__hel = (); my @__hem = (); my $__hen = 0; my $__heo = 0; my $__hep = 0; foreach $__hea (@{$__hdw}) { if ($__hea->{'_jx'} < 0) { if ($__hea->{'_jx'} == -1) { $__hen++; } elsif ($__hea->{'_jx'} == -2) { $__heo++; } if (_azf($__hea, \@__hbp, $__hce, $__hcf)) { if ($__hea->{'_jx'} == -1) { $__hch{$__hen} = 1; } elsif ($__hea->{'_jx'} == -2) { $__hci{$__heo} = 1; } next; } } $__hed = 0; $__heh = @{$__hea->{'_ae'}}; for ($__hef = 0; $__hef < $__heh; $__hef++) { $__hei = 0; $__hej = $__hea->{'_ae'}->[$__hef]; $__hcx = $__hdu[$__hej - 1]; if ($__hcx == 255) { $__hei = 0; } else { $__hei = $__hcx; if (exists $__hdx->{$__hej}) { $__hei++; } } for ($__heg = $__hef + 1; $__heg < $__heh; $__heg++) { $__hek = $__hea->{'_ae'}->[$__heg]; $__hep = @{$__hew->{'_ae'}->[$__hek - 1]->{'_hf'}}; if (exists $__hdx->{$__hek}) { $__hep++; } $__hei *= $__hep; } $__hed += $__hei; } $__hee = $__hea->{'_ja'}->[$__hed]; if ($__hee == 0) { $__hec = ""; } else { seek $authlib9_14_2::_ajm, $__hee, 0; $__hec = authlib9_14_2::_zi(1); } if ($__hea->{'_jx'} == -1) { push @__hem, ["C-T", $__hec]; } elsif ($__hea->{'_jx'} == -2) { push @__hdz, ["C-B", $__hec]; } else { my $__heq = 0; my $__her = 0; foreach $__heq (@__hdz) { if ($__heq->[0] == ($__hea->{'_jx'} - 1)) { $__heq->[0] = "C-" . $__heq->[0]; $__heq->[1] = $__hec; $__her = 1; last; } } } } if (@__hem > 0) { unshift @__hdz, @__hem; } } $__hdf[$__hbn] = {'_bac'=>[@__hdz], '_pt'=>($__hbn + 1)}; if ($__hdo) { $__hdr{$__hdq[$__hbn]} = $__hdf[$__hbn]; $__hdt[$__hbn] = $__hbn; } elsif ($__hdn < @__hdz) { $__hdn = @__hdz; $__hdm = $__hbn; } } if ($__hdo) { my $__hes = 0; my $__het = 0; @__hdf = ("") x $__hce; @__hdq = sort {$a <=> $b} @__hdq; if (exists $__hew->{'_cu'}->{'_lq'}) { my @__heu = (); my $__hev = @{$__hew->{'_ae'}->[$__hdp]->{'_hf'}}; $__hcr = authlib9_14_2::_acm($__hex, $__hev, 50221, 1, $__hev); for ($__hbn = 0; $__hbn < $__hev; $__hbn++) { for ($__hbo = 0; $__hbo < $__hce; $__hbo++) { if ($__hcr->[$__hbn] == int($__hdq[$__hbo])) { while (($__hcr->[$__hbn] == int($__hdq[$__hbo])) && ($__hbo < $__hce)) { push @__heu, $__hbo; $__hbo++; } last; } } } if (@__heu < $__hce) { for ($__hbo = 0; $__hbo < $__hce; $__hbo++) { if (int($__hdq[$__hbo]) == 255) { while ((int($__hdq[$__hbo]) == 255) && ($__hbo < $__hce)) { push @__heu, $__hbo; $__hbo++; } last; } } } $__het = \@__heu; } else { $__het = \@__hdt; } for ($__hbn = 0; $__hbn < $__hce; $__hbn++) { $__hes = $__hdr{$__hdq[$__het->[$__hbn]]}; $__hdf[$__hbn] = $__hes; if ($__hdn < @{$__hes->{'_bac'}}) { $__hdn = @{$__hes->{'_bac'}}; $__hdm = $__hbn; } } } return (\@__hdf, $__hbl, $__hdm, $__hcg, \%__hch, \%__hci); } sub _azf { my ($__hfh, $__hfi, $__hfj, $__hfk) = @_; my @__hfd = @{$__hfh->{'_ae'}}; my $__hfe = 0; my $__hff = 1; my $__hfg = 0; foreach $__hfe (@__hfd) { for ($__hfg = 0; $__hfg < $__hfj; $__hfg++) { if ($__hfi->[($__hfk * $__hfg) + ($__hfe - 1)] < 255) { $__hff = 0; last; } } if ($__hff == 0) { last; } } return $__hff; } sub _azg { my ($__hfw, $__hfx, $__hfy, $__hfz, $__hga, $__hgb) = @_; my $__hfl = ""; my @__hfm = (); my $__hfn = $__hfx; $__hfn =~ s/_(.*?)$//; my $__hfo = "sys_CBCDesignID_" . $__hfn; my $__hfp = "CBC" . $__hfy . "_" . $__hfz . "_" . $__hgb; my $__hfq = authlib9_14_2::_ws($__hfo); if ($__hfq eq "") { push @__hfm, [$__hfo, $__hfp]; } else { if ($__hgb == 1) { if ($__hfq !~ m/^(.*?)_(\d+)_(\d+)$/ig) { $__hfp =~ s/^(.*?)_(\d+)$/$1/; } } if ($__hfq ne $__hfp) { my $__hfr = "sys_CBCDesignError_" . $__hfn; my $__hfs = authlib9_14_2::_ws($__hfr); if ($__hfs eq "") { my $__hft = "CBC Design Error: This data record contains data from two different CBC designs. " . $__hfp; authlib9_14_2::_acg(&authlib9_14_2::_AOT, 0, $__hft); push @__hfm, [$__hfr, $__hft]; } } } my $__hfu = "sys_CBCVersion_" . $__hfn; my $__hfv = $__hga + 1; if (authlib9_14_2::_ws($__hfu) eq "") { push @__hfm, [$__hfu, $__hfv]; } if (@__hfm && !$authlib9_14_2::_amg) { authlib9_14_2::_xj(\@__hfm, $__hfw, 0); } return $__hfl; } sub _azh { my ($__hgf) = @_; my $__hgc = ""; my $__hgd = $__hgf->_awd()->{'_baj'}; my $__hge = cbcconstantsumview9_14_2::new({}); $__hgc .= $__hge->_bff($__hgd); return $__hgc; } sub _azi { my ($__hgj) = @_; my $__hgg = ""; my $__hgh = $__hgj->_awd()->{'_baj'}; my $__hgi = cbcbestworstview9_14_2::new({}); $__hgg = $__hgi->_bff($__hgh); return $__hgg; } sub _azj { my ($__hgn) = @_; my $__hgk = ""; my $__hgl = $__hgn->_awd()->{'_baj'}; my $__hgm = cbcdiscreteview9_14_2::new({}); $__hgk = $__hgm->_bff($__hgl); } sub _azk { my ($__hgw, $__hgx, $__hgy, $__hgz, $__hha) = @_; $__hha = authlib9_14_2::_acq($__hha); if ($__hgw->_avz()) { if ($__hha =~ m/\[%CBCNONE\(\)%\]/i) { my $__hgo = "<div class=\"custom_position_none\"><div class=\"none_text\">" . $__hgw->_atx()->{'_op'} . "</div>"; my $__hgp = $__hgw->_atz(); if ($__hgw->_aum()) { $__hgo .= $__hgw->_azh(); } elsif ($__hgw->_aun()) { $__hgo .= $__hgw->_azi(); } else { $__hgo .= $__hgw->_azj(); } $__hgo .= "</div>"; $__hha =~ s/\[%CBCNONE\(\)%\]/$__hgo/sgi; } } if ($__hha =~ m/\[%CBCVERSION\(\)%\]/i) { if ($__hgy =~ m/Fixed/i) { $__hgz = ""; } else { $__hgz++; } my $__hgq = "D - " . $__hgz . ", T - " . $__hgy; $__hha =~ s/\[%CBCVERSION\(\)%\]/$__hgq/sgi; } if ($__hha =~ m/\[%CBCCURRENTTASK\(\)%\]/i) { my $__hgr = 0; my $__hgs = ""; if ($__hgy =~ m/^(.*?)_(.*?)$/) { $__hgs = $2; } if (exists $__hgx->{'_ok'}) { $__hgr = $__hgx->{'_ok'}->{$__hgs}; } $__hha =~ s/\[%CBCCURRENTTASK\(\)%\]/$__hgr/sgi; } if ($__hha =~ m/\[%CBCTOTALTASKS\(\)%\]/i) { my $__hgt = 0; if (exists $__hgx->{'_ok'}) { $__hgt = keys %{$__hgx->{'_ok'}}; } $__hha =~ s/\[%CBCTOTALTASKS\(\)%\]/$__hgt/sgi; } if ($__hha =~ m/\[%CBCATTRIBUTELABEL\(\)%\]/i) { my $__hgu = ""; if (exists $__hgx->{'_ab'}) { my $__hgv = $__hgx->{'_ab'}; if (exists $__hgx->{'_bbj'}) { $__hgu = $__hgx->{'_bbj'}->{'_ae'}->[$__hgv - 1]->{'_if'}; } } $__hha =~ s/\[%CBCATTRIBUTELABEL\(\)%\]/$__hgu/sgi; } return $__hha; } sub _azl { my ($__hhe, $__hhf) = @_; if ($__hhf->[0] == $__hhe) { return 0; } elsif ($__hhf->[-1] == $__hhe) { return @{$__hhf} - 1; } my $__hhb = 0; my $__hhc = @{$__hhf}; while ($__hhc >= $__hhb) { my $__hhd = $__hhb + int(($__hhc - $__hhb) / 2); if ($__hhf->[$__hhd] < $__hhe) { $__hhb = $__hhd + 1; } elsif ($__hhf->[$__hhd] > $__hhe) { $__hhc = $__hhd - 1; } else { return $__hhd; } } return -1; } sub _ww { my ($__hhi) = @_; my $__hhg = 0; if ($__hhi) { my $__hhh = Time::HiRes::tv_interval($__hhi); $__hhg = ($__hhh >= 0.99); } return $__hhg; } sub _azm { my ($__hhk, $__hhl, $__hhm) = @_; if ($__hhl->[$__hhm] == @{$__hhk} - 1) { authlib9_14_2::_xg($__hhk->[$__hhm]); $__hhl->[$__hhm] = 0; } my $__hhj = $__hhk->[$__hhm]->[$__hhl->[$__hhm]]; $__hhl->[$__hhm]++; return $__hhj; } sub _azn { my ($__hht, $__hhu, $__hhv) = @_; my $__hhn = 0; my $__hho = 0; my $__hhp = @{$__hht} - 1; for (my $__hhq = 0; $__hhq < $__hhp; $__hhq++) { my $__hhr = $__hht->[$__hhq + 1]; my $__hhs = $__hhu->[$__hhq]->[$__hhr - 1]; if ($__hhs == $__hhv->[$__hhq]->{'_ho'} && $__hhv->[$__hhq]->{$__hhr} == 1) { $__hho = 1; } elsif ($__hhs == $__hhv->[$__hhq]->{'_hx'} && $__hhv->[$__hhq]->{$__hhr} == 1) { $__hhn = 1; } else { $__hho = 0; $__hhn = 0; last; } if ($__hho && $__hhn) { $__hho = 0; $__hhn = 0; last; } } return $__hhn || $__hho; } sub _azo { my ($__hij, $__hik) = @_; my $__hhw = 0; my $__hhx = 0; my $__hhy = 0; my $__hhz = @{$__hij}; my $__hia = @{$__hij->[0]} - 1; for (my $__hib = 0; $__hib < $__hhz - 1; $__hib++) { my $__hic = $__hij->[$__hib]; for (my $__hid = $__hib + 1; $__hid < $__hhz; $__hid++) { my $__hie = $__hij->[$__hid]; for (my $__hif = 0; $__hif < $__hia; $__hif++) { my $__hig = $__hik->[$__hif]; my $__hih = $__hig->[$__hic->[$__hif + 1] - 1]; my $__hii = $__hig->[$__hie->[$__hif + 1] - 1]; if ($__hii == 0 || $__hih == 0) { if ($__hii == 0 && $__hih == 0 && $__hic->[$__hif + 1] == $__hie->[$__hif + 1]) { next; } $__hhw = 0; $__hhx = 0; last; } elsif ($__hii < $__hih) { $__hhw = 1; } elsif ($__hii > $__hih) { $__hhx = 1; } elsif ($__hic->[$__hif + 1] != $__hie->[$__hif + 1]) { $__hhw = 0; $__hhx = 0; last; } if ($__hhw && $__hhx) { $__hhw = 0; $__hhx = 0; last; } } $__hhy += $__hhw || $__hhx; } } return $__hhy; } sub _azp { my ($__hiw, $__hix, $__hiy) = @_; my $__hil = 0; my $__him = 0; my $__hin = 0; my $__hio = @{$__hiw}; my $__hip = @{$__hix} - 1; for (my $__hiq = 0; $__hiq < $__hio && !$__hin; $__hiq++) { my $__hir = $__hiw->[$__hiq]; for (my $__his = 0; $__his < $__hip; $__his++) { my $__hit = $__hiy->[$__his]; my $__hiu = $__hit->[$__hir->[$__his + 1] - 1]; my $__hiv = $__hit->[$__hix->[$__his + 1] - 1]; if ($__hiv == 0 || $__hiu == 0) { if ($__hiv == 0 && $__hiu == 0 && $__hir->[$__his + 1] == $__hix->[$__his + 1]) { next; } $__hil = 0; $__him = 0; last; } elsif ($__hiv < $__hiu) { $__hil = 1; } elsif ($__hiv > $__hiu) { $__him = 1; } elsif ($__hir->[$__his + 1] != $__hix->[$__his + 1]) { $__hil = 0; $__him = 0; last; } if ($__hil && $__him) { $__hil = 0; $__him = 0; last; } } $__hin = $__hil || $__him; } return $__hin; } sub _azq { my ($__hjd, $__hje) = @_; my $__hiz = 0; foreach my $__hja (@{$__hje}) { my $__hjb = 1; foreach my $__hjc (@{$__hja}) { my ($__hjf, $__hjg) = @{$__hjc}; if ($__hjd->[$__hjf] != $__hjg) { $__hjb = 0; last; } } if ($__hjb) { $__hiz = 1; last; } } return $__hiz; } sub _azr { my ($__hjn, $__hjo, $__hjp) = @_; my $__hjh = @{$__hjn}; my $__hji = @{$__hjo} - 1; my $__hjj = 0; my $__hjk = 0; my $__hjl = 0; if ($__hjh == 0) { return 0; } for ($__hjk = 0; $__hjk < $__hji && !$__hjj; $__hjk++) { my $__hjm = $__hjo->[$__hjk + 1]; $__hjj = 1; for ($__hjl = 0; $__hjl < $__hjh && $__hjj; $__hjl++) { next if ($__hjp == $__hjl); $__hjj = $__hjm == $__hjn->[$__hjl]->[$__hjk + 1]; } } return $__hjj; } sub _azs { my ($__hjw, $__hjx, $__hjy) = @_; my $__hjq = @{$__hjw}; my $__hjr = @{$__hjx} - 1; my $__hjs = 0; my $__hjt = 0; my $__hju = 0; for ($__hjt = 0; $__hjt < $__hjq && !$__hjs; $__hjt++) { next if ($__hjy == $__hjt); my $__hjv = 0; for ($__hju = 0; $__hju < $__hjr && !$__hjv; $__hju++) { $__hjv = $__hjx->[$__hju + 1] != $__hjw->[$__hjt]->[$__hju + 1]; } $__hjs = !$__hjv; } return $__hjs; } 1;  package cbcviewgenerator9_14_2; sub new{ my ($viewData) = @_; return bless($viewData); } sub _bby { my ($__hjz) = @_; return "discretechoice"; } sub _bbz { my ($__hkc) = @_; my $__hka = $__hkc->{'_bam'}; my $__hkb = 0; if ($__hka) { if ($__hka == cbclib9_14_2::_BBQ) { $__hkb = cbcdiscreteview9_14_2::new($__hkc); } elsif ($__hka == cbclib9_14_2::_BBN) { $__hkb = cbcshelfview::new($__hkc); } elsif ($__hka == cbclib9_14_2::_BBP) { $__hkb = cbcbestworstview9_14_2::new($__hkc); } elsif ($__hka == cbclib9_14_2::_BBO) { $__hkb = cbcconstantsumview9_14_2::new($__hkc); } else { $__hkb = cbcdiscreteview9_14_2::new($__hkc); } } else { $__hkb = cbcdiscreteview9_14_2::new($__hkc); } return $__hkb; } sub _bca { my ($__hkd) = @_; return $__hkd->{'_gx'}; } sub _bcb { my ($__hkf, $__hkg) = @_; my $__hke = @{ $__hkf->{'_cv'} }; if ($__hkg && $__hkf->_bdj() && !$__hkf->_avy()) { $__hke++; } return $__hke; } sub _ati { my ($__hkh) = @_; return scalar @{$__hkh->{'_ae'}}; } sub _bcc { my ($__hkj) = @_; my $__hki = $__hkj->{'_cx'}; if ($__hkj->_auo()) { $__hki = 999999999; } return $__hki; } sub _aua { my ($__hkk) = @_; return exists $__hkk->{'_ae'}; } sub _aub { my ($__hkl) = @_; return $__hkl->_aua() && !exists $__hkl->{'_bfx'}; } sub _bcd { my ($__hkn, $__hko) = @_; my $__hkm = $__hkn->{'_ae'}->[$__hko]; return $__hkm; } sub _bce { my ($__hkr, $__hks) = @_; my $__hkp = $__hkr->_bcd($__hks); my $__hkq = "<div class=\"att_label_text\">$__hkp</div>"; return $__hkq; } sub _bcf { my ($__hkt) = @_; return $__hkt->{'_cv'}; } sub _aug { my ($__hku) = @_; return exists $__hku->_bdf(0)->{'_bak'}; } sub _bcg { my ($__hkv) = @_; return $__hkv->_aug() || $__hkv->_awi(); } sub _bch { my ($__hla, $__hlb, $__hlc) = @_; my $__hkw = $__hla->_bcf()->[$__hlb]->{'_hf'}; my $__hkx = @{ $__hkw }; my $__hky = -1; for (my $__hkz = 0; $__hkz < $__hkx; $__hkz++) { if ($__hkw->[$__hkz]->{'_bad'} == $__hlc) { $__hky = $__hkz; last; } } return $__hky; } sub _bci { my ($__hld) = @_; return $__hld->{'_bax'}; } sub _bcj { my ($__hle, $__hlf) = @_; return $__hle->{'_bat'}->[$__hlf]; } sub _bck { my ($__hll, $__hlm, $__hln) = @_; my $__hlg = $__hll->_bcf()->[$__hlm]->{'_hf'}; my $__hlh = @{ $__hlg }; my $__hli = $__hll->_bcj($__hln); my $__hlj = { "attribute_index"=> $__hln, "level_text"=> "" }; if ($__hln <= $__hlh && ($__hlg->[$__hln]->{'_bad'} == $__hli || !$__hll->_bci()) ) { $__hlj = $__hlg->[$__hln]; } else { my $__hlk = $__hll->_bch($__hlm, $__hli); if ($__hlk >= 0) { $__hlj = $__hlg->[$__hlk]; } } return $__hlj; } sub _bcl { my ($__hlo, $__hlp, $__hlq) = @_; return $__hlo->_bck($__hlp, $__hlq)->{'_bag'}; } sub _bcm { my ($__hlv, $__hlw) = @_; my $__hlr = scalar @{ $__hlw }; my $__hls = "\n<ul class=\"merged_text\">"; for (my $__hlt = 0; $__hlt < $__hlr; $__hlt++) { my $__hlu = $__hlw->[$__hlt]; $__hls .= "<li>$__hlu</li>" } $__hls .= "</ul>"; return $__hls; } sub _bcn { my ($__hmb, $__hmc) = @_; my $__hlx = scalar @{ $__hmc }; my $__hly = "\n<ol class=\"merged_text\">"; for (my $__hlz = 0; $__hlz < $__hlx; $__hlz++) { my $__hma = $__hmc->[$__hlz]; $__hly .= "<li>$__hma</li>" } $__hly .= "</ol>"; return $__hly; } sub _bco { my ($__hmh, $__hmi) = @_; my $__hmd = scalar @{ $__hmi }; my $__hme = "\n<div class=\"merged_text\">"; for (my $__hmf = 0; $__hmf < $__hmd; $__hmf++) { my $__hmg = $__hmi->[$__hmf]; $__hme .= "<div>$__hmg</div>"; } $__hme .= "</div>"; return $__hme; } sub _bcp { my ($__hmj) = @_; return "level_text"; } sub _auz { my ($__hmn, $__hmo, $__hmp) = @_; my $__hmk = ""; if ($__hmn->_bct($__hmo, $__hmp)) { my $__hml = $__hmn->_bck($__hmo, $__hmp)->{'_bae'}; my $__hmm = $__hmn->_bcl($__hmo, $__hmp); if ($__hmm eq "bullets") { $__hmk = $__hmn->_bcm($__hml); } elsif ($__hmm eq "numbers") { $__hmk = $__hmn->_bcn($__hml); } else { $__hmk = $__hmn->_bco($__hml); } } else { $__hmk = $__hmn->_bck($__hmo, $__hmp)->{'_bae'}; } return $__hmk; } sub _bcq { my ($__hmt, $__hmu, $__hmv) = @_; my $__hmq = $__hmt->_auz($__hmu, $__hmv); my $__hmr = $__hmt->_bcp(); my $__hms = ""; $__hms .= $__hmt->_bfw("level", 0, 0); $__hms .= "<span class=\"$__hmr\">$__hmq</span>"; $__hms .= $__hmt->_vl(0); return $__hms; } sub _bcr { my ($__hmy, $__hmz, $__hna) = @_; my $__hmw = -1; my $__hmx = $__hmy->_bck($__hmz, $__hna); if (!$__hmy->_bct($__hmz, $__hna) && $__hmx->{'_bai'} ne $__hmx->{'_bae'}) { $__hmw = $__hmx->{'_bai'}; } return $__hmw; } sub _bcs { my ($__hnd, $__hne, $__hnf) = @_; my $__hnb = -1; my $__hnc = $__hnd->_bck($__hne, $__hnf); if (!$__hnd->_bct($__hne, $__hnf) && $__hnc->{'_bai'} ne $__hnc->{'_bae'}) { $__hnb = $__hnc->{'_bad'}; } return $__hnb; } sub _bct { my ($__hnh, $__hni, $__hnj) = @_; my $__hng = $__hnh->_bck($__hni, $__hnj); return exists $__hng->{'_baf'}; } sub _bcu { my ($__hnk) = @_; return $__hnk->{'_baj'}; } sub _avr { my ($__hnm, $__hnn, $__hno) = @_; my $__hnl = $__hno; if (exists $__hnn->{'_op'}) { $__hnl = $__hnn->{'_op'}; } return $__hnl; } sub _bcv { my ($__hnq) = @_; my $__hnp = $__hnq->_bdd(-1); $__hnp .= $__hnq->_bdv(); return $__hnp; } sub _bcw { my ($__hns) = @_; my $__hnr = $__hns->_bde(1) . $__hns->_bdv(); return $__hnr; } sub _bcx { my ($__hnt) = @_; return "concept_cell"; } sub _bcy { my ($__hnw, $__hnx) = @_; my $__hnu = $__hnx + 1; my $__hnv = "att_$__hnu att_label"; if ($__hnx == 0) { $__hnv .= $__hnw->_bdc(); } return $__hnv; } sub _bcz { my ($__hny) = @_; return exists $__hny->{'_bfy'}; } sub _bda { my ($__hnz) = @_; return "attribute_label_column"; } sub _bdb { my ($__hob) = @_; my $__hoa = $__hob->_bda(); if ($__hob->_bcz()) { $__hoa .= " " . $__hob->_bdx(); } return $__hoa; } sub _bdc { my ($__hoc) = @_; return " first_att"; } sub _bdd { my ($__hof, $__hog) = @_; my $__hod = $__hof->_bdn() . " " . $__hof->_bcx(); my $__hoe = $__hof->_ati(); if ($__hog >= 0) { $__hod .= " " . $__hof->_bcy($__hog); } if ($__hog == $__hoe - 1 && !$__hof->_bci()) { $__hod .= " grow_cell"; } return $__hod; } sub _bde { my ($__hoi, $__hoj) = @_; my $__hoh = $__hoi->_bdn() . " none_cell"; if (!$__hoj) { $__hoh .= $__hoi->_bdc(); } return $__hoh; } sub _auo { my ($__hok) = @_; return exists $__hok->{'_nl'}; } sub _bdf { my ($__hol, $__hom) = @_; return $__hol->{'_cv'}->[$__hom]; } sub _bdg { my ($__hop, $__hoq) = @_; my $__hon = $__hop->_bdf($__hoq); my $__hoo = $__hon->{'_pt'}; return $__hoo; } sub _bdh { my ($__hor) = @_; return $__hor->{'_bay'}; } sub _bdi { my ($__hos) = @_; return $__hos->_bdh()->{'_jx'} } sub _awe { my ($__hot) = @_; return exists $__hot->{'_bay'} && $__hot->_bdi() != cbclib9_14_2::_BBV; } sub _avz { my ($__hou) = @_; return exists $__hou->{'_bay'} && $__hou->_bdi() == cbclib9_14_2::_BBV; } sub _bdj { my ($__hov) = @_; return $__hov->_bdk() || $__hov->_bdl(); } sub _bdk { my ($__how) = @_; return $__how->_awe() && $__how->_bdi() == cbclib9_14_2::NONE_AS_CONCEPT; } sub _bdl { my ($__hox) = @_; return $__hox->_awe() && ($__hox->_bdi() == cbclib9_14_2::_BBU || $__hox->_bft() == cbclib9_14_2::_BBX); } sub _avy { my ($__hoy) = @_; return $__hoy->_awe() && $__hoy->{'_bay'}->{'_pj'} eq "dual response"; } sub _bdm { my ($__hoz) = @_; return ""; } sub _bdn { my ($__hpa) = @_; return "cbc_cell"; } sub _bdo { my ($__hpb) = @_; return "discrete"; } sub _bdp { my ($__hpd, $__hpe) = @_; my $__hpc = $__hpd->_bdd(-1) . " cbc_response_cell"; return $__hpc; } sub _bdq { my ($__hpf) = @_; return "task_select_button"; } sub _bdr { my ($__hph) = @_; my $__hpg = $__hph->_bdq(); $__hpg .= " best_button"; return $__hpg; } sub _bds { my ($__hpi) = @_; return "mobile_attribute_label"; } sub _bdt { my ($__hpj) = @_; return "task_controls"; } sub _bdu { my ($__hpk) = @_; return "task_nav"; } sub _bdv { my ($__hpl) = @_; return " concept_label_cell"; } sub _bdw { my ($__hpm) = @_; return " attribute_label_cell"; } sub _bdx { my ($__hpn) = @_; return "extra_concept_row"; } sub _bdy { my ($__hpp) = @_; my $__hpo = $__hpp->_bdn() . $__hpp->_bdw(); return $__hpo; } sub _bdz { my ($__hpr) = @_; my $__hpq = "cbc_task " . $__hpr->_bdo(); if ($__hpr->_bca() == cbclib9_14_2::_BBL) { $__hpq .= " owl-carousel"; } if (authlib9_14_2::_aet()) { $__hpq .= " hide_for_processing"; } return $__hpq; } sub _bea { my ($__hps) = @_; return " none"; } sub _beb { my ($__hpt) = @_; return $__hpt->{'_ud'}; } sub _bec { my ($__hpu) = @_; return ""; } sub _bed { my ($__hpy) = @_; my $__hpv = ""; my $__hpw = $__hpy->_beb(); my $__hpx = $__hpy->_bcb(1); $__hpv .= "<!--LoadTestMode: <question><name>$__hpw</name><type>cbc</type><min>1</min><max>$__hpx</max>"; $__hpv .= "<dualresponsenone>" . ($__hpy->_avy() ? "true" : "false") . "</dualresponsenone>"; $__hpv .= "<traditionalnone>" . ($__hpy->_bdk() ? "true" : "false") . "</traditionalnone>"; $__hpv .= "<subtype>"; $__hpv .= $__hpy->_bby(); $__hpv .= "</subtype>"; $__hpv .= $__hpy->_bec(); $__hpv .= "<shelfdisplay>" . ($__hpy->_auo() ? "true" : "false") . "</shelfdisplay>"; $__hpv .= "</question>-->"; return $__hpv; } sub _axw { my ($__hpz) = @_; return $__hpz->{'_bbb'}; } sub _bee { my ($__hqe, $__hqf) = @_; my $__hqa = ""; my $__hqb = $__hqf + 1; my $__hqc = "cbc_shelf"; my $__hqd = "shelf_$__hqb"; $__hqa .= $__hqe->_bfw($__hqc, "id=\"$__hqd\"", 0); $__hqa .= $__hqe->_bfw("shelf_top", 0, 0); $__hqa .= $__hqe->_vl(0); $__hqa .= $__hqe->_bfw("shelf_edge", 0, 0); $__hqa .= $__hqe->_vl(0); $__hqa .= $__hqe->_vl(1); return $__hqa; } sub _vr { my ($__hqi) = @_; my $__hqg = ""; my $__hqh = $__hqi->_bef(); $__hqg .= $__hqi->_bfw($__hqh, 0, 1); $__hqg .= $__hqi->_beg(); $__hqg .= $__hqi->_bel(); $__hqg .= $__hqi->_vl(1); if ($__hqi->_avy()) { $__hqg .= $__hqi->_bfu(); } if ($authlib9_14_2::_ajg) { $__hqg .= $__hqi->_bed(); } return $__hqg; } sub _bef { my ($__hql) = @_; my $__hqj = ""; my $__hqk = $__hql->_bca(); if ($__hqk == cbclib9_14_2::_BBL) { $__hqj = "mobile_horizontal"; } elsif ($__hqk == cbclib9_14_2::_BBM) { $__hqj = "mobile_vertical" } elsif ($__hqk == cbclib9_14_2::_BBK) { $__hqj = "no_mobile"; } if ($__hql->_auo()) { $__hqj = "no_mobile shelf_display" } return $__hqj; } sub _beg { my ($__hqp) = @_; my $__hqm = ""; my $__hqn = $__hqp->_bdt(); my $__hqo = $__hqp->_bdu(); $__hqm .= $__hqp->_bfw($__hqn); $__hqm .= $__hqp->_bfw($__hqo, 0, 1); $__hqm .= $__hqp->_beh(); $__hqm .= $__hqp->_bei(); $__hqm .= $__hqp->_bek(); $__hqm .= $__hqp->_vl(); $__hqm .= $__hqp->_vl(1); return $__hqm; } sub _beh { my ($__hqr) = @_; my $__hqq = "\n"; $__hqq .= $__hqr->_bfw("carousel_prev carousel_arrow", 0, 0); $__hqq .= "<svg width=\"16\" height=\"23\" viewBox=\"0 0 16 23\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path id=\"Left_task_arrow\" data-name=\"Left task arrow\" class=\"cbc_nav_arrow cbc_nav_arrow_left\" d=\"M16 1.05025L16 21.9498C16 22.7829 15.0409 23.2507 14.3844 22.7378L1.00867 12.288C0.496197 11.8877 0.496197 11.1123 1.00867 10.712L14.3844 0.26222C15.0409 -0.250702 16 0.217098 16 1.05025Z\" fill=\"#666666\"/></svg>"; $__hqq .= $__hqr->_vl(1); return $__hqq; } sub _bei { my ($__hqv) = @_; my $__hqs = ""; my $__hqt = $__hqv->_bcb(); $__hqs .= $__hqv->_bfw("task_nav_dots"); for (my $__hqu = 0; $__hqu < $__hqt; $__hqu++) { $__hqs .= $__hqv->_bej($__hqu + 1); } if ($__hqv->_bdk() || ($__hqv->_bdl() && !$__hqv->_avy())) { $__hqs .= $__hqv->_bej($__hqt + 1); } $__hqs .= $__hqv->_vl(); return $__hqs; } sub _bej { my ($__hqx, $__hqy) = @_; my $__hqw = ""; $__hqw .= $__hqx->_bfw("nav_dot dot_$__hqy"); $__hqw .= "<svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">"; $__hqw .= "<circle class=\"nav_dot_circle\" cx=\"6\" cy=\"6\" r=\"4\" fill=\"#c4c4c4\"/>"; $__hqw .= "<circle class=\"nav_dot_border\" cx=\"6\" cy=\"6\" r=\"5.5\" stroke=\"#2796C6\"/></svg>"; $__hqw .= $__hqx->_vl(); return $__hqw; } sub _bek { my ($__hra) = @_; my $__hqz = "\n"; $__hqz .= $__hra->_bfw("carousel_next carousel_arrow", 0, 0); $__hqz .= "<svg width=\"16\" height=\"23\" viewBox=\"0 0 16 23\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path id=\"Right_task_arrow\" data-name=\"Right task arrow\" class=\"cbc_nav_arrow cbc_nav_arrow_right\" d=\"M0 1.05025L0 21.9498C0 22.7829 0.959101 23.2507 1.61564 22.7378L14.9913 12.288C15.5038 11.8877 15.5038 11.1123 14.9913 10.712L1.61564 0.26222C0.959101 -0.250702 0 0.217098 0 1.05025Z\" fill=\"#666666\"/></svg>\n"; $__hqz .= $__hra->_vl(1); return $__hqz; } sub _bel { my ($__hrf) = @_; my $__hrb = ""; my $__hrc = $__hrf->_bdz(); my $__hrd = $__hrf->_bcb(); my $__hre = 0; $__hrb .= $__hrf->_bfw($__hrc, 0, 1); if ($__hrf->_auo()) { $__hrb .= $__hrf->_ben(); } else { $__hrb .= $__hrf->_bfj(); if ($__hrf->_avx()) { $__hrb .= $__hrf->_bfs(); } } $__hrb .= $__hrf->_vl(1); return $__hrb; } sub _bem { my ($__hrg) = @_; return $__hrg->{'_bbc'}; } sub _ben { my ($__hrs) = @_; my $__hrh = ""; my $__hri = $__hrs->_bfp(); my $__hrj = $__hrs->_bcb(); my $__hrk = $__hrs->_axw(); my $__hrl = $__hrs->_bem(); my $__hrm = "shelf_container"; my $__hrn = 0; for (my $__hro = 0; $__hro < $__hrk; $__hro++) { my $__hrp = $__hrl->[$__hro]; $__hrh .= $__hrs->_bfw($__hrm, 0, 1); for (my $__hrq = 0; $__hrq < $__hrp; $__hrq++) { my $__hrr = $__hrs->_bet($__hrn); if ($__hrq == 0) { $__hrr .= " first_on_shelf"; } if ($__hrq == ($__hrp - 1)) { $__hrr .= " last_on_shelf"; } $__hrh .= $__hrs->_bfw($__hrr, 0, 1); $__hrh .= $__hrs->_bfm($__hrn, $__hri); $__hrh .= $__hrs->_vl(1); $__hrn++; if ($__hrk - 1 == $__hro && $__hrp - 1 == $__hrq && $__hrs->_bdk()) { $__hrh .= $__hrs->_bfs(); } } $__hrh .= $__hrs->_vl(1); $__hrh .= $__hrs->_bee($__hro); } if ($__hrs->_avx() && !$__hrs->_bdk()) { $__hrh .= $__hrs->_bfs(); } return $__hrh; } sub _awi { my ($__hrt) = @_; return exists $__hrt->{'_oy'}; } sub _awm { my ($__hru) = @_; return $__hru->{'_oy'}->{'_op'}; } sub _awh { my ($__hrv) = @_; return exists $__hrv->{'_bj'}; } sub _awl { my ($__hrw) = @_; return $__hrw->{'_bj'}->{'_op'}; } sub _beo { my ($__hrx) = @_; return " top_corner_label" . $__hrx->_bdv(); } sub _bep { my ($__hry) = @_; return " bottom_corner_label"; } sub _beq { my ($__hrz) = @_; return exists $__hrz->{'_baz'}; } sub _ber { my ($__hsa) = @_; return $__hsa->{'_bau'}; } sub _bes { my ($__hsb) = @_; return "first_in_row"; } sub _bet { my ($__hsi, $__hsj) = @_; my $__hsc = $__hsj + 1; my $__hsd = "cbc_concept concept_$__hsc " . $__hsi->_bdo(); my $__hse = $__hsi->_bcc(); if ($__hsi->_bcz()) { $__hsd .= " " . $__hsi->_bdx(); } if ($__hsj % $__hse == 0) { $__hsd .= " " . $__hsi->_bes(); } if ($__hsi->_beq()) { my $__hsf = $__hsi->_ber(); my $__hsg = " alt_color1"; my $__hsh = " alt_color2"; if ($__hsf % 2 == 0) { if ($__hsc % 2 == 0) { $__hsd .= $__hsg; } else { $__hsd .= $__hsh; } } else { if ($__hsc % 2 == 0) { $__hsd .= $__hsh; } else { $__hsd .= $__hsg; } } } return $__hsd; } sub _beu { my ($__hsk) = @_; return "lower_none"; } sub _bev { my ($__hsn, $__hso) = @_; my $__hsl = ""; my $__hsm = $__hsn->_bcc(); $__hsl .= $__hsn->_bet($__hso); $__hsl .= " none_concept"; if ($__hsn->_bdl() || $__hso % $__hsm == 0) { $__hsl .= " " . $__hsn->_beu() } if ($__hsn->_avy()) { $__hsl .= " dual_response_none " . $__hsn->_bes(); } return $__hsl; } sub _bew { my ($__hsp) = @_; return "show_when_selected"; } sub _bex { my ($__hsr, $__hss) = @_; my $__hsq = "input_label"; if (!$__hsr->_bez($__hss)) { $__hsq .= " " . $__hsr->_bew(); } return $__hsq; } sub _bey { my ($__hst) = @_; return "selected_image " . $__hst->_bew(); } sub _bez { my ($__hsu, $__hsv) = @_; return exists($__hsv->{'_bap'}); } sub _awy { my ($__hsw) = @_; return $__hsw->{'_bbd'}; } sub _bfa { my ($__htf) = @_; my $__hsx = ""; my $__hsy = $__htf->_ati(); my $__hsz = 0; my $__hta = $__htf->_bdy(); if ($__htf->_aub()) { $__hsx .= $__htf->_bfw($__htf->_bdb(), 0, 1); if ($__htf->_bcg()) { my $__htb = $__htf->_bdy() . $__htf->_beo(); my $__htc = ""; if ($__htf->_awi()) { $__htc = $__htf->_awm(); } $__hsx .= $__htf->_bfb($__htc, $__htb); } for (my $__htd = 0; $__htd < $__hsy; $__htd++) { my $__hte = " " . $__htf->_bcy($__htd); $__hsz = $__htf->_bce($__htd); $__hsx .= $__htf->_bfb($__hsz, $__hta . $__hte); } $__hsx .= $__htf->_bfc(0, -1, 0); $__hsx .= $__htf->_vl(1); } return $__hsx; } sub _bfb { my ($__hth, $__hti, $__htj) = @_; my $__htg = ""; $__htg .= $__hth->_bfw($__htj, 0, 0); $__htg .= $__hti; $__htg .= $__hth->_vl(); return $__htg; } sub _bfc { my ($__htm, $__htn, $__hto, $__htp) = @_; my $__htk = ""; my $__htl = $__htm->_bdp($__hto); if ($__htn) { $__htl .= " " . $__htm->_bcx(); $__htk .= $__htm->_bfd($__htn, $__hto, $__htl, $__htp) } else { $__htl .= $__htm->_bdw(); $__htl .= $__htm->_bep(); $__htk .= $__htm->_bfe($__htl); } return $__htk; } sub _bfd { my ($__htr, $__hts, $__htt, $__htu, $__htv) = @_; my $__htq = ""; if ($__htv) { $__htu .= $__htr->_bea(); } $__htq .= $__htr->_bfw($__htu); $__htq .= $__htr->_bff($__hts->{'_baj'}); $__htq .= $__htr->_vl(1); } sub _bfe { my ($__htx, $__hty) = @_; my $__htw = ""; $__htw .= $__htx->_bfw($__hty); if ($__htx->_awh()) { $__htw .= $__htx->_awl(); } $__htw .= $__htx->_vl(1); return $__htw; } sub _bff { my ($__huc, $__hud) = @_; my $__htz = ""; my $__hua = $__huc->_bdr(); my $__hub = $__huc->_avr($__hud, ""); $__htz .= $__huc->_bfh($__hua, $__hub, $__hud); return $__htz; } sub _bfg { my ($__hue) = @_; return $__hue->{'_baw'}; } sub _bfh { my ($__hum, $__hun, $__huo, $__hup) = @_; my $__huf = ""; my $__hug = $__hup->{'_if'}; my $__huh = $__hup->{'_pt'}; my $__hui = $__hug . "_$__huh"; my $__huj = $__hum->_bex($__hup); my $__huk = "clickable input_cell HideElement"; if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__huf .= "<div>" . ciwlib9_14_2::_td($__hug, 0, 1) . "</div>"; } my $__hul = ciwlib9_14_2::_sy($__huo); $__huf .= $__hum->_bfw($__hun, "aria-label=\"$__hul $__huh\""); $__huf .= $__hum->_bfw($__huk, 0, 0); $__huf .= ciwlib9_14_2::_tm($__hug, $__huh, 1, $__hum->_bfg()); $__huf .= $__hum->_vl(0); $__huf .= $__hum->_bfw($__huj); $__huf .= $__huo; $__huf .= $__hum->_vl(); if ($__hum->_bez($__hup)) { $__huf .= $__hum->_bfw($__hum->_bey()); $__huf .= $__hum->_vl(); } $__huf .= $__hum->_vl(); return $__huf; } sub _bfi { my ($__hut, $__huu) = @_; my $__huq = ""; my $__hur = $__hut->_bds(); my $__hus = $__hut->_bce($__huu); $__huq .= $__hut->_bfw($__hur); $__huq .= $__hus; $__huq .= $__hut->_vl(); return $__huq; } sub _bfj { my ($__hvb) = @_; my $__huv = ""; my $__huw = $__hvb->_bfp(); my $__hux = $__hvb->_bcb(); my $__huy = $__hvb->_bcc(); for (my $__huz = 0; $__huz < $__hux; $__huz++) { if ($__huz % $__huy == 0) { if ($__huz > 0) { $__hvb->{'_bfy'} = 1; } $__huv .= $__hvb->_bfa(); } my $__hva = $__hvb->_bet($__huz); $__huv .= $__hvb->_bfw($__hva, 0, 1); $__huv .= $__hvb->_bfm($__huz, $__huw); $__huv .= $__hvb->_vl(1); } return $__huv; } sub _bfk { my ($__hvc, $__hvd) = @_; return "<span class=\"header_text\">$__hvd</span>"; } sub _atj { my ($__hve, $__hvf) = @_; return exists $__hve->_bdf($__hvf)->{'_bal'}; } sub _bfl { my ($__hvg) = @_; return "repeated_label"; } sub _bfm { my ($__hvq, $__hvr, $__hvs) = @_; my $__hvh = ""; my $__hvi = $__hvq->_bdf($__hvr); my $__hvj = $__hvq->_ati(); my $__hvk = $__hvq->_bcv(); my $__hvl = ""; if ($__hvq->_aug()) { $__hvl = $__hvq->_bfk($__hvi->{'_bak'}); $__hvh .= $__hvq->_bfb($__hvl, $__hvk); } for (my $__hvm = 0; $__hvm < $__hvj; $__hvm++) { my $__hvn = $__hvq->_bcq($__hvr, $__hvm); my $__hvo = $__hvq->_bdd($__hvm); my $__hvp = $__hvq->_bfi($__hvm); if (_bfn($__hvm, $__hvs)) { $__hvo .= $__hvq->_bdm(); } $__hvh .= $__hvq->_bfb($__hvp . $__hvn, $__hvo); } if ($__hvq->_aug() && $__hvq->_atj($__hvr)) { $__hvk .= " " . $__hvq->_bfl(); $__hvh .= $__hvq->_bfb($__hvl, $__hvk); } $__hvh .= $__hvq->_bfc($__hvi, $__hvr, 0); return $__hvh; } sub _bfn { my ($__hvv, $__hvw) = @_; my $__hvt = scalar @{ $__hvw }; for (my $__hvu = 0; $__hvu < $__hvt; $__hvu++) { if ($__hvw->[$__hvu] = $__hvv) { return 1; } } return 0; } sub _bfo { my ($__hwa, $__hwb) = @_; my $__hvx = scalar @{ $__hwa }; my $__hvy = scalar @{ $__hwb }; if ($__hvx == $__hvy) { for (my $__hvz = 0; $__hvz < $__hvx; $__hvz++) { if ($__hwa->[$__hvz] ne $__hwb->[$__hvz]) { return 0; } } } return 1; } sub _bfp { my ($__hwl) = @_; my @__hwc; my $__hwd = $__hwl->_bcf(); my $__hwe = $__hwl->_ati(); my $__hwf = $__hwl->_bcb(); for (my $__hwg = 0; $__hwg < $__hwe; $__hwg++) { my $__hwh = $__hwl->_bcq(0, $__hwg); my $__hwi = 0; for (my $__hwj = 1; $__hwj < $__hwf; $__hwj++) { my $__hwk = $__hwl->_bcq($__hwj, $__hwg); if ($__hwh eq $__hwk) { $__hwi = 1; } else { $__hwi = 0; last; } } if ($__hwi) { push @__hwc, $__hwg; } } return \@__hwc; } sub _bfq { my ($__hwm) = @_; return $__hwm->_bdh()->{'_bak'}; } sub _bfr { my ($__hwp) = @_; my $__hwn = $__hwp->_bfq(); my $__hwo = 0; if ($__hwn ne "") { $__hwo = 1; } return $__hwo; } sub _bfs { my ($__hwy) = @_; my $__hwq = ""; my $__hwr = $__hwy->_bdh(); my $__hws = $__hwy->_bcb(); my $__hwt = "<div class=\"level\"><span class=\"" . $__hwy->_bcp() . "\">" . $__hwr->{'_op'} . "</span></div>"; my $__hwu = $__hwy->_bde(0); my $__hwv = $__hwy->_bev($__hws); my $__hww = ""; my $__hwx = ""; $__hwq .= $__hwy->_bfw($__hwv, 0, 1); if ($__hwy->_aug() && ($__hwy->_bdk() || $__hwy->_bfr())) { $__hww = $__hwy->_bcw(); $__hwx = $__hwy->_bfk($__hwy->_bfq()); $__hwq .= $__hwy->_bfb($__hwx, $__hww); } $__hwq .= $__hwy->_bfb($__hwt, $__hwu); if ($__hwy->_aug() && $__hwy->_atj()) { $__hww .= " " . $__hwy->_bfl(); $__hwq .= $__hwy->_bfb($__hwx, $__hww); } $__hwq .= $__hwy->_bfc($__hwr, $__hws, 1); $__hwq .= $__hwy->_vl(1); return $__hwq; } sub _bft { my ($__hwz) = @_; return $__hwz->_bdh()->{'_pj'}; } sub _avx { my ($__hxa) = @_; return $__hxa->_awe() && $__hxa->_bft() == cbclib9_14_2::_BBW; } sub _avy { my ($__hxb) = @_; return $__hxb->_awe() && $__hxb->_bft() == cbclib9_14_2::_BBX; } sub _bfu { my ($__hxn) = @_; my $__hxc = ""; my $__hxd = $__hxn->_bdh(); my $__hxe = "<div class=\"dual_response_none_question\">" . $__hxd->{'_op'} . "</div>"; my $__hxf = $__hxn->_bev(-1); my $__hxg = $__hxd->{'_bas'}; my $__hxh = $__hxn->_bcb(); my $__hxi = $__hxn->_bde(0); my $__hxj = $__hxn->_bdp(0); my $__hxk = "dual_response_none_button"; my $__hxl = "$__hxk would_button"; my $__hxm = "$__hxk would_not_button"; $__hxc .= $__hxn->_bfw($__hxf, "id=\"$__hxg\"", 1); $__hxc .= $__hxn->_bfb($__hxe, $__hxi); $__hxc .= $__hxn->_bfw($__hxj, 0, 0); $__hxc .= $__hxn->_bfh($__hxl, $__hxd->{'_qd'}, $__hxd->{'_baq'}); $__hxc .= $__hxn->_bfh($__hxm, $__hxd->{'_qe'}, $__hxd->{'_bar'}); $__hxc .= $__hxn->_vl(0); $__hxc .= $__hxn->_vl(1); return $__hxc; } sub _bfv { my ($__hxp) = @_; my $__hxo = ""; if ($__hxp->_avx()) { $__hxo .= $__hxp->_bfs(); } elsif ($__hxp->_avy()) { $__hxo .= $__hxp->_bfu(); } return $__hxo; } sub _bfw { my ($__hxr, $__hxs, $__hxt, $__hxu) = @_; my $__hxq = "<div class=\"$__hxs\""; if ($__hxt) { $__hxq .= " " . $__hxt; } $__hxq .= ">"; if ($__hxu) { $__hxq .= "\n"; } return $__hxq; } sub _vl { my ($__hxw, $__hxx) = @_; my $__hxv ="</div>"; if ($__hxx){ $__hxv .= "\n"; } return $__hxv; } 1;  package cbcdiscreteview9_14_2; our @ISA = qw(cbcviewgenerator9_14_2); sub new { my ($__hxy) = @_; return bless($__hxy); } 1;  package cbcbestworstview9_14_2; our @ISA = qw(cbcviewgenerator9_14_2); sub _bby { my ($__hxz) = @_; return "bestworst"; } sub _bdo { my ($__hya) = @_; return "best_worst"; } sub _bfz { my ($__hyc) = @_; my $__hyb = $__hyc->_bdq(); $__hyb .= " worst_button"; return $__hyb; } sub _bga { my ($__hyd) = @_; return $__hyd->_bcu()->{'_ban'}; } sub _bgb { my ($__hye) = @_; return $__hye->_bcu()->{'_bao'}; } sub _bff { my ($__hym, $__hyn) = @_; my $__hyf = ""; my $__hyg = $__hyn->{'_ban'}; my $__hyh = $__hyn->{'_bao'}; my $__hyi = $__hym->_bdr(); my $__hyj = $__hym->_bfz(); my $__hyk = $__hym->_avr($__hyg, "Best"); my $__hyl = $__hym->_avr($__hyh, "Worst"); $__hyf .= $__hym->_bfh($__hyi, $__hyk, $__hyg); $__hyf .= $__hym->_bfh($__hyj, $__hyl, $__hyh); return $__hyf; } sub new{ my ($__hyo) = @_; return bless($__hyo); } 1;  package cbcconstantsumview9_14_2; our @ISA = qw(cbcviewgenerator9_14_2); sub _bby { my ($__hyp) = @_; return "constantsum"; } sub _bec { my ($__hys) = @_; my $__hyq = ""; my $__hyr = $__hys->_bgc(); $__hyq .= "<constantsum>"; $__hyq .= "<consum>" . $__hyr->{'_bgg'} . "</consum>"; $__hyq .= "<min>" . $__hyr->{'_hx'} . "</min>"; $__hyq .= "<max>" . $__hyr->{'_ho'} . "</max>"; $__hyq .= "<decimal>" . ($__hyr->{'_bgh'} ? "true" : "false") . "</decimal>"; $__hyq .= "<wholereq>" . ($__hyr->{'_ml'} ? "true" : "false") . "</wholereq>"; $__hyq .= "</constantsum>"; } sub _bdo { my ($__hyt) = @_; return "constant_sum"; } sub _bgc { my ($__hyu) = @_; return $__hyu->{'_bba'}; } sub _bgd { my ($__hyw, $__hyx, $__hyy, $__hyz) = @_; if (!$__hyx){ $__hyx = $__hyz; } my $__hyv = "<span class=\"$__hyy\">$__hyx</span>"; return $__hyv; } sub _bge { my ($__hzk) = @_; my $__hza = ""; my $__hzb = $__hzk->_bgc(); my $__hzc = "cbc_totals_box"; my $__hzd = "cbc_totals_label"; my $__hze = $__hzd . " left"; my $__hzf = $__hzd . " right"; my $__hzg = "cbc_total"; my $__hzh = $__hzb->{'_if'}; my $__hzi = $__hzh . "_html"; my $__hzj = "0"; if (exists $__hzb->{'_ug'}) { $__hzj = $__hzb->{'_ug'}; } $__hza .= $__hzk->_bfw($__hzc, 0, 0); $__hza .= $__hzk->_bgd($__hzb->{'_bgi'}, $__hze, "Total:"); $__hza .= "<span id=\"$__hzi\" class=\"$__hzg\">$__hzj</span>"; $__hza .= "<input type=\"hidden\" name=\"$__hzh\" id=\"$__hzh\" value=\"$__hzj\">"; $__hza .= $__hzk->_bgd($__hzb->{'_bgj'}, $__hzf, ""); $__hza .= $__hzk->_vl(1); return $__hza; } sub _bel { my ($__hzq) = @_; my $__hzl = $__hzq->SUPER::_bel(); my $__hzm = $__hzq->_beb(); my $__hzn = $__hzq->_bcb(); if ($__hzq->_awe() && !$__hzq->_avy()) { $__hzn++; } my $__hzo = authlib9_14_2::_adw($__hzn + $__hzq->_avz()); my $__hzp = {}; $__hzp->{$__hzm . "_*"} = 1; $__hzl .= $__hzq->_bge(); $__hzl .= ciwlib9_14_2::_si($__hzm, $__hzo, $__hzp, "total"); return $__hzl; } sub _avj { my ($__hzr, $__hzs) = @_; return exists $__hzs->{'_gy'}; } sub _avk { my ($__hzt, $__hzu) = @_; return exists $__hzu->{'_mq'}; } sub _bgf { my ($__hzv, $__hzw, $__hzx) = @_; return "<span class=\"$__hzw\">$__hzx</span>"; } sub _bff { my ($__iad, $__iae) = @_; my $__hzy = ""; my $__hzz = $__iae->{'_if'}; my $__iaa = $__iae->{'_px'}; my $__iab = ""; if ($__iad->_avj($__iae)) { $__iab = $__iae->{'_gy'}; $__hzy .= $__iad->_bgf("left_input_label", $__iab); } if (exists $authlib9_14_2::_akn{"hid_test_mode"}) { $__hzy .= ciwlib9_14_2::_td($__hzz, 0, 1); } my $__iac = "tel"; if (exists $__iae->{'_dq'}) { $__iac = "text"; } $__hzy .= " <input type=\"" . $__iac . "\" class=\"numeric_input\" name=\"$__hzz\" size=\"$__iaa\""; if (exists $__iae->{'_ug'}) { $__hzy .= " value=\"" . $__iae->{'_ug'} . "\""; } $__hzy .= " id=\"$__hzz\"> \n"; if ($__iad->_avk($__iae)) { $__iab = $__iae->{'_mq'}; $__hzy .= $__iad->_bgf("right_input_label", $__iab); } return $__hzy; } sub new{ my ($__iaf) = @_; return bless($__iaf); } 1;